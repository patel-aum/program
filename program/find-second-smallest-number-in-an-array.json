{"slug":"find-second-smallest-number-in-an-array","title":"Find second smallest number in an array","trackId":4476,"tags":["C","C++","JavaScript","Ruby","Python"],"contributors":["joao-vitor-souza","codingkush","manny-uncharted","danveb","PraaneshSelvaraj","harshraj8843"],"contentHtml":"<h2>Write a program to find second smallest number in an array</h2>\n<pre><code>Input  : [1, 2, 3, 4, 5]\nOutput : 2\n</code></pre>\n<hr>\n<pre><code>#include &#x3C;stdio.h>\n#include &#x3C;string.h>\n \nmain()\n{\n    int smallest, secondsmallest;\n    int array[100], size, i;\n    printf(\"\\n How many elements do you want to enter: \");\n    scanf(\"%d\", &#x26;size);\n    printf(\"\\nEnter %d elements: \", size);\n    for (i = 0 ; i &#x3C; size; i++)\n        scanf(\"%d\", &#x26;array[i]);\n    if (array[0] &#x3C; array[1]) {\n        smallest = array[0];\n        secondsmallest = array[1];\n    }\n    else {\n      smallest = array[1];\n      secondsmallest = array[0];\n    }\n    for (i = 2; i &#x3C; size; i++) {\n        if (array[i] &#x3C; smallest) {\n        secondsmallest = smallest;\n        smallest = array[i];\n        }\n        else if (array[i] &#x3C; secondsmallest) {\n            secondsmallest = array[i];\n        }\n    }\n    printf(\" \\nSecond smallest element is %d\", secondsmallest);\n}\n</code></pre>\n<pre><code>/* C++ program to find second number number in array */\n#include &#x3C;iostream>\nusing namespace std;\nint main()\n{\n    int size;\n    cout&#x3C;&#x3C;\"Enter the size of array: \";\n    cin>>size;\n    int array[size];                            // array declaration\n\n    for(int i=0;i&#x3C;size;i++)\n        cin>>array[i];                          // input array values\n\n    int smallest=2147483647;                    // maximum integer values\n    int secondsmall=2147483647;\n\n    for(int i=0;i&#x3C;size;i++){                    // logic for smallest and second smallest value\n        if(smallest>array[i]){\n            secondsmall=smallest;\n            smallest=array[i];\n        }\n        if(secondsmall>array[i]&#x26;&#x26; array[i]>smallest)\n            secondsmall=array[i];\n    }\n\n    cout&#x3C;&#x3C;\"The second smallest number present in given array is \"&#x3C;&#x3C;secondsmall;\n    return 0;\n}\n</code></pre>\n<pre><code>/* Problem: Write a JavaScript program to find second smallest number in an array \n\nnums = [1, 2, 3, 4, 5]\noutput = 2\n\nnums = [55, 3, 1, -4, 109, 7]\noutput = 1\n\nBrute Force\n- use array sort method that returns an array in increasing order\n- return the element at the 1st index (second smallest) \n\nPseudocode\n- edge case: if input array is empty we return 0\n- manually sort input array in ascending order\n- return element at 1st index\n\nTime: O(n log n) for manually sorting the input array\nSpace: O(1) no extra memory needed \n\n===\n\nBetter Approach \n- perform 2 loops over input array where we check for the first smallest and second smallest numbers\n- key is to initialize the smallest numbers as Infinity so any number we get from array will become smaller than Infinity\n\nPseudocode\n- edge case: if input array is empty we return 0\n- initialize firstSmallest as Infinity \n- initialize secondSmallest as Infinity\n- iterate over input array once \n- check: if current element is smaller than firstSmallest ? \n-- set firstSmallest as current element\n- iterate over input array again \n- check: if current element is smaller than secondSmallest &#x26;&#x26; current element is greater than firstSmallest ? \n-- set secondSmallest as current element \n- return secondSmallest \n\nTime: O(n) we iterate over input array twice at O(2n) -> O(n)\nSpace: O(1) no extra memory needed \n\n*/ \n\n// function findSecondSmallestNumberInAnArray(nums) {\n//     // edge case: if input array is empty we return 0\n//     if(nums.length === 0) return 0; \n//     nums.sort((a, b) => a - b); \n//     return nums[1]; \n// };\n\nfunction findSecondSmallestNumberInAnArray(nums) {\n    if(nums.length === 0) return 0; \n    let firstSmallest = Infinity; \n    let secondSmallest = Infinity; \n    for(let i = 0; i &#x3C; nums.length; i++) {\n        if(nums[i] &#x3C; firstSmallest) {\n            firstSmallest = nums[i]; \n        }; \n    }; \n    for(let i = 0; i &#x3C; nums.length; i++) {\n        if(nums[i] &#x3C; secondSmallest &#x26;&#x26; nums[i] > firstSmallest) {\n            secondSmallest = nums[i]; \n        }; \n    };\n    return secondSmallest;\n};\n\nconsole.log(findSecondSmallestNumberInAnArray([1,2,3,4,5]));\n</code></pre>\n<pre><code>def second_smallest_element(arr)\n    arr = arr.sort\n    return arr[1]\nend\n\narr = [5,3,1,4,2]\nprint second_smallest_element(arr)\n</code></pre>\n<pre><code>def find_len(n):\n    l = [input(f\"Element {i + 1}: \") for i in range(n)]\n    l.sort()\n    print(\"\\nSecond smallest element is:\", l[1])\n\n\nsize_list = int(input(\"What's the size of the list: \"))\nfind_len(size_list)\n</code></pre>\n","markdown":"\n## Write a program to find second smallest number in an array\n\n```\nInput  : [1, 2, 3, 4, 5]\nOutput : 2\n```\n\n---\n\n<CodeBlock slug=\"find-second-smallest-number-in-an-array\" >\n\n```c\n#include <stdio.h>\n#include <string.h>\n \nmain()\n{\n    int smallest, secondsmallest;\n    int array[100], size, i;\n    printf(\"\\n How many elements do you want to enter: \");\n    scanf(\"%d\", &size);\n    printf(\"\\nEnter %d elements: \", size);\n    for (i = 0 ; i < size; i++)\n        scanf(\"%d\", &array[i]);\n    if (array[0] < array[1]) {\n        smallest = array[0];\n        secondsmallest = array[1];\n    }\n    else {\n      smallest = array[1];\n      secondsmallest = array[0];\n    }\n    for (i = 2; i < size; i++) {\n        if (array[i] < smallest) {\n        secondsmallest = smallest;\n        smallest = array[i];\n        }\n        else if (array[i] < secondsmallest) {\n            secondsmallest = array[i];\n        }\n    }\n    printf(\" \\nSecond smallest element is %d\", secondsmallest);\n}\n```\n\n```cpp\n/* C++ program to find second number number in array */\n#include <iostream>\nusing namespace std;\nint main()\n{\n    int size;\n    cout<<\"Enter the size of array: \";\n    cin>>size;\n    int array[size];                            // array declaration\n\n    for(int i=0;i<size;i++)\n        cin>>array[i];                          // input array values\n\n    int smallest=2147483647;                    // maximum integer values\n    int secondsmall=2147483647;\n\n    for(int i=0;i<size;i++){                    // logic for smallest and second smallest value\n        if(smallest>array[i]){\n            secondsmall=smallest;\n            smallest=array[i];\n        }\n        if(secondsmall>array[i]&& array[i]>smallest)\n            secondsmall=array[i];\n    }\n\n    cout<<\"The second smallest number present in given array is \"<<secondsmall;\n    return 0;\n}\n```\n\n```js\n/* Problem: Write a JavaScript program to find second smallest number in an array \n\nnums = [1, 2, 3, 4, 5]\noutput = 2\n\nnums = [55, 3, 1, -4, 109, 7]\noutput = 1\n\nBrute Force\n- use array sort method that returns an array in increasing order\n- return the element at the 1st index (second smallest) \n\nPseudocode\n- edge case: if input array is empty we return 0\n- manually sort input array in ascending order\n- return element at 1st index\n\nTime: O(n log n) for manually sorting the input array\nSpace: O(1) no extra memory needed \n\n===\n\nBetter Approach \n- perform 2 loops over input array where we check for the first smallest and second smallest numbers\n- key is to initialize the smallest numbers as Infinity so any number we get from array will become smaller than Infinity\n\nPseudocode\n- edge case: if input array is empty we return 0\n- initialize firstSmallest as Infinity \n- initialize secondSmallest as Infinity\n- iterate over input array once \n- check: if current element is smaller than firstSmallest ? \n-- set firstSmallest as current element\n- iterate over input array again \n- check: if current element is smaller than secondSmallest && current element is greater than firstSmallest ? \n-- set secondSmallest as current element \n- return secondSmallest \n\nTime: O(n) we iterate over input array twice at O(2n) -> O(n)\nSpace: O(1) no extra memory needed \n\n*/ \n\n// function findSecondSmallestNumberInAnArray(nums) {\n//     // edge case: if input array is empty we return 0\n//     if(nums.length === 0) return 0; \n//     nums.sort((a, b) => a - b); \n//     return nums[1]; \n// };\n\nfunction findSecondSmallestNumberInAnArray(nums) {\n    if(nums.length === 0) return 0; \n    let firstSmallest = Infinity; \n    let secondSmallest = Infinity; \n    for(let i = 0; i < nums.length; i++) {\n        if(nums[i] < firstSmallest) {\n            firstSmallest = nums[i]; \n        }; \n    }; \n    for(let i = 0; i < nums.length; i++) {\n        if(nums[i] < secondSmallest && nums[i] > firstSmallest) {\n            secondSmallest = nums[i]; \n        }; \n    };\n    return secondSmallest;\n};\n\nconsole.log(findSecondSmallestNumberInAnArray([1,2,3,4,5]));\n```\n\n```rb\ndef second_smallest_element(arr)\n    arr = arr.sort\n    return arr[1]\nend\n\narr = [5,3,1,4,2]\nprint second_smallest_element(arr)\n```\n\n```py\ndef find_len(n):\n    l = [input(f\"Element {i + 1}: \") for i in range(n)]\n    l.sort()\n    print(\"\\nSecond smallest element is:\", l[1])\n\n\nsize_list = int(input(\"What's the size of the list: \"))\nfind_len(size_list)\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2022-12-02T06:03:31Z"}