{"slug":"find-the-maximum-sum-of-a-contiguous-subarray","title":"Find the maximum sum of a contiguous subarray","trackId":4166,"tags":["Java","JavaScript","Python"],"contributors":["manishankardurai","joao-vitor-souza","Dhana-s","BiscuitCandy","harshraj8843"],"contentHtml":"<h2>Write a program to find the maximum sum of a contiguous subarray</h2>\n<p>Maximum subarray problem is the task of finding the contiguous subarray within a one-dimensional array of numbers which has the largest sum. For example, for the sequence of values <code>−2, 1, −3, 4, −1, 2, 1, −5, 4;</code> the contiguous subarray with the largest sum is <code>4, −1, 2, 1,</code> with sum <code>6</code>.</p>\n<pre><code>Input  : [-2, -3, 4, -1, -2, 1, 5, -3]\nOutput : 7\n</code></pre>\n<hr>\n<pre><code>public class FindTheMaximumSumOfAContiguousSubarray {\n    public static void main(String[] args) {\n        int[] numberArray = {-2, -3, 4, -1, -2, 1, 5, -3};\n        System.out.println(\"Maximum contiguous sum is \"\n          + maxSubArraySum(numberArray));\n      }\n    \n      static int maxSubArraySum(int numberArray[]) {\n        int size = numberArray.length;\n        int maximum_so_far = Integer.MIN_VALUE, maximum_ending_here = 0;\n    \n        for (int i = 0; i &#x3C; size; i++) {\n          maximum_ending_here = maximum_ending_here + numberArray[i];\n          if (maximum_so_far &#x3C; maximum_ending_here)\n            maximum_so_far = maximum_ending_here;\n          if (maximum_ending_here &#x3C; 0)\n            maximum_ending_here = 0;\n        }\n        return maximum_so_far;\n      }\n    \n}\n</code></pre>\n<pre><code>function findContigousSubArray(arr) {\n    var min = 0; max = 0;\n    for (var i = 0; i &#x3C; arr.length; i++) {\n        min = Math.max(min + arr[i], arr[i])\n        max = Math.max(max, min)\n    }\n    return max;\n}\n\nconsole.log(findContigousSubArray([-2, -3, 4, -1, -2, 1, 5, -3]))\n</code></pre>\n<pre><code>arr = list(map(int, input().split()))\n\nsm = 0\nmx = 0\n\nfor i in range(len(arr)):\n    sm = max(sm + arr[i], arr[i])\n    mx = max(mx, sm)\n\nprint(mx)\n</code></pre>\n","markdown":"\n## Write a program to find the maximum sum of a contiguous subarray\n\nMaximum subarray problem is the task of finding the contiguous subarray within a one-dimensional array of numbers which has the largest sum. For example, for the sequence of values `−2, 1, −3, 4, −1, 2, 1, −5, 4;` the contiguous subarray with the largest sum is `4, −1, 2, 1,` with sum `6`.\n\n```\nInput  : [-2, -3, 4, -1, -2, 1, 5, -3]\nOutput : 7\n```\n\n---\n\n<CodeBlock slug=\"find-the-maximum-sum-of-a-contiguous-subarray\" >\n\n```java\npublic class FindTheMaximumSumOfAContiguousSubarray {\n    public static void main(String[] args) {\n        int[] numberArray = {-2, -3, 4, -1, -2, 1, 5, -3};\n        System.out.println(\"Maximum contiguous sum is \"\n          + maxSubArraySum(numberArray));\n      }\n    \n      static int maxSubArraySum(int numberArray[]) {\n        int size = numberArray.length;\n        int maximum_so_far = Integer.MIN_VALUE, maximum_ending_here = 0;\n    \n        for (int i = 0; i < size; i++) {\n          maximum_ending_here = maximum_ending_here + numberArray[i];\n          if (maximum_so_far < maximum_ending_here)\n            maximum_so_far = maximum_ending_here;\n          if (maximum_ending_here < 0)\n            maximum_ending_here = 0;\n        }\n        return maximum_so_far;\n      }\n    \n}\n```\n\n```js\nfunction findContigousSubArray(arr) {\n    var min = 0; max = 0;\n    for (var i = 0; i < arr.length; i++) {\n        min = Math.max(min + arr[i], arr[i])\n        max = Math.max(max, min)\n    }\n    return max;\n}\n\nconsole.log(findContigousSubArray([-2, -3, 4, -1, -2, 1, 5, -3]))\n```\n\n```py\narr = list(map(int, input().split()))\n\nsm = 0\nmx = 0\n\nfor i in range(len(arr)):\n    sm = max(sm + arr[i], arr[i])\n    mx = max(mx, sm)\n\nprint(mx)\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2022-12-07T15:14:08Z"}