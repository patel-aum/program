{"slug":"print-number-to-words","title":"Print number to words","trackId":2613,"tags":["C","C++","JavaScript","Python"],"contributors":["joao-vitor-souza","harshraj8843","PravunathSingh","manyadua16"],"contentHtml":"<h2>Write a program to print number to words</h2>\n<pre><code>Input  : 123456789\r\nOutput : One Hundred Twenty Three Million Four Hundred Fifty Six Thousand Seven Hundred Eighty Nine\n</code></pre>\n<hr>\n<pre><code>#include&#x3C;stdlib.h>\n#include&#x3C;stdio.h>\nint main() {\n long num, div, n1;\n int flag, digit, pos, tot_dig;\n \n printf(\"\\nEnter a number: \");\n scanf(\"%ld\", &#x26;num);\n \n if(num == 0) {\n printf(\"Zeron\\n\");\n exit(0);\n }\n \n if(num > 99999) {\n printf(\"please enter a number between 0 and 100000\\n\\n\");\n exit(0);\n }\n \n tot_dig = 0;\n div = 1;\n n1 = num;\n \n while ( n1 > 9 ) {\n n1 = n1 / 10;\n div = div * 10;\n \n tot_dig++;\n }\n \n \n tot_dig++;\n pos = tot_dig;\n \n while ( num != 0 ) {\n digit = num / div;\n num = num % div;\n div = div / 10;\n switch(pos) {\n case 2:\n case 5: \n if ( digit == 1 )\n flag = 1;\n else {\n flag = 0;\n switch(digit) {\n case 2: printf(\"twenty \");break;\n case 3: printf(\"thirty \");break;\n case 4: printf(\"forty \");break;\n case 5: printf(\"fifty \");break;\n case 6: printf(\"sixty \");break;\n case 7: printf(\"seventy \");break;\n case 8: printf(\"eighty \");break;\n case 9: printf(\"ninty \");\n }\n }\n break;\n case 1:\n case 4:\n if (flag == 1) {\n flag = 0;\n switch(digit) {\n case 0 : printf(\"ten \");break;\n case 1 : printf(\"eleven \");break;\n case 2 : printf(\"twelve \");break;\n case 3 : printf(\"thirteen \");break;\n case 4 : printf(\"fourteen \");break;\n case 5 : printf(\"fifteen \");break;\n case 6 : printf(\"sixteen \");break;\n case 7 : printf(\"seventeen \");break;\n case 8 : printf(\"eighteen \");break;\n case 9 : printf(\"nineteen \");\n }\n } else {\n switch(digit) {\n case 1 : printf(\"one \");break;\n case 2 : printf(\"two \");break;\n case 3 : printf(\"three \");break;\n case 4 : printf(\"four \");break;\n case 5 : printf(\"five \");break;\n case 6 : printf(\"six \");break;\n case 7 : printf(\"seven \");break;\n case 8 : printf(\"eight \");break;\n case 9 : printf(\"nine \");\n }\n }\n \n if (pos == 4) \n printf(\"thousand \");\n break;\n \n case 3:\n if (digit > 0) {\n switch(digit) {\n case 1 : printf(\"one \");break;\n case 2 : printf(\"two \");break;\n case 3 : printf(\"three \");break;\n case 4 : printf(\"four \");break;\n case 5 : printf(\"five \");break;\n case 6 : printf(\"six \");break;\n case 7 : printf(\"seven \");break;\n case 8 : printf(\"eight \");break;\n case 9 : printf(\"nine \");\n }\n printf(\"hundred \");\n }\n break;\n }\n pos--;\n }\n if (pos == 4 &#x26;&#x26; flag == 0)\n printf(\"thousand\");\n else if (pos == 4 &#x26;&#x26; flag == 1)\n printf(\"ten thousand\");\n \n if (pos == 1 &#x26;&#x26; flag == 1)\n printf(\"ten \");\n  return 0;\n}\n</code></pre>\n<pre><code>#include &#x3C;iostream>\n#include &#x3C;string>\n#include &#x3C;vector>\nusing namespace std;\n\n    string digitName(int digit);\n    string teenName(int number);\n    string tensName(int number);\n    string intName(int number);\n\n    vector&#x3C;string> ones {\"\",\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    vector&#x3C;string> teens {\"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\",\"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"};\n    vector&#x3C;string> tens {\"\", \"\", \"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"};\n\n    string nameForNumber (long number) {\n        if (number &#x3C; 10) {\n            return ones[number];\n        } else if (number &#x3C; 20) {\n            return teens [number - 10];\n        } else if (number &#x3C; 100) {\n            return tens[number / 10] + ((number % 10 != 0) ? \" \" + nameForNumber(number % 10) : \"\");\n        } else if (number &#x3C; 1000) {\n            return nameForNumber(number / 100) + \" hundred\" + ((number % 100 != 0) ? \" \" + nameForNumber(number % 100) : \"\");\n        } else if (number &#x3C; 1000000) {\n            return nameForNumber(number / 1000) + \" thousand\" + ((number % 1000 != 0) ? \" \" + nameForNumber(number % 1000) : \"\");\n        } else if (number &#x3C; 1000000000) {\n            return nameForNumber(number / 1000000) + \" million\" + ((number % 1000000 != 0) ? \" \" + nameForNumber(number % 1000000) : \"\");\n        } else if (number &#x3C; 1000000000000) {\n            return nameForNumber(number / 1000000000) + \" billion\" + ((number % 1000000000 != 0) ? \" \" + nameForNumber(number % 1000000000) : \"\");\n        }\n        return \"error\";\n    }\n\n    int main()\n    {\n        long input;\n        do\n        {\n            cout &#x3C;&#x3C; \"Please enter a positive integer: \";    \n            cin >> input;\n            cout &#x3C;&#x3C; \"\\n\" &#x3C;&#x3C; nameForNumber(input) &#x3C;&#x3C; endl;\n            cout &#x3C;&#x3C; \"\\n\\n\" &#x3C;&#x3C; endl;\n            break;\n        }while (input > 0);\n        return 0;\n    }\n</code></pre>\n<pre><code>function numberToEnglish(n) {\n  var string = n.toString(),\n    units,\n    tens,\n    scales,\n    start,\n    end,\n    chunks,\n    chunksLen,\n    chunk,\n    ints,\n    i,\n    word,\n    words,\n    and = 'and';\n\n  /* Remove spaces and commas */\n  string = string.replace(/[, ]/g, '');\n\n  /* Is number zero? */\n  if (parseInt(string) === 0) {\n    return 'zero';\n  }\n\n  /* Array of units as words */\n  units = [\n    '',\n    'one',\n    'two',\n    'three',\n    'four',\n    'five',\n    'six',\n    'seven',\n    'eight',\n    'nine',\n    'ten',\n    'eleven',\n    'twelve',\n    'thirteen',\n    'fourteen',\n    'fifteen',\n    'sixteen',\n    'seventeen',\n    'eighteen',\n    'nineteen',\n  ];\n\n  /* Array of tens as words */\n  tens = [\n    '',\n    '',\n    'twenty',\n    'thirty',\n    'forty',\n    'fifty',\n    'sixty',\n    'seventy',\n    'eighty',\n    'ninety',\n  ];\n\n  /* Array of scales as words */\n  scales = [\n    '',\n    'thousand',\n    'million',\n    'billion',\n    'trillion',\n    'quadrillion',\n    'quintillion',\n    'sextillion',\n    'septillion',\n    'octillion',\n    'nonillion',\n    'decillion',\n    'undecillion',\n    'duodecillion',\n    'tredecillion',\n    'quatttuor-decillion',\n    'quindecillion',\n    'sexdecillion',\n    'septen-decillion',\n    'octodecillion',\n    'novemdecillion',\n    'vigintillion',\n    'centillion',\n  ];\n\n  /* Split user argument into 3 digit chunks from right to left */\n  start = string.length;\n  chunks = [];\n  while (start > 0) {\n    end = start;\n    chunks.push(string.slice((start = Math.max(0, start - 3)), end));\n  }\n\n  /* Check if function has enough scale words to be able to stringify the user argument */\n  chunksLen = chunks.length;\n  if (chunksLen > scales.length) {\n    return '';\n  }\n\n  /* Stringify each integer in each chunk */\n  words = [];\n  for (i = 0; i &#x3C; chunksLen; i++) {\n    chunk = parseInt(chunks[i]);\n\n    if (chunk) {\n      /* Split chunk into array of individual integers */\n      ints = chunks[i].split('').reverse().map(parseFloat);\n\n      /* If tens integer is 1, i.e. 10, then add 10 to units integer */\n      if (ints[1] === 1) {\n        ints[0] += 10;\n      }\n\n      /* Add scale word if chunk is not zero and array item exists */\n      if ((word = scales[i])) {\n        words.push(word);\n      }\n\n      /* Add unit word if array item exists */\n      if ((word = units[ints[0]])) {\n        words.push(word);\n      }\n\n      /* Add tens word if array item exists */\n      if ((word = tens[ints[1]])) {\n        words.push(word);\n      }\n\n      /* Add 'and' string after units or tens integer if: */\n      if (ints[0] || ints[1]) {\n        /* Chunk has a hundreds integer or chunk is the first of multiple chunks */\n        if (ints[2] || (!i &#x26;&#x26; chunksLen)) {\n          words.push(and);\n        }\n      }\n\n      /* Add hundreds word if array item exists */\n      if ((word = units[ints[2]])) {\n        words.push(word + ' hundred');\n      }\n    }\n  }\n\n  return words.reverse().join(' ');\n}\n\n// - - - - - Tests - - - - - -\nfunction test(v) {\n  var sep = 'string' == typeof v ? '\"' : '';\n  console.log(numberToEnglish(v));\n}\n\ntest(123456789);\n</code></pre>\n<pre><code>import inflect\n\nprint(inflect.engine().number_to_words(int(input())).title())\n</code></pre>\n","markdown":"\n## Write a program to print number to words\n\n```\r\nInput  : 123456789\r\nOutput : One Hundred Twenty Three Million Four Hundred Fifty Six Thousand Seven Hundred Eighty Nine\r\n```\n\n---\n\n<CodeBlock slug=\"print-number-to-words\" >\n\n```c\n#include<stdlib.h>\n#include<stdio.h>\nint main() {\n long num, div, n1;\n int flag, digit, pos, tot_dig;\n \n printf(\"\\nEnter a number: \");\n scanf(\"%ld\", &num);\n \n if(num == 0) {\n printf(\"Zeron\\n\");\n exit(0);\n }\n \n if(num > 99999) {\n printf(\"please enter a number between 0 and 100000\\n\\n\");\n exit(0);\n }\n \n tot_dig = 0;\n div = 1;\n n1 = num;\n \n while ( n1 > 9 ) {\n n1 = n1 / 10;\n div = div * 10;\n \n tot_dig++;\n }\n \n \n tot_dig++;\n pos = tot_dig;\n \n while ( num != 0 ) {\n digit = num / div;\n num = num % div;\n div = div / 10;\n switch(pos) {\n case 2:\n case 5: \n if ( digit == 1 )\n flag = 1;\n else {\n flag = 0;\n switch(digit) {\n case 2: printf(\"twenty \");break;\n case 3: printf(\"thirty \");break;\n case 4: printf(\"forty \");break;\n case 5: printf(\"fifty \");break;\n case 6: printf(\"sixty \");break;\n case 7: printf(\"seventy \");break;\n case 8: printf(\"eighty \");break;\n case 9: printf(\"ninty \");\n }\n }\n break;\n case 1:\n case 4:\n if (flag == 1) {\n flag = 0;\n switch(digit) {\n case 0 : printf(\"ten \");break;\n case 1 : printf(\"eleven \");break;\n case 2 : printf(\"twelve \");break;\n case 3 : printf(\"thirteen \");break;\n case 4 : printf(\"fourteen \");break;\n case 5 : printf(\"fifteen \");break;\n case 6 : printf(\"sixteen \");break;\n case 7 : printf(\"seventeen \");break;\n case 8 : printf(\"eighteen \");break;\n case 9 : printf(\"nineteen \");\n }\n } else {\n switch(digit) {\n case 1 : printf(\"one \");break;\n case 2 : printf(\"two \");break;\n case 3 : printf(\"three \");break;\n case 4 : printf(\"four \");break;\n case 5 : printf(\"five \");break;\n case 6 : printf(\"six \");break;\n case 7 : printf(\"seven \");break;\n case 8 : printf(\"eight \");break;\n case 9 : printf(\"nine \");\n }\n }\n \n if (pos == 4) \n printf(\"thousand \");\n break;\n \n case 3:\n if (digit > 0) {\n switch(digit) {\n case 1 : printf(\"one \");break;\n case 2 : printf(\"two \");break;\n case 3 : printf(\"three \");break;\n case 4 : printf(\"four \");break;\n case 5 : printf(\"five \");break;\n case 6 : printf(\"six \");break;\n case 7 : printf(\"seven \");break;\n case 8 : printf(\"eight \");break;\n case 9 : printf(\"nine \");\n }\n printf(\"hundred \");\n }\n break;\n }\n pos--;\n }\n if (pos == 4 && flag == 0)\n printf(\"thousand\");\n else if (pos == 4 && flag == 1)\n printf(\"ten thousand\");\n \n if (pos == 1 && flag == 1)\n printf(\"ten \");\n  return 0;\n}\n```\n\n```cpp\n#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\n\n    string digitName(int digit);\n    string teenName(int number);\n    string tensName(int number);\n    string intName(int number);\n\n    vector<string> ones {\"\",\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n    vector<string> teens {\"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\",\"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"};\n    vector<string> tens {\"\", \"\", \"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"};\n\n    string nameForNumber (long number) {\n        if (number < 10) {\n            return ones[number];\n        } else if (number < 20) {\n            return teens [number - 10];\n        } else if (number < 100) {\n            return tens[number / 10] + ((number % 10 != 0) ? \" \" + nameForNumber(number % 10) : \"\");\n        } else if (number < 1000) {\n            return nameForNumber(number / 100) + \" hundred\" + ((number % 100 != 0) ? \" \" + nameForNumber(number % 100) : \"\");\n        } else if (number < 1000000) {\n            return nameForNumber(number / 1000) + \" thousand\" + ((number % 1000 != 0) ? \" \" + nameForNumber(number % 1000) : \"\");\n        } else if (number < 1000000000) {\n            return nameForNumber(number / 1000000) + \" million\" + ((number % 1000000 != 0) ? \" \" + nameForNumber(number % 1000000) : \"\");\n        } else if (number < 1000000000000) {\n            return nameForNumber(number / 1000000000) + \" billion\" + ((number % 1000000000 != 0) ? \" \" + nameForNumber(number % 1000000000) : \"\");\n        }\n        return \"error\";\n    }\n\n    int main()\n    {\n        long input;\n        do\n        {\n            cout << \"Please enter a positive integer: \";    \n            cin >> input;\n            cout << \"\\n\" << nameForNumber(input) << endl;\n            cout << \"\\n\\n\" << endl;\n            break;\n        }while (input > 0);\n        return 0;\n    }\n```\n\n```js\nfunction numberToEnglish(n) {\n  var string = n.toString(),\n    units,\n    tens,\n    scales,\n    start,\n    end,\n    chunks,\n    chunksLen,\n    chunk,\n    ints,\n    i,\n    word,\n    words,\n    and = 'and';\n\n  /* Remove spaces and commas */\n  string = string.replace(/[, ]/g, '');\n\n  /* Is number zero? */\n  if (parseInt(string) === 0) {\n    return 'zero';\n  }\n\n  /* Array of units as words */\n  units = [\n    '',\n    'one',\n    'two',\n    'three',\n    'four',\n    'five',\n    'six',\n    'seven',\n    'eight',\n    'nine',\n    'ten',\n    'eleven',\n    'twelve',\n    'thirteen',\n    'fourteen',\n    'fifteen',\n    'sixteen',\n    'seventeen',\n    'eighteen',\n    'nineteen',\n  ];\n\n  /* Array of tens as words */\n  tens = [\n    '',\n    '',\n    'twenty',\n    'thirty',\n    'forty',\n    'fifty',\n    'sixty',\n    'seventy',\n    'eighty',\n    'ninety',\n  ];\n\n  /* Array of scales as words */\n  scales = [\n    '',\n    'thousand',\n    'million',\n    'billion',\n    'trillion',\n    'quadrillion',\n    'quintillion',\n    'sextillion',\n    'septillion',\n    'octillion',\n    'nonillion',\n    'decillion',\n    'undecillion',\n    'duodecillion',\n    'tredecillion',\n    'quatttuor-decillion',\n    'quindecillion',\n    'sexdecillion',\n    'septen-decillion',\n    'octodecillion',\n    'novemdecillion',\n    'vigintillion',\n    'centillion',\n  ];\n\n  /* Split user argument into 3 digit chunks from right to left */\n  start = string.length;\n  chunks = [];\n  while (start > 0) {\n    end = start;\n    chunks.push(string.slice((start = Math.max(0, start - 3)), end));\n  }\n\n  /* Check if function has enough scale words to be able to stringify the user argument */\n  chunksLen = chunks.length;\n  if (chunksLen > scales.length) {\n    return '';\n  }\n\n  /* Stringify each integer in each chunk */\n  words = [];\n  for (i = 0; i < chunksLen; i++) {\n    chunk = parseInt(chunks[i]);\n\n    if (chunk) {\n      /* Split chunk into array of individual integers */\n      ints = chunks[i].split('').reverse().map(parseFloat);\n\n      /* If tens integer is 1, i.e. 10, then add 10 to units integer */\n      if (ints[1] === 1) {\n        ints[0] += 10;\n      }\n\n      /* Add scale word if chunk is not zero and array item exists */\n      if ((word = scales[i])) {\n        words.push(word);\n      }\n\n      /* Add unit word if array item exists */\n      if ((word = units[ints[0]])) {\n        words.push(word);\n      }\n\n      /* Add tens word if array item exists */\n      if ((word = tens[ints[1]])) {\n        words.push(word);\n      }\n\n      /* Add 'and' string after units or tens integer if: */\n      if (ints[0] || ints[1]) {\n        /* Chunk has a hundreds integer or chunk is the first of multiple chunks */\n        if (ints[2] || (!i && chunksLen)) {\n          words.push(and);\n        }\n      }\n\n      /* Add hundreds word if array item exists */\n      if ((word = units[ints[2]])) {\n        words.push(word + ' hundred');\n      }\n    }\n  }\n\n  return words.reverse().join(' ');\n}\n\n// - - - - - Tests - - - - - -\nfunction test(v) {\n  var sep = 'string' == typeof v ? '\"' : '';\n  console.log(numberToEnglish(v));\n}\n\ntest(123456789);\n```\n\n```py\nimport inflect\n\nprint(inflect.engine().number_to_words(int(input())).title())\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2022-12-02T06:03:31Z"}