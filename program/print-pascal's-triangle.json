{"slug":"print-pascal's-triangle","title":"Print Pascal's triangle","trackId":3988,"tags":["C","C++","JavaScript","TypeScript","Python","GO"],"contributors":["joao-vitor-souza","its-kundan","sureshsgith","Greeshma-frontier","s4lat","harshraj8843"],"contentHtml":"<h2>Write a program to print pascal's triangle</h2>\n<p>Pascal's triangle is a triangular array of the binomial coefficients. Write a function that takes an integer value <code>n</code> as input and prints first <code>n</code> lines of the Pascal's triangle.</p>\n<pre><code>Input  : 5\n\nOutput : \n        1\n       1 1\n      1 2 1\n     1 3 3 1\n    1 4 6 4 1\n</code></pre>\n<hr>\n<pre><code>#include&#x3C;stdio.h>\nvoid printPascal(int n)\n{\n  // An auxiliary array to store\n  // generated pascal triangle values\n  int arr[n][n];\n    \n  // Iterate through every line and \n  // print integer(s) in it\n  for (int line = 0; line &#x3C; n; line++)\n  {\n    // Every line has number of integers\n    // equal to line number\n    for (int i = 0; i &#x3C;= line; i++)\n    {\n      // First and last values in \n      // every row are 1\n      if (line == i || i == 0)\n        arr[line][i] = 1;\n        \n      // Other values are sum of values \n      // just above and left of above\n      else\n        arr[line][i] = (arr[line - 1][i - 1] + \n                        arr[line - 1][i]);\n      printf(\"%d \", \n              arr[line][i]);\n    }\n    printf(\"\\n\");\n  }\n}\n  \n// Driver code\nint main()\n{\n  int n = 5;\n  printPascal(n);\n  return 0;\n}\n</code></pre>\n<pre><code>#include&#x3C;iostream>\n#include&#x3C;iomanip>\nusing namespace std;\nlong fact(long n){\n   int i, fact = 1;\n   for(i = n; i>1; i--)\n      fact *= i;\n   return fact;//factorial of given number\n}\nlong nCr(long n, long r){\n   long nume = 1, i;\n   for(i = n; i>r; i--)\n      nume *= i;\n   return long(nume/fact(n-r));//generate result of nCr\n}\nvoid genPascalsTriangle(long n){\n   for(int i = 0; i&#x3C;n; i++){\n      for(int j = 0; j&#x3C;(n-i-1); j++)\n         cout &#x3C;&#x3C;setw(3)&#x3C;&#x3C; \" \";//printing space to show triangular form\n      for(int j = 0; j&#x3C;(i+1); j++)\n         cout &#x3C;&#x3C;setw(3)&#x3C;&#x3C; nCr(i, j) &#x3C;&#x3C;setw(3)&#x3C;&#x3C; \" \";\n      cout &#x3C;&#x3C; endl;\n   }\n}\nmain(){\n   int n;\n   cout &#x3C;&#x3C; \"Enter Number of lines: \"; cin >> n;\n   genPascalsTriangle(n);\n}\n</code></pre>\n<pre><code>function pascalTriangle(num) {\n\n    const arr = []\n    \n    for (let i = 0; i &#x3C; num; i++) {\n        const row = [1]\n        \n        for (let j = 1; j &#x3C; i; j++) {\n            row.push(arr[i-1][j-1] + arr[i-1][j])\n        }\n        \n        if( i > 0 ) row.push(1)\n        \n        arr.push(row)\n    }\n    \n    return arr\n}\n\nconsole.log(pascalTriangle(5));\n</code></pre>\n<pre><code>function pascalTriangle(num: number) {\n\n    const arr = []\n    \n    for (let i = 0; i &#x3C; num; i++) {\n        const row = [1]\n        \n        for (let j = 1; j &#x3C; i; j++) {\n            row.push(arr[i-1][j-1] + arr[i-1][j])\n        }\n        \n        if( i > 0 ) row.push(1)\n        \n        arr.push(row)\n    }\n    \n    return arr\n}\n\nconsole.log(pascalTriangle(5));\n</code></pre>\n<pre><code>n = int(input())\ntriangle = [[1], [1, 1], [1, 2, 1]]\nfor i in range(4, n + 1):\n    line = [1]\n    for j in range(i - 2):\n        line.append(triangle[i - 2][j] + triangle[i - 2][j + 1])\n    line.append(1)\n    triangle.append(line)\n\nfor line in triangle[:n]:\n    print(\"\")\n    for number in line:\n        print(number, end=\" \")\n</code></pre>\n<pre><code>package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc PrintPascalTriangle(n int) {\n\tfmt.Print(strings.Repeat(\" \", (n-1)*3))\n\tfmt.Printf(\"%6d \\n\", 1)\n\n\tprev_row := []int{1}\n\tfor i := 1; i &#x3C; n; i++ {\n\t\tnew_row := make([]int, i+1, i+1)\n\t\tnew_row[0] = 1\n\t\tnew_row[i] = 1\n\n\t\tfor j := 1; j &#x3C; i; j++ {\n\t\t\tnew_row[j] = prev_row[j-1] + prev_row[j]\n\t\t}\n\n\t\tfmt.Print(strings.Repeat(\" \", (n-i-1)*3))\n\t\tfor j := 0; j &#x3C; i+1; j++ {\n\t\t\tfmt.Printf(\"%6d \", new_row[j])\n\t\t}\n\t\tfmt.Println()\n\n\t\tprev_row = new_row\n\t}\n}\n\nfunc main() {\n\tvar input int\n\tfmt.Scan(&#x26;input)\n\tPrintPascalTriangle(input)\n}\n</code></pre>\n","markdown":"\n## Write a program to print pascal's triangle\n\nPascal's triangle is a triangular array of the binomial coefficients. Write a function that takes an integer value `n` as input and prints first `n` lines of the Pascal's triangle.\n\n```\nInput  : 5\n\nOutput : \n        1\n       1 1\n      1 2 1\n     1 3 3 1\n    1 4 6 4 1\n```\n\n---\n\n<CodeBlock slug=\"print-pascal's-triangle\" >\n\n```c\n#include<stdio.h>\nvoid printPascal(int n)\n{\n  // An auxiliary array to store\n  // generated pascal triangle values\n  int arr[n][n];\n    \n  // Iterate through every line and \n  // print integer(s) in it\n  for (int line = 0; line < n; line++)\n  {\n    // Every line has number of integers\n    // equal to line number\n    for (int i = 0; i <= line; i++)\n    {\n      // First and last values in \n      // every row are 1\n      if (line == i || i == 0)\n        arr[line][i] = 1;\n        \n      // Other values are sum of values \n      // just above and left of above\n      else\n        arr[line][i] = (arr[line - 1][i - 1] + \n                        arr[line - 1][i]);\n      printf(\"%d \", \n              arr[line][i]);\n    }\n    printf(\"\\n\");\n  }\n}\n  \n// Driver code\nint main()\n{\n  int n = 5;\n  printPascal(n);\n  return 0;\n}\n```\n\n```cpp\n#include<iostream>\n#include<iomanip>\nusing namespace std;\nlong fact(long n){\n   int i, fact = 1;\n   for(i = n; i>1; i--)\n      fact *= i;\n   return fact;//factorial of given number\n}\nlong nCr(long n, long r){\n   long nume = 1, i;\n   for(i = n; i>r; i--)\n      nume *= i;\n   return long(nume/fact(n-r));//generate result of nCr\n}\nvoid genPascalsTriangle(long n){\n   for(int i = 0; i<n; i++){\n      for(int j = 0; j<(n-i-1); j++)\n         cout <<setw(3)<< \" \";//printing space to show triangular form\n      for(int j = 0; j<(i+1); j++)\n         cout <<setw(3)<< nCr(i, j) <<setw(3)<< \" \";\n      cout << endl;\n   }\n}\nmain(){\n   int n;\n   cout << \"Enter Number of lines: \"; cin >> n;\n   genPascalsTriangle(n);\n}\n```\n\n```js\nfunction pascalTriangle(num) {\n\n    const arr = []\n    \n    for (let i = 0; i < num; i++) {\n        const row = [1]\n        \n        for (let j = 1; j < i; j++) {\n            row.push(arr[i-1][j-1] + arr[i-1][j])\n        }\n        \n        if( i > 0 ) row.push(1)\n        \n        arr.push(row)\n    }\n    \n    return arr\n}\n\nconsole.log(pascalTriangle(5));\n```\n\n```ts\nfunction pascalTriangle(num: number) {\n\n    const arr = []\n    \n    for (let i = 0; i < num; i++) {\n        const row = [1]\n        \n        for (let j = 1; j < i; j++) {\n            row.push(arr[i-1][j-1] + arr[i-1][j])\n        }\n        \n        if( i > 0 ) row.push(1)\n        \n        arr.push(row)\n    }\n    \n    return arr\n}\n\nconsole.log(pascalTriangle(5));\n```\n\n```py\nn = int(input())\ntriangle = [[1], [1, 1], [1, 2, 1]]\nfor i in range(4, n + 1):\n    line = [1]\n    for j in range(i - 2):\n        line.append(triangle[i - 2][j] + triangle[i - 2][j + 1])\n    line.append(1)\n    triangle.append(line)\n\nfor line in triangle[:n]:\n    print(\"\")\n    for number in line:\n        print(number, end=\" \")\n```\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc PrintPascalTriangle(n int) {\n\tfmt.Print(strings.Repeat(\" \", (n-1)*3))\n\tfmt.Printf(\"%6d \\n\", 1)\n\n\tprev_row := []int{1}\n\tfor i := 1; i < n; i++ {\n\t\tnew_row := make([]int, i+1, i+1)\n\t\tnew_row[0] = 1\n\t\tnew_row[i] = 1\n\n\t\tfor j := 1; j < i; j++ {\n\t\t\tnew_row[j] = prev_row[j-1] + prev_row[j]\n\t\t}\n\n\t\tfmt.Print(strings.Repeat(\" \", (n-i-1)*3))\n\t\tfor j := 0; j < i+1; j++ {\n\t\t\tfmt.Printf(\"%6d \", new_row[j])\n\t\t}\n\t\tfmt.Println()\n\n\t\tprev_row = new_row\n\t}\n}\n\nfunc main() {\n\tvar input int\n\tfmt.Scan(&input)\n\tPrintPascalTriangle(input)\n}\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2022-11-28T01:38:45Z"}