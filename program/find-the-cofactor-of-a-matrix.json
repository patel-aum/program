{"slug":"find-the-cofactor-of-a-matrix","title":"Find the cofactor of a matrix","trackId":2344,"tags":["Python","GO","R"],"contributors":["joao-vitor-souza","harshraj8843","PoweredByCaffein","alfa-m"],"contentHtml":"<h2>Write a program to find the cofactor of a matrix</h2>\n<p>The cofactor of an element aij of a square matrix A is the determinant of the minor of A obtained by deleting the ith row and jth column of A. The cofactor of a matrix A is the matrix of cofactors of A.</p>\n<pre><code>Input  :\n1 2 3\n4 5 6\n7 8 9\n\nOutput :\n[[-3, 6, -3], [6, -12, 6], [-3, 6, -3]]\n</code></pre>\n<hr>\n<pre><code>from typing import List\n\nimport numpy as np\n\n\ndef compute_cofactor_matrix(matrix: List[List[int]]) -> np.ndarray:\n    n_lines = len(matrix)\n    n_columns = len(matrix[0])\n    cofactor_matrix = np.array([])\n    if n_lines != n_columns:\n        print(\"Input a square matrix!\")\n        return\n    for line in range(n_lines):\n        for column in range(n_columns):\n            minor_matrix = []\n            for minor_line in matrix:\n                minor_line_copy = minor_line.copy()\n                minor_line_copy.pop(column)\n                minor_matrix.append(minor_line_copy)\n            minor_matrix.pop(line)\n            cofactor_matrix = np.append(\n                cofactor_matrix, (-1) ** (line + column) * np.linalg.det(minor_matrix)\n            )\n\n    return cofactor_matrix.reshape((n_lines, n_columns))\n\n\nprint(compute_cofactor_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n\n\"\"\" Output:\n[[ -3.   6.  -3.]\n [  6. -12.   6.]\n [ -3.   6.  -3.]]\n\"\"\"\n</code></pre>\n<pre><code>package main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc main() {\n\tfmt.Println(\"Co-factor of a Matrix\")\n\tfmt.Printf(\"Enter elements of the matrix, separated by space: \")\n\tvar matrix, result [3][3]int\n\tfor i := 0; i &#x3C; 3; i++ {\n\t\tfor j := 0; j &#x3C; 3; j++ {\n\t\t\tfmt.Scanf(\"%d\", &#x26;matrix[i][j])\n\t\t}\n\t}\n\n\tfmt.Println(\"Input matrix:\")\n\tprettyPrintMatrix(matrix)\n\n\tfor i := 0; i &#x3C; 3; i++ {\n\t\tfor j := 0; j &#x3C; 3; j++ {\n\t\t\tresult[i][j] = findDet(i, j, matrix)\n\t\t}\n\t}\n\n\tfmt.Println(\"Co-factor of matrix:\")\n\tprettyPrintMatrix(result)\n}\n\nfunc findDet(row, col int, matrix [3][3]int) int {\n\tvar elements []int\n\tfor i := 0; i &#x3C; 3; i++ {\n\t\tfor j := 0; j &#x3C; 3; j++ {\n\t\t\tif !(i == row || j == col) {\n\t\t\t\telements = append(elements, matrix[i][j])\n\t\t\t}\n\t\t}\n\t}\n\n\tdet := int(math.Pow(-1, float64(row+col))) * ((elements[0] * elements[3]) - (elements[1] * elements[2]))\n\n\treturn det\n}\n\nfunc prettyPrintMatrix(matrix [3][3]int) {\n\tfor i := 0; i &#x3C; 3; i++ {\n\t\tfor j := 0; j &#x3C; 3; j++ {\n\t\t\tfmt.Printf(\"%v\\t\", matrix[i][j])\n\t\t}\n\t\tfmt.Println()\n\t}\n}\n</code></pre>\n<pre><code># Clear the environment\nrm(list = ls())\n\n# Function that calculates the cofactors\ncalculate_cofactor &#x3C;- function(original_matrix, matrix_order){\n  print(\"Original matrix:\")\n  print(original_matrix)\n  \n  cofactor_matrix &#x3C;- matrix(, nrow = matrix_order, ncol = matrix_order)\n  \n  for (column in 1:matrix_order) {\n    matrix_minus_column &#x3C;- your_matrix[,-column]\n    for (row in 1:matrix_order) {\n      if (matrix_order == 2) {\n        matrix_minus_row &#x3C;- matrix_minus_column[-row]\n        cofactor_matrix[row, column] &#x3C;- ((-1)^(row + column))*matrix_minus_row\n      } else {\n        matrix_minus_row &#x3C;- matrix_minus_column[-row,]\n        cofactor_matrix[row, column] &#x3C;- ((-1)^(row + column))*det(matrix_minus_row)\n      }\n    }\n  }\n  \n  return(cofactor_matrix)\n}\n\n# Request the matrix\nmatrix_ord &#x3C;- as.integer(readline(\"What is the order of your matrix?: \"))\nmessage(cat(\"Enter the \", matrix_ord^2, \" values of your matrix:\"))\nmatrix_content &#x3C;- c(scan(nmax = (matrix_ord^2)))\nyour_matrix &#x3C;- matrix(data = matrix_content, nrow = matrix_ord, byrow = TRUE)\n\n# Shows the calculated cofactors\ncofactor &#x3C;- calculate_cofactor(your_matrix, matrix_ord)\nprint(\"Matrix of cofactors:\")\nprint(cofactor)\n</code></pre>\n","markdown":"\n## Write a program to find the cofactor of a matrix\n\nThe cofactor of an element a<sub>ij</sub> of a square matrix A is the determinant of the minor of A obtained by deleting the ith row and jth column of A. The cofactor of a matrix A is the matrix of cofactors of A.\n\n```\nInput  :\n1 2 3\n4 5 6\n7 8 9\n\nOutput :\n[[-3, 6, -3], [6, -12, 6], [-3, 6, -3]]\n```\n\n---\n\n<CodeBlock slug=\"find-the-cofactor-of-a-matrix\" >\n\n```py\nfrom typing import List\n\nimport numpy as np\n\n\ndef compute_cofactor_matrix(matrix: List[List[int]]) -> np.ndarray:\n    n_lines = len(matrix)\n    n_columns = len(matrix[0])\n    cofactor_matrix = np.array([])\n    if n_lines != n_columns:\n        print(\"Input a square matrix!\")\n        return\n    for line in range(n_lines):\n        for column in range(n_columns):\n            minor_matrix = []\n            for minor_line in matrix:\n                minor_line_copy = minor_line.copy()\n                minor_line_copy.pop(column)\n                minor_matrix.append(minor_line_copy)\n            minor_matrix.pop(line)\n            cofactor_matrix = np.append(\n                cofactor_matrix, (-1) ** (line + column) * np.linalg.det(minor_matrix)\n            )\n\n    return cofactor_matrix.reshape((n_lines, n_columns))\n\n\nprint(compute_cofactor_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))\n\n\"\"\" Output:\n[[ -3.   6.  -3.]\n [  6. -12.   6.]\n [ -3.   6.  -3.]]\n\"\"\"\n```\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc main() {\n\tfmt.Println(\"Co-factor of a Matrix\")\n\tfmt.Printf(\"Enter elements of the matrix, separated by space: \")\n\tvar matrix, result [3][3]int\n\tfor i := 0; i < 3; i++ {\n\t\tfor j := 0; j < 3; j++ {\n\t\t\tfmt.Scanf(\"%d\", &matrix[i][j])\n\t\t}\n\t}\n\n\tfmt.Println(\"Input matrix:\")\n\tprettyPrintMatrix(matrix)\n\n\tfor i := 0; i < 3; i++ {\n\t\tfor j := 0; j < 3; j++ {\n\t\t\tresult[i][j] = findDet(i, j, matrix)\n\t\t}\n\t}\n\n\tfmt.Println(\"Co-factor of matrix:\")\n\tprettyPrintMatrix(result)\n}\n\nfunc findDet(row, col int, matrix [3][3]int) int {\n\tvar elements []int\n\tfor i := 0; i < 3; i++ {\n\t\tfor j := 0; j < 3; j++ {\n\t\t\tif !(i == row || j == col) {\n\t\t\t\telements = append(elements, matrix[i][j])\n\t\t\t}\n\t\t}\n\t}\n\n\tdet := int(math.Pow(-1, float64(row+col))) * ((elements[0] * elements[3]) - (elements[1] * elements[2]))\n\n\treturn det\n}\n\nfunc prettyPrintMatrix(matrix [3][3]int) {\n\tfor i := 0; i < 3; i++ {\n\t\tfor j := 0; j < 3; j++ {\n\t\t\tfmt.Printf(\"%v\\t\", matrix[i][j])\n\t\t}\n\t\tfmt.Println()\n\t}\n}\n```\n\n```r\n# Clear the environment\nrm(list = ls())\n\n# Function that calculates the cofactors\ncalculate_cofactor <- function(original_matrix, matrix_order){\n  print(\"Original matrix:\")\n  print(original_matrix)\n  \n  cofactor_matrix <- matrix(, nrow = matrix_order, ncol = matrix_order)\n  \n  for (column in 1:matrix_order) {\n    matrix_minus_column <- your_matrix[,-column]\n    for (row in 1:matrix_order) {\n      if (matrix_order == 2) {\n        matrix_minus_row <- matrix_minus_column[-row]\n        cofactor_matrix[row, column] <- ((-1)^(row + column))*matrix_minus_row\n      } else {\n        matrix_minus_row <- matrix_minus_column[-row,]\n        cofactor_matrix[row, column] <- ((-1)^(row + column))*det(matrix_minus_row)\n      }\n    }\n  }\n  \n  return(cofactor_matrix)\n}\n\n# Request the matrix\nmatrix_ord <- as.integer(readline(\"What is the order of your matrix?: \"))\nmessage(cat(\"Enter the \", matrix_ord^2, \" values of your matrix:\"))\nmatrix_content <- c(scan(nmax = (matrix_ord^2)))\nyour_matrix <- matrix(data = matrix_content, nrow = matrix_ord, byrow = TRUE)\n\n# Shows the calculated cofactors\ncofactor <- calculate_cofactor(your_matrix, matrix_ord)\nprint(\"Matrix of cofactors:\")\nprint(cofactor)\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2022-12-02T06:03:31Z"}