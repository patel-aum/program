{"slug":"find-average-of-numbers-by-recursion","title":"Find average of numbers by recursion","trackId":4611,"tags":["C++","Java","JavaScript","Kotlin","TypeScript","Python"],"contributors":["harshraj8843","dineshlalam15","tirumalarakesh","mrajesh09","vagesh-verma","swapn652"],"contentHtml":"<h2>Write a program to find average of numbers by recursion</h2>\n<p>Average of numbers is the sum of all numbers divided by the number of numbers. For example, the average of 1, 2, 3, 4, 5 is 3. The average of 1, 2, 3, 4, 5, 6 is 3.5.</p>\n<p>Average of numbers can be calculated by recursion. The average of numbers is the sum of the first number and the average of the rest of the numbers. The average of the rest of the numbers is the sum of the second number and the average of the rest of the numbers. The average of the rest of the numbers is the sum of the third number and the average of the rest of the numbers. And so on.</p>\n<pre><code>Input  : 1 2 3 4 5\r\nOutput : 3\n</code></pre>\n<hr>\n<pre><code>#include &#x3C;iostream>\nusing namespace std;\n\ndouble FindAverageByRecursion(double arr[], int index, int num)\n{\n    if (index == num)\n    {\n        return 0;\n    }\n    double total = arr[index] + FindAverageByRecursion(arr, index + 1, num);\n    if (index == 0)\n        return total / num;\n    return total;\n}\nint main()\n{\n    int numEle;\n    cout &#x3C;&#x3C; \"Enter the number of elements :\";\n    cin >> numEle;\n\n    double arr[numEle];\n    for (int i = 0; i &#x3C; numEle; ++i)\n    {\n        cin >> arr[i];\n    }\n    cout &#x3C;&#x3C; \"Average : \" &#x3C;&#x3C; FindAverageByRecursion(arr, 0, numEle);\n    return 0;\n}\n</code></pre>\n<pre><code>import java.util.Scanner;\n\npublic class FindAverageOfDigitsOfANumberByRecursion {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int num = sc.nextInt();\n        System.out.println(findAverage(num));\n    }\n    static double findAverage(int num){\n        return helper(num,0,0);\n    }\n    static double helper(int num, int sum, int count){\n        if(num == 0){\n            return (double)sum/count;\n        } return helper(num/10, sum + num%10, count+1);\n    }\n}\n</code></pre>\n<pre><code>function avgRec(a, i, n)\n{\n    if (i == n - 1)\n        return a[i];\n    \n    if (i == 0)\n        return ((a[i] + avgRec(a, i + 1, n)) / n);\n\n    return (a[i] + avgRec(a, i + 1, n));\n}\n \nlet arr = [1, 2, 3, 4, 5];\nlet n = arr.length;\n \nconsole.log(avgRec(arr, 0, n));\n</code></pre>\n<pre><code>// a is array, i is index and n is size of array\nfun avgRec(a: IntArray, i: Int, n: Int): Double {\n    // for last element\n    if (i == n - 1) return a[i].toDouble()\n\n    // When index is 0, divide sum computed so far by n and compute sum\n    return if (i == 0) (a[i] + avgRec(a, i + 1, n)) / n else a[i] + avgRec(a, i + 1, n)\n}\n\nfun main() {\n    val arr = intArrayOf(1, 2, 3, 4, 5)\n    val avgByRecursion = (avgRec(arr, 0, arr.size));\n    println(\"Average By Recursion = $avgByRecursion\")\n}\n</code></pre>\n<pre><code>function average_of_numbers(arr: any, length: number, i: number): any {\n    if (i === length - 1) {\n      return arr[i];\n    }\n    else if (i === 0) return (arr[i] + average_of_numbers(arr, length, i + 1)) / length;\n  \n    else return arr[i] + average_of_numbers(arr, length, i + 1);\n  }\n  \n  let array = [1, 2, 3, 4, 5];\n  let i = 0;\n  console.log(average_of_numbers(array, array.length, i));\n</code></pre>\n<pre><code>def avgRec(a, i, n):\n    if i == n - 1:\n        return a[i]\n\n    if i == 0:\n        return (a[i] + avgRec(a, i + 1, n)) / n\n\n    return a[i] + avgRec(a, i + 1, n)\n\n\narr = [1, 2, 3, 4, 5]\nn = len(arr)\nprint(avgRec(arr, 0, n))\n</code></pre>\n","markdown":"\n## Write a program to find average of numbers by recursion\n\nAverage of numbers is the sum of all numbers divided by the number of numbers. For example, the average of 1, 2, 3, 4, 5 is 3. The average of 1, 2, 3, 4, 5, 6 is 3.5.\r\n\r\nAverage of numbers can be calculated by recursion. The average of numbers is the sum of the first number and the average of the rest of the numbers. The average of the rest of the numbers is the sum of the second number and the average of the rest of the numbers. The average of the rest of the numbers is the sum of the third number and the average of the rest of the numbers. And so on.\r\n\r\n```\r\nInput  : 1 2 3 4 5\r\nOutput : 3\r\n```\n\n---\n\n<CodeBlock slug=\"find-average-of-numbers-by-recursion\" >\n\n```cpp\n#include <iostream>\nusing namespace std;\n\ndouble FindAverageByRecursion(double arr[], int index, int num)\n{\n    if (index == num)\n    {\n        return 0;\n    }\n    double total = arr[index] + FindAverageByRecursion(arr, index + 1, num);\n    if (index == 0)\n        return total / num;\n    return total;\n}\nint main()\n{\n    int numEle;\n    cout << \"Enter the number of elements :\";\n    cin >> numEle;\n\n    double arr[numEle];\n    for (int i = 0; i < numEle; ++i)\n    {\n        cin >> arr[i];\n    }\n    cout << \"Average : \" << FindAverageByRecursion(arr, 0, numEle);\n    return 0;\n}\n```\n\n```java\nimport java.util.Scanner;\n\npublic class FindAverageOfDigitsOfANumberByRecursion {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int num = sc.nextInt();\n        System.out.println(findAverage(num));\n    }\n    static double findAverage(int num){\n        return helper(num,0,0);\n    }\n    static double helper(int num, int sum, int count){\n        if(num == 0){\n            return (double)sum/count;\n        } return helper(num/10, sum + num%10, count+1);\n    }\n}\n```\n\n```js\nfunction avgRec(a, i, n)\n{\n    if (i == n - 1)\n        return a[i];\n    \n    if (i == 0)\n        return ((a[i] + avgRec(a, i + 1, n)) / n);\n\n    return (a[i] + avgRec(a, i + 1, n));\n}\n \nlet arr = [1, 2, 3, 4, 5];\nlet n = arr.length;\n \nconsole.log(avgRec(arr, 0, n));\n```\n\n```kt\n// a is array, i is index and n is size of array\nfun avgRec(a: IntArray, i: Int, n: Int): Double {\n    // for last element\n    if (i == n - 1) return a[i].toDouble()\n\n    // When index is 0, divide sum computed so far by n and compute sum\n    return if (i == 0) (a[i] + avgRec(a, i + 1, n)) / n else a[i] + avgRec(a, i + 1, n)\n}\n\nfun main() {\n    val arr = intArrayOf(1, 2, 3, 4, 5)\n    val avgByRecursion = (avgRec(arr, 0, arr.size));\n    println(\"Average By Recursion = $avgByRecursion\")\n}\n```\n\n```ts\nfunction average_of_numbers(arr: any, length: number, i: number): any {\n    if (i === length - 1) {\n      return arr[i];\n    }\n    else if (i === 0) return (arr[i] + average_of_numbers(arr, length, i + 1)) / length;\n  \n    else return arr[i] + average_of_numbers(arr, length, i + 1);\n  }\n  \n  let array = [1, 2, 3, 4, 5];\n  let i = 0;\n  console.log(average_of_numbers(array, array.length, i));\n```\n\n```py\ndef avgRec(a, i, n):\n    if i == n - 1:\n        return a[i]\n\n    if i == 0:\n        return (a[i] + avgRec(a, i + 1, n)) / n\n\n    return a[i] + avgRec(a, i + 1, n)\n\n\narr = [1, 2, 3, 4, 5]\nn = len(arr)\nprint(avgRec(arr, 0, n))\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2022-12-25T13:17:11Z"}