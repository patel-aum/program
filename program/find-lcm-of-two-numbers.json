{"slug":"find-lcm-of-two-numbers","title":"Find LCM of two numbers","trackId":1208,"tags":["C","C#","Java","JavaScript","TypeScript","Python","Scala","PHP"],"contributors":["joao-vitor-souza","harshraj8843","Khushi260","Vignesh-dev07","grraghav120","djharshit","rahmat-st","nickdark","Farelion"],"contentHtml":"<h2>Write a program to find lcm of two numbers</h2>\n<p>LCM (Least Common Multiple) of two numbers is the smallest number which can be divided by both numbers. For example, the LCM of 15 and 20 is 60 and LCM of 10 and 15 is 30.</p>\n<pre><code>Input  : 12 18\r\nOutput : 36\n</code></pre>\n<hr>\n<pre><code>#include &#x3C;stdio.h>\n\nint find_gcd(int a,int b){\n    int gcd=0;\n    for(int i=1;i&#x3C;=a &#x26;&#x26; i&#x3C;=b;i++){\n        if(a%i==0 &#x26;&#x26; b%i==0) gcd=i;\n    }\n    return gcd;\n}\nint main(){\n    \n    int a,b,gcd=0;\n    scanf(\"%d %d\",&#x26;a,&#x26;b);\n    gcd=find_gcd(a,b);\n    int res=(a*b)/gcd;\n    printf(\"%d\",res);\n    return 0;\n}\n\n//Contributed by Raghav Garg\n</code></pre>\n<pre><code>using System;  \npublic class Exercise45\n{  \n    public static void Main() \n{  \n    int i, n1, n2, max, lcm=1;  \n\tConsole.Write(\"\\n\\n\");\n    Console.Write(\"Determine the LCM of two numbers:\\n\");\n    Console.Write(\"-----------------------------------\");\n    Console.Write(\"\\n\\n\");\t\n    Console.Write(\"Input 1st number for LCM: \");  \n    n1 = Convert.ToInt32(Console.ReadLine());\t\n    Console.Write(\"Input 2nd number for LCM: \");  \n    n2 = Convert.ToInt32(Console.ReadLine());\t\n    max = (n1>n2) ? n1 : n2;  \n    for(i=max;  ; i+=max)  \n    {  \n        if(i%n1==0 &#x26;&#x26; i%n2==0)  \n        {  \n            lcm = i;  \n            break;  \n        }  \n    }  \n    Console.Write(\"\\nLCM of {0} and {1} = {2}\\n\\n\", n1, n2, lcm);  \n }\n}\n</code></pre>\n<pre><code>import java.util.Scanner;\n\npublic class findlcmoftwonumbers {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        System.out.print(\"Input : \");\n        int num1 = input.nextInt();\n        int num2 = input.nextInt();\n        int min = 0 ;\n        int max = 0;\n        if (num1&#x3C;num2) {\n            min = num1;\n            max = num2;\n        }\n        else {\n            min = num2;\n            max = num1;\n        }\n        for (int i = 1; i &#x3C; max+1; i++) {\n            if ((min*i)%max==0) {\n                System.out.println(\"Output : \"+min*i);\n                break;\n            }\n\n        }\n    }\n}\n</code></pre>\n<pre><code>let FindLcmOfTwoNumbers = (n1, n2) => {\n    let lar = Math.max(n1, n2);\n    let small = Math.min(n1, n2);\n\n    let i = lar;\n\n    while(i % small !== 0){\n        i += lar;\n    }\n\n    return i;\n}\n\nconst n1 = 12;\nconst n2 = 18;\nconsole.log('Inputs  :', n1, n2);\nconsole.log('Output :', FindLcmOfTwoNumbers(n1, n2));\n</code></pre>\n<pre><code>const number1: number = 10\nconst number2: number = 12\n\nfunction findLcm(number1: number, number2: number): number {\n    let temp: number = 0\n    let val1: number = number1\n    let val2: number = number2\n\n    // Find the greatest common denominator\n    while (val2) {\n        temp = val2\n        val2 = val1 % val2\n        val1 = temp\n    }\n    const GCD: number = val1\n\n    return number1 * number2 / GCD\n}\n\nfindLcm(number1, number2)\n</code></pre>\n<pre><code>def findGCD(x, y):\n    while x != y:\n        if x > y:\n            x = x - y\n        elif x &#x3C; y:\n            y = y - x\n    return x\n\n\ndef findLCM(x, y):\n    z = x * y\n    gcd = findGCD(x, y)\n    lcm = int(z / gcd)\n    return lcm\n\n\nx = int(input(\"n1: \"))\ny = int(input(\"n2: \"))\nprint(f\"LCM of {x} and {y} : {findLCM(x,y)}\")\n</code></pre>\n<pre><code>def findLcm(number1: Int, number2: Int): Int = {\n  var temp = 0\n  var val1 = number1\n  var val2 = number2\n\n  while(val2 != 0) {\n    temp = val2\n    val2 = val1 % val2\n    val1 = temp\n  }\n  val GCM = val1\n\n  number1 * number2 / GCM\n}\n\nprint(findLcm(10, 12))\n</code></pre>\n<pre><code>&#x3C;?php\n\nfunction find_lcm_of_two_numbers($n1, $n2)\n{\n\tif ($n1 > $n2) {\n\t\t$temp = $n1;\n\t\t$n1 = $n2;\n\t\t$n2 = $temp;\n\t}\n\n\tfor ($i = 1; $i &#x3C; ($n1 + 1); $i++) {\n\t\tif ($n1 % $i == 0 &#x26;&#x26; $n2 % $i == 0)\n\t\t\t$gcd = $i;\n\t}\n\n\t$lcm = ($n1 * $n2) / $gcd;\n\treturn $lcm;\n}\n\necho find_lcm_of_two_numbers(12, 18);\n</code></pre>\n","markdown":"\n## Write a program to find lcm of two numbers\n\nLCM (Least Common Multiple) of two numbers is the smallest number which can be divided by both numbers. For example, the LCM of 15 and 20 is 60 and LCM of 10 and 15 is 30.\r\n\r\n```\r\nInput  : 12 18\r\nOutput : 36\r\n```\n\n---\n\n<CodeBlock slug=\"find-lcm-of-two-numbers\" >\n\n```c\n#include <stdio.h>\n\nint find_gcd(int a,int b){\n    int gcd=0;\n    for(int i=1;i<=a && i<=b;i++){\n        if(a%i==0 && b%i==0) gcd=i;\n    }\n    return gcd;\n}\nint main(){\n    \n    int a,b,gcd=0;\n    scanf(\"%d %d\",&a,&b);\n    gcd=find_gcd(a,b);\n    int res=(a*b)/gcd;\n    printf(\"%d\",res);\n    return 0;\n}\n\n//Contributed by Raghav Garg\n```\n\n```cs\nusing System;  \npublic class Exercise45\n{  \n    public static void Main() \n{  \n    int i, n1, n2, max, lcm=1;  \n\tConsole.Write(\"\\n\\n\");\n    Console.Write(\"Determine the LCM of two numbers:\\n\");\n    Console.Write(\"-----------------------------------\");\n    Console.Write(\"\\n\\n\");\t\n    Console.Write(\"Input 1st number for LCM: \");  \n    n1 = Convert.ToInt32(Console.ReadLine());\t\n    Console.Write(\"Input 2nd number for LCM: \");  \n    n2 = Convert.ToInt32(Console.ReadLine());\t\n    max = (n1>n2) ? n1 : n2;  \n    for(i=max;  ; i+=max)  \n    {  \n        if(i%n1==0 && i%n2==0)  \n        {  \n            lcm = i;  \n            break;  \n        }  \n    }  \n    Console.Write(\"\\nLCM of {0} and {1} = {2}\\n\\n\", n1, n2, lcm);  \n }\n}\n```\n\n```java\nimport java.util.Scanner;\n\npublic class findlcmoftwonumbers {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        System.out.print(\"Input : \");\n        int num1 = input.nextInt();\n        int num2 = input.nextInt();\n        int min = 0 ;\n        int max = 0;\n        if (num1<num2) {\n            min = num1;\n            max = num2;\n        }\n        else {\n            min = num2;\n            max = num1;\n        }\n        for (int i = 1; i < max+1; i++) {\n            if ((min*i)%max==0) {\n                System.out.println(\"Output : \"+min*i);\n                break;\n            }\n\n        }\n    }\n}\n```\n\n```js\nlet FindLcmOfTwoNumbers = (n1, n2) => {\n    let lar = Math.max(n1, n2);\n    let small = Math.min(n1, n2);\n\n    let i = lar;\n\n    while(i % small !== 0){\n        i += lar;\n    }\n\n    return i;\n}\n\nconst n1 = 12;\nconst n2 = 18;\nconsole.log('Inputs  :', n1, n2);\nconsole.log('Output :', FindLcmOfTwoNumbers(n1, n2));\n```\n\n```ts\nconst number1: number = 10\nconst number2: number = 12\n\nfunction findLcm(number1: number, number2: number): number {\n    let temp: number = 0\n    let val1: number = number1\n    let val2: number = number2\n\n    // Find the greatest common denominator\n    while (val2) {\n        temp = val2\n        val2 = val1 % val2\n        val1 = temp\n    }\n    const GCD: number = val1\n\n    return number1 * number2 / GCD\n}\n\nfindLcm(number1, number2)\n```\n\n```py\ndef findGCD(x, y):\n    while x != y:\n        if x > y:\n            x = x - y\n        elif x < y:\n            y = y - x\n    return x\n\n\ndef findLCM(x, y):\n    z = x * y\n    gcd = findGCD(x, y)\n    lcm = int(z / gcd)\n    return lcm\n\n\nx = int(input(\"n1: \"))\ny = int(input(\"n2: \"))\nprint(f\"LCM of {x} and {y} : {findLCM(x,y)}\")\n```\n\n```scala\ndef findLcm(number1: Int, number2: Int): Int = {\n  var temp = 0\n  var val1 = number1\n  var val2 = number2\n\n  while(val2 != 0) {\n    temp = val2\n    val2 = val1 % val2\n    val1 = temp\n  }\n  val GCM = val1\n\n  number1 * number2 / GCM\n}\n\nprint(findLcm(10, 12))\n```\n\n```php\n<?php\n\nfunction find_lcm_of_two_numbers($n1, $n2)\n{\n\tif ($n1 > $n2) {\n\t\t$temp = $n1;\n\t\t$n1 = $n2;\n\t\t$n2 = $temp;\n\t}\n\n\tfor ($i = 1; $i < ($n1 + 1); $i++) {\n\t\tif ($n1 % $i == 0 && $n2 % $i == 0)\n\t\t\t$gcd = $i;\n\t}\n\n\t$lcm = ($n1 * $n2) / $gcd;\n\treturn $lcm;\n}\n\necho find_lcm_of_two_numbers(12, 18);\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2022-12-02T06:03:31Z"}