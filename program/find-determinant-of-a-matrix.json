{"slug":"find-determinant-of-a-matrix","tags":["C","Ruby","Python"],"contributors":["joao-vitor-souza","harshraj8843","HeYPoonam","ahasunos"],"contentHtml":"<p>404: Not Found</p>\n<pre><code>#include&#x3C;stdio.h>\n#include&#x3C;math.h>\n#include&#x3C;stdlib.h>\n\n#define   SIZE   10\n\nint main()\n{\n\t float a[SIZE][SIZE], x[SIZE], ratio, det=1;\n\t int i,j,k,n;\n\n\t printf(\"Enter Order of Matrix: \");\n\t scanf(\"%d\", &#x26;n);\n\n\t /* 2. Reading Matrix */\n\t printf(\"\\nEnter Coefficients of Matrix: \\n\");\n\t for(i=0;i&#x3C; n;i++)\n\t {\n\t\t  for(j=0;j&#x3C; n;j++)\n\t\t  {\n\t\t\t   printf(\"a[%d][%d]=\",i,j);\n\t\t\t   scanf(\"%f\", &#x26;a[i][j]);\n\t\t  }\n\t }\n\n\t for(i=0;i&#x3C; n;i++)\n\t {\n\t\t  if(a[i][i] == 0.0)\n\t\t  {\n\t\t\t   printf(\"Mathematical Error!\");\n\t\t\t   exit(0);\n\t\t  }\n\t\t  for(j=i+1;j&#x3C; n;j++)\n\t\t  {\n\t\t\t   ratio = a[j][i]/a[i][i];\n\n\t\t\t   for(k=0;k&#x3C; n;k++)\n\t\t\t   {\n\t\t\t  \t\ta[j][k] = a[j][k] - ratio*a[i][k];\n\t\t\t   }\n\t\t  }\n\t }\n\t printf(\"\\nUpper Triangular Matrix: \\n\");\n\t for(i=0;i&#x3C; n;i++)\n\t {\n\t\t  for(j=0;j&#x3C; n;j++)\n\t\t  {\n\t\t\t   printf(\"%0.2f\\t\",a[i][j]);\n\t\t  }\n\t\t  printf(\"\\n\");\n\t }\n\n\n\t for(i=0;i&#x3C; n;i++)\n     {\n         det = det * a[i][i];\n     }\n\n\t printf(\"\\n\\nDeterminant of given matrix is: %0.3f\", det);\n\n\n\t return 0;\n}\n</code></pre>\n<pre><code># frozen_string_literal: true\n\nrequire 'matrix'\n\ndef determinant(matrix)\n  matrix.determinant\nend\n\nif $PROGRAM_NAME == __FILE__\n  print 'Dimension : '\n  dimension = gets.chomp.to_i\n  input_matrix = []\n  puts 'Input     :'\n  dimension.times do\n    input_matrix &#x3C;&#x3C; gets.chomp.split.map(&#x26;:to_i)\n  end\n  begin\n    matrix = Matrix[*input_matrix]\n    puts \"Output    :\\n#{determinant(matrix)}\"\n  rescue ExceptionForMatrix::ErrDimensionMismatch => e\n    puts \"Error     : #{e.message}\"\n  end\nend\n</code></pre>\n<pre><code>from array import ArrayType\n\nimport numpy as np\n\n\ndef create_line(i: int) -> ArrayType:\n    line_i = input(f\"Line {i}: \").split()\n    return np.array(line_i, dtype=float)\n\n\nn = int(input(\"Matrix Dimension: \"))\nmatrix = [create_line(i) for i in range(n)]\n\nprint(np.linalg.det(matrix))\n</code></pre>\n","markdown":"404: Not Found\n\n<CodeBlock slug=\"find-determinant-of-a-matrix\" >\n\n```c\n#include<stdio.h>\n#include<math.h>\n#include<stdlib.h>\n\n#define   SIZE   10\n\nint main()\n{\n\t float a[SIZE][SIZE], x[SIZE], ratio, det=1;\n\t int i,j,k,n;\n\n\t printf(\"Enter Order of Matrix: \");\n\t scanf(\"%d\", &n);\n\n\t /* 2. Reading Matrix */\n\t printf(\"\\nEnter Coefficients of Matrix: \\n\");\n\t for(i=0;i< n;i++)\n\t {\n\t\t  for(j=0;j< n;j++)\n\t\t  {\n\t\t\t   printf(\"a[%d][%d]=\",i,j);\n\t\t\t   scanf(\"%f\", &a[i][j]);\n\t\t  }\n\t }\n\n\t for(i=0;i< n;i++)\n\t {\n\t\t  if(a[i][i] == 0.0)\n\t\t  {\n\t\t\t   printf(\"Mathematical Error!\");\n\t\t\t   exit(0);\n\t\t  }\n\t\t  for(j=i+1;j< n;j++)\n\t\t  {\n\t\t\t   ratio = a[j][i]/a[i][i];\n\n\t\t\t   for(k=0;k< n;k++)\n\t\t\t   {\n\t\t\t  \t\ta[j][k] = a[j][k] - ratio*a[i][k];\n\t\t\t   }\n\t\t  }\n\t }\n\t printf(\"\\nUpper Triangular Matrix: \\n\");\n\t for(i=0;i< n;i++)\n\t {\n\t\t  for(j=0;j< n;j++)\n\t\t  {\n\t\t\t   printf(\"%0.2f\\t\",a[i][j]);\n\t\t  }\n\t\t  printf(\"\\n\");\n\t }\n\n\n\t for(i=0;i< n;i++)\n     {\n         det = det * a[i][i];\n     }\n\n\t printf(\"\\n\\nDeterminant of given matrix is: %0.3f\", det);\n\n\n\t return 0;\n}\n```\n\n```rb\n# frozen_string_literal: true\n\nrequire 'matrix'\n\ndef determinant(matrix)\n  matrix.determinant\nend\n\nif $PROGRAM_NAME == __FILE__\n  print 'Dimension : '\n  dimension = gets.chomp.to_i\n  input_matrix = []\n  puts 'Input     :'\n  dimension.times do\n    input_matrix << gets.chomp.split.map(&:to_i)\n  end\n  begin\n    matrix = Matrix[*input_matrix]\n    puts \"Output    :\\n#{determinant(matrix)}\"\n  rescue ExceptionForMatrix::ErrDimensionMismatch => e\n    puts \"Error     : #{e.message}\"\n  end\nend\n```\n\n```py\nfrom array import ArrayType\n\nimport numpy as np\n\n\ndef create_line(i: int) -> ArrayType:\n    line_i = input(f\"Line {i}: \").split()\n    return np.array(line_i, dtype=float)\n\n\nn = int(input(\"Matrix Dimension: \"))\nmatrix = [create_line(i) for i in range(n)]\n\nprint(np.linalg.det(matrix))\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2022-12-02T06:03:31Z"}