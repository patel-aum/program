{"slug":"find-lcm-of-two-numbers-by-recursion","title":"Find LCM of two numbers by recursion","trackId":405,"tags":["C","Java","JavaScript","TypeScript","Python","GO","PHP"],"contributors":["anandfresh","joao-vitor-souza","MadhuS-1605","AshishSharma1203","sahooankeeta","RShalman","anastazir","harshraj8843"],"contentHtml":"<h2>Write a program to find lcm of two numbers by recursion</h2>\n<p>LCM (Least Common Multiple) of two numbers is the smallest number that can be divided by both numbers. For example, the LCM of 15 and 20 is 60 and LCM of 10 and 15 is 30.</p>\n<pre><code>Input  : 12 18\r\nOutput : 36\n</code></pre>\n<hr>\n<pre><code>#include &#x3C;stdio.h>\n\n// function to find min element \n\nint Min(int Num1, int Num2)\n{\n\treturn Num1 >= Num2?Num2:Num1; \n\t\t\t\n}\n\n// function to find lcm of two numbers \nint LCMUtil(int Num1, int Num2, int K)\n{\n\t// If either of the two numbers is 1, return their product\n\n\tif (Num1 == 1 || Num2 == 1)\n\t\treturn Num1 * Num2;\n\n\t// If both the numbers are equal\n\tif (Num1 == Num2)\n\t\treturn Num1;\n\n\t// If K is smaller than the  minimum of the two numbers\n\t\n\tif (K &#x3C;= Min(Num1, Num2)) {\n\n\n\t\tif (Num1 % K == 0 &#x26;&#x26; Num2 % K == 0) {\n\n\t\t\t\n\t\t\treturn K * LCMUtil(\n\t\t\t\t\t\tNum1 / K, Num2 / K, 2);\n\t\t}\n\n\t\t\n\t\telse\n\t\t\treturn LCMUtil(Num1, Num2, K + 1);\n\t}\n\n\n\telse\n\t\treturn Num1 * Num2;\n}\n\n\nvoid LCM(int N, int M)\n{\n\t// Stores LCM of two number\n\tint lcm = LCMUtil(N, M, 2);\n\n\t// Print LCM\n\tprintf(\"%d\", lcm);\n}\n\n// Driver Code\nint main()\n{\n\n  int N,M; \n  scanf(\"%d\", &#x26;N);\n  scanf(\"%d\", &#x26;M); \n\n\tLCM(N, M);\n\n\treturn 0;\n}\n</code></pre>\n<pre><code>import java.util.*;\nclass FindLcmOfTwoNumbersByRecursion\n{\n  public static int gcd(int a, int b)\n    {\n        if (a == 0)\n            return b;\n        return gcd(b % a, a);\n    }\n  public static int lcm(int a, int b)\n    {\n        return (a / gcd(a, b)) * b;\n    }\n  public static void main(String[] args)\n    {\n      Scanner sc=new Scanner(System.in);\n      System.out.println(\"Enter first number\");\n      int a = sc.nextInt();\n      System.out.println(\"Enter second number\");\n      int b = sc.nextInt();\n      System.out.println(\"lcm : \"+lcm(a, b));\n    }\n}\n</code></pre>\n<pre><code>export function findLcmOfTwoNumbersByRecursion(first, second, lcm = 1) {\n    if(lcm % first === 0 &#x26;&#x26; lcm % second === 0) return lcm\n\n    return findLcmOfTwoNumbersByRecursion(first, second, ++lcm)\n}\n</code></pre>\n<pre><code>export type FirstNumber = number\nexport type SecondNumber = number\nexport type LCM = number\n\nexport function findLcmOfTwoNumbersByRecursion(first: FirstNumber, second: SecondNumber, lcm: LCM = 1): LCM {\n    if(lcm % first === 0 &#x26;&#x26; lcm % second === 0) return lcm\n\n    return findLcmOfTwoNumbersByRecursion(first, second, ++lcm)\n}\n</code></pre>\n<pre><code>num1 = 12\nnum2 = 18\n\n\ndef gcd(num1, num2):\n    if num2 == 0:\n        return num1\n    else:\n        return gcd(num2, num1 % num2)\n\n\ndef lcm(num1, num2):\n    return (num1 * num2) // gcd(num1, num2)\n\n\nprint(\"num1 : \", num1)\nprint(\"num2 : \", num2)\n\nprint(\"Output : \", lcm(num1, num2))\n</code></pre>\n<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\nvar a, b int\n\tfmt.Println(\"Enter value of a:\")\n\tfmt.Scan(&#x26;a)\n\tfmt.Println(\"Enter value of b:\")\n\tfmt.Scan(&#x26;b)\n\tfmt.Println(\"LCM of 2 values are:\", lcm(a, b))\n}\nfunc gcd(a int, b int) int {\n\tif a == 0 {\n\t\treturn b\n\t}\n\treturn gcd(b%a, a)\n}\n\nfunc lcm(a int, b int) int {\n\treturn (a / gcd(a, b)) * b\n}\n</code></pre>\n<pre><code>&#x3C;?php \n\nfunction gcd($x, $y)\n{\n    return $x === 0 ? $y : gcd($y % $x, $x);\n}\n\nfunction lcm($x, $y)\n{\n    return ($x / gcd($x, $y)) * $y;\n}\n\necho(lcm(12, 18));\n\n?>\n</code></pre>\n","markdown":"\n## Write a program to find lcm of two numbers by recursion\n\nLCM (Least Common Multiple) of two numbers is the smallest number that can be divided by both numbers. For example, the LCM of 15 and 20 is 60 and LCM of 10 and 15 is 30.\r\n\r\n```\r\nInput  : 12 18\r\nOutput : 36\r\n```\n\n---\n\n<CodeBlock slug=\"find-lcm-of-two-numbers-by-recursion\" >\n\n```c\n#include <stdio.h>\n\n// function to find min element \n\nint Min(int Num1, int Num2)\n{\n\treturn Num1 >= Num2?Num2:Num1; \n\t\t\t\n}\n\n// function to find lcm of two numbers \nint LCMUtil(int Num1, int Num2, int K)\n{\n\t// If either of the two numbers is 1, return their product\n\n\tif (Num1 == 1 || Num2 == 1)\n\t\treturn Num1 * Num2;\n\n\t// If both the numbers are equal\n\tif (Num1 == Num2)\n\t\treturn Num1;\n\n\t// If K is smaller than the  minimum of the two numbers\n\t\n\tif (K <= Min(Num1, Num2)) {\n\n\n\t\tif (Num1 % K == 0 && Num2 % K == 0) {\n\n\t\t\t\n\t\t\treturn K * LCMUtil(\n\t\t\t\t\t\tNum1 / K, Num2 / K, 2);\n\t\t}\n\n\t\t\n\t\telse\n\t\t\treturn LCMUtil(Num1, Num2, K + 1);\n\t}\n\n\n\telse\n\t\treturn Num1 * Num2;\n}\n\n\nvoid LCM(int N, int M)\n{\n\t// Stores LCM of two number\n\tint lcm = LCMUtil(N, M, 2);\n\n\t// Print LCM\n\tprintf(\"%d\", lcm);\n}\n\n// Driver Code\nint main()\n{\n\n  int N,M; \n  scanf(\"%d\", &N);\n  scanf(\"%d\", &M); \n\n\tLCM(N, M);\n\n\treturn 0;\n}\n```\n\n```java\nimport java.util.*;\nclass FindLcmOfTwoNumbersByRecursion\n{\n  public static int gcd(int a, int b)\n    {\n        if (a == 0)\n            return b;\n        return gcd(b % a, a);\n    }\n  public static int lcm(int a, int b)\n    {\n        return (a / gcd(a, b)) * b;\n    }\n  public static void main(String[] args)\n    {\n      Scanner sc=new Scanner(System.in);\n      System.out.println(\"Enter first number\");\n      int a = sc.nextInt();\n      System.out.println(\"Enter second number\");\n      int b = sc.nextInt();\n      System.out.println(\"lcm : \"+lcm(a, b));\n    }\n}\n```\n\n```js\nexport function findLcmOfTwoNumbersByRecursion(first, second, lcm = 1) {\n    if(lcm % first === 0 && lcm % second === 0) return lcm\n\n    return findLcmOfTwoNumbersByRecursion(first, second, ++lcm)\n}\n```\n\n```ts\nexport type FirstNumber = number\nexport type SecondNumber = number\nexport type LCM = number\n\nexport function findLcmOfTwoNumbersByRecursion(first: FirstNumber, second: SecondNumber, lcm: LCM = 1): LCM {\n    if(lcm % first === 0 && lcm % second === 0) return lcm\n\n    return findLcmOfTwoNumbersByRecursion(first, second, ++lcm)\n}\n```\n\n```py\nnum1 = 12\nnum2 = 18\n\n\ndef gcd(num1, num2):\n    if num2 == 0:\n        return num1\n    else:\n        return gcd(num2, num1 % num2)\n\n\ndef lcm(num1, num2):\n    return (num1 * num2) // gcd(num1, num2)\n\n\nprint(\"num1 : \", num1)\nprint(\"num2 : \", num2)\n\nprint(\"Output : \", lcm(num1, num2))\n```\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\nvar a, b int\n\tfmt.Println(\"Enter value of a:\")\n\tfmt.Scan(&a)\n\tfmt.Println(\"Enter value of b:\")\n\tfmt.Scan(&b)\n\tfmt.Println(\"LCM of 2 values are:\", lcm(a, b))\n}\nfunc gcd(a int, b int) int {\n\tif a == 0 {\n\t\treturn b\n\t}\n\treturn gcd(b%a, a)\n}\n\nfunc lcm(a int, b int) int {\n\treturn (a / gcd(a, b)) * b\n}\n```\n\n```php\n<?php \n\nfunction gcd($x, $y)\n{\n    return $x === 0 ? $y : gcd($y % $x, $x);\n}\n\nfunction lcm($x, $y)\n{\n    return ($x / gcd($x, $y)) * $y;\n}\n\necho(lcm(12, 18));\n\n?>\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2022-12-08T17:28:29Z"}