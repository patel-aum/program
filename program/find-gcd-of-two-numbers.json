{"slug":"find-gcd-of-two-numbers","title":"Find GCD of two numbers","trackId":2860,"tags":["C","C++","Java","JavaScript","Kotlin","TypeScript","Python","GO","PHP","Rust"],"contributors":["joao-vitor-souza","harshraj8843","SnehaNarendran01071998","anshu-6537","Tc2r1","horerick46","sksachin7z2","shailendrakanherkar18"],"contentHtml":"<h2>Write a program to find gcd of two numbers</h2>\n<p>GCD (Greatest Common Divisor) of two numbers is the largest number that divides both of them. A simple way to find GCD is to factorize both numbers and multiply common factors.</p>\n<pre><code>Input  : 12 18\r\nOutput : 6\n</code></pre>\n<hr>\n<pre><code>#include &#x3C;stdio.h>\n\nint find_gcd(int a,int b){\n    int gcd=0;\n    for(int i=1;i&#x3C;=a &#x26;&#x26; i&#x3C;=b;i++){\n        if(a%i==0 &#x26;&#x26; b%i==0) gcd=i;\n    }\n    return gcd;\n}\nint main(){\n    \n    int number1,number2,gcd=0;\n    printf(\"Please enter number1 : \");\n    scanf(\"%d\",&#x26;number1);\n    printf(\"Please enter number2 : \");\n    scanf(\"%d\",&#x26;number2);\n    gcd=find_gcd(number1,number2);\n    printf(\"%d\\n\",gcd);\n    return 0;\n}\n</code></pre>\n<pre><code>#include &#x3C;iostream>\nusing namespace std;\n\nint gcd(int a, int b)\n{\n    int result = min(a, b); \n    while (result > 0) {\n        if (a % result == 0 &#x26;&#x26; b % result == 0) {\n            break;\n        }\n        result--;\n    }return result;\n}\n \nint main()\n{\n    int a = 10, b = 5;\n    cout &#x3C;&#x3C; \"GCD of \" &#x3C;&#x3C; a &#x3C;&#x3C; \" and \" &#x3C;&#x3C; b &#x3C;&#x3C; \" is \"\n         &#x3C;&#x3C; gcd(a, b);\n    return 0;\n}\n</code></pre>\n<pre><code>import java.util.*;\npublic class FindGcdOfTwoNumbers\n{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        System.out.println(\"Enter two numbers :\");\n        int a=sc.nextInt();\n        int b=sc.nextInt();\n\n\t\tint result = Math.min(a, b); // Find Minimum of a nd b\n\t\twhile (result > 0) {\n\t\t\tif (a % result == 0 &#x26;&#x26; b % result == 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tresult--;\n\t\t}\n\t\tSystem.out.println(result); \n\t}\n}\n</code></pre>\n<pre><code>function gcd(a,b)\n{\n    let result = Math.min(a, b); \n    while (result > 0) {\n        if (a % result == 0 &#x26;&#x26; b % result == 0) {\n            break;\n        }\n        result--;\n    }return result; \n}\n\nlet a = 10;\nlet b = 5;\nconsole.log(\"GCD of \",a,\" and \",b,\" is \",gcd(a, b));\n</code></pre>\n<pre><code>import java.util.Scanner\n\n// contributed by Nudennie White / Tc2r1 www.github.com/tc2r1\nfun main() {\n    val scanner = Scanner(System.`in`)\n\n    print(\"Enter First Positive Whole Number: \")\n    val number1 = scanner.nextInt()\n\n    print(\"Enter Second Positive Whole Number: \")\n    val number2 = scanner.nextInt()\n\n    var gcd = gcdBySteinsAlgorithm(number1, number2)\n    println(\"Stein's Algorithm says it is: $gcd\")\n\n    gcd = gcdByEuclidsAlgorithm(number1, number2)\n    println(\"Euclid's Algorithm says it is: $gcd\")\n}\n\nfun gcdByEuclidsAlgorithm(n1: Int, n2: Int): Int {\n    return if (n2 == 0) {\n        n1\n    } else gcdByEuclidsAlgorithm(n2, n1 % n2)\n}\n\nfun gcdBySteinsAlgorithm(number1: Int, number2: Int): Int {\n    var n1 = number1\n    var n2 = number2\n    if (n1 == 0) {\n        return n2\n    }\n    if (n2 == 0) {\n        return n1\n    }\n    var n = 0\n    while (n1 or n2 and 1 == 0) {\n        n1 = n1 shr 1\n        n2 = n2 shr 1\n        n++\n    }\n    while (n1 and 1 == 0) {\n        n1 = n1 shr 1\n    }\n    do {\n        while (n2 and 1 == 0) {\n            n2 = n2 shr 1\n        }\n        if (n1 > n2) {\n            val temp = n1\n            n1 = n2\n            n2 = temp\n        }\n        n2 -= n1\n    } while (n2 != 0)\n    return n1 shl n\n}\n</code></pre>\n<pre><code>function findGCD(number1: number, number2: number): number {\n\n    let result:number = Math.min(number1, number2);\n    while (result > 0) {\n        if (number1 % result == 0 &#x26;&#x26; number2 % result == 0) {\n            break;\n        }\n        result--;\n    }\n    return result; // return GCD between number1 and number2\n}\n\nfindGCD(12,18)\n</code></pre>\n<pre><code>def findGCD(x, y):\n    while x != y:\n        if x > y:\n            x = x - y\n        elif x &#x3C; y:\n            y = y - x\n    return x\n\n\nx = int(input(\"n1: \"))\ny = int(input(\"n2: \"))\nprint(f\"GCD of {x} and {y} : {findGCD(x,y)}\")\n</code></pre>\n<pre><code>package main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\nfunc main() {\n\tfmt.Println(\"Enter the first number: \")\n\tvar firstNumber int\n\tfmt.Scanln(&#x26;firstNumber)\n\tfmt.Println(\"Enter the second number: \")\n\tvar secondNumber int\n\tfmt.Scanln(&#x26;secondNumber)\n\tvar greatestCommonDivisor = gcd(firstNumber, secondNumber)\n\tfmt.Println(\"The GCD of \" + strconv.Itoa(firstNumber) + \" and \" + strconv.Itoa(secondNumber) + \" is \" + strconv.Itoa(greatestCommonDivisor))\n}\n\nfunc gcd(firstNumber int, secondNumber int) int {\n\tvar gcd int\n\tif(firstNumber == 0){\n\t\treturn secondNumber\n\t}\n\tif(secondNumber == 0){\n\t\treturn firstNumber\n\t}\n\tfor i := 1; i &#x3C;= firstNumber &#x26;&#x26; i &#x3C;= secondNumber; i++ {\n\t\tif firstNumber%i == 0 &#x26;&#x26; secondNumber%i == 0 {\n\t\t\tgcd = i\n\t\t}\n\t}\n\treturn gcd\n}\n</code></pre>\n<pre><code>&#x3C;?php\n$x = 50;\n$y = 100;\nif ($x > $y) {\n  $temp = $x;\n  $x = $y;\n  $y = $temp;\n}\n\nfor($i = 1; $i &#x3C; ($x+1); $i++) {\n  if ($x%$i == 0 and $y%$i == 0)\n    $gcd = $i;\n}\n\necho \"GCD of $x and $y is: $gcd\";\n?>\n</code></pre>\n<pre><code>// Rust program to find the GCD \r\n\r\nuse std::io;\r\n\r\nfn main() \r\n{\r\n    let mut n1:i32 = 0;\r\n    let mut n2:i32 = 0;\r\n    let mut rem:i32= 0;\r\n    let mut x:i32  = 0;\r\n    let mut y:i32  = 0;\r\n    \r\n    let mut input1 = String::new();\r\n    let mut input2 = String::new();\r\n    \r\n    println!(\"Enter Number1: \");\r\n    io::stdin().read_line(&#x26;mut input1).expect(\"Not a valid string\");\r\n    n1 = input1.trim().parse().expect(\"Not a valid number\");\r\n\r\n    println!(\"Enter Number2: \");\r\n    io::stdin().read_line(&#x26;mut input2).expect(\"Not a valid string\");\r\n    n2 = input2.trim().parse().expect(\"Not a valid number\");\r\n    \r\n    if (n1 > n2) \r\n    {\r\n        x = n1;\r\n        y = n2;\r\n    }\r\n    else \r\n    {\r\n        x = n2;\r\n        y = n1;\r\n    }\r\n\r\n    rem = x % y;\r\n\r\n    while (rem != 0) {\r\n        x = y;\r\n        y = rem;\r\n        rem = x % y;\r\n    }\r\n\r\n    println!(\"Greatest Common Divisor is: {}\", y);\r\n}\n</code></pre>\n","markdown":"\n## Write a program to find gcd of two numbers\n\nGCD (Greatest Common Divisor) of two numbers is the largest number that divides both of them. A simple way to find GCD is to factorize both numbers and multiply common factors.\r\n\r\n```\r\nInput  : 12 18\r\nOutput : 6\r\n```\n\n---\n\n<CodeBlock slug=\"find-gcd-of-two-numbers\" >\n\n```c\n#include <stdio.h>\n\nint find_gcd(int a,int b){\n    int gcd=0;\n    for(int i=1;i<=a && i<=b;i++){\n        if(a%i==0 && b%i==0) gcd=i;\n    }\n    return gcd;\n}\nint main(){\n    \n    int number1,number2,gcd=0;\n    printf(\"Please enter number1 : \");\n    scanf(\"%d\",&number1);\n    printf(\"Please enter number2 : \");\n    scanf(\"%d\",&number2);\n    gcd=find_gcd(number1,number2);\n    printf(\"%d\\n\",gcd);\n    return 0;\n}\n```\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nint gcd(int a, int b)\n{\n    int result = min(a, b); \n    while (result > 0) {\n        if (a % result == 0 && b % result == 0) {\n            break;\n        }\n        result--;\n    }return result;\n}\n \nint main()\n{\n    int a = 10, b = 5;\n    cout << \"GCD of \" << a << \" and \" << b << \" is \"\n         << gcd(a, b);\n    return 0;\n}\n```\n\n```java\nimport java.util.*;\npublic class FindGcdOfTwoNumbers\n{\n    public static void main(String args[])\n    {\n        Scanner sc=new Scanner(System.in);\n        System.out.println(\"Enter two numbers :\");\n        int a=sc.nextInt();\n        int b=sc.nextInt();\n\n\t\tint result = Math.min(a, b); // Find Minimum of a nd b\n\t\twhile (result > 0) {\n\t\t\tif (a % result == 0 && b % result == 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tresult--;\n\t\t}\n\t\tSystem.out.println(result); \n\t}\n}\n```\n\n```js\nfunction gcd(a,b)\n{\n    let result = Math.min(a, b); \n    while (result > 0) {\n        if (a % result == 0 && b % result == 0) {\n            break;\n        }\n        result--;\n    }return result; \n}\n\nlet a = 10;\nlet b = 5;\nconsole.log(\"GCD of \",a,\" and \",b,\" is \",gcd(a, b));\n```\n\n```kt\nimport java.util.Scanner\n\n// contributed by Nudennie White / Tc2r1 www.github.com/tc2r1\nfun main() {\n    val scanner = Scanner(System.`in`)\n\n    print(\"Enter First Positive Whole Number: \")\n    val number1 = scanner.nextInt()\n\n    print(\"Enter Second Positive Whole Number: \")\n    val number2 = scanner.nextInt()\n\n    var gcd = gcdBySteinsAlgorithm(number1, number2)\n    println(\"Stein's Algorithm says it is: $gcd\")\n\n    gcd = gcdByEuclidsAlgorithm(number1, number2)\n    println(\"Euclid's Algorithm says it is: $gcd\")\n}\n\nfun gcdByEuclidsAlgorithm(n1: Int, n2: Int): Int {\n    return if (n2 == 0) {\n        n1\n    } else gcdByEuclidsAlgorithm(n2, n1 % n2)\n}\n\nfun gcdBySteinsAlgorithm(number1: Int, number2: Int): Int {\n    var n1 = number1\n    var n2 = number2\n    if (n1 == 0) {\n        return n2\n    }\n    if (n2 == 0) {\n        return n1\n    }\n    var n = 0\n    while (n1 or n2 and 1 == 0) {\n        n1 = n1 shr 1\n        n2 = n2 shr 1\n        n++\n    }\n    while (n1 and 1 == 0) {\n        n1 = n1 shr 1\n    }\n    do {\n        while (n2 and 1 == 0) {\n            n2 = n2 shr 1\n        }\n        if (n1 > n2) {\n            val temp = n1\n            n1 = n2\n            n2 = temp\n        }\n        n2 -= n1\n    } while (n2 != 0)\n    return n1 shl n\n}\n```\n\n```ts\nfunction findGCD(number1: number, number2: number): number {\n\n    let result:number = Math.min(number1, number2);\n    while (result > 0) {\n        if (number1 % result == 0 && number2 % result == 0) {\n            break;\n        }\n        result--;\n    }\n    return result; // return GCD between number1 and number2\n}\n\nfindGCD(12,18)\n```\n\n```py\ndef findGCD(x, y):\n    while x != y:\n        if x > y:\n            x = x - y\n        elif x < y:\n            y = y - x\n    return x\n\n\nx = int(input(\"n1: \"))\ny = int(input(\"n2: \"))\nprint(f\"GCD of {x} and {y} : {findGCD(x,y)}\")\n```\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n)\n\nfunc main() {\n\tfmt.Println(\"Enter the first number: \")\n\tvar firstNumber int\n\tfmt.Scanln(&firstNumber)\n\tfmt.Println(\"Enter the second number: \")\n\tvar secondNumber int\n\tfmt.Scanln(&secondNumber)\n\tvar greatestCommonDivisor = gcd(firstNumber, secondNumber)\n\tfmt.Println(\"The GCD of \" + strconv.Itoa(firstNumber) + \" and \" + strconv.Itoa(secondNumber) + \" is \" + strconv.Itoa(greatestCommonDivisor))\n}\n\nfunc gcd(firstNumber int, secondNumber int) int {\n\tvar gcd int\n\tif(firstNumber == 0){\n\t\treturn secondNumber\n\t}\n\tif(secondNumber == 0){\n\t\treturn firstNumber\n\t}\n\tfor i := 1; i <= firstNumber && i <= secondNumber; i++ {\n\t\tif firstNumber%i == 0 && secondNumber%i == 0 {\n\t\t\tgcd = i\n\t\t}\n\t}\n\treturn gcd\n}\n```\n\n```php\n<?php\n$x = 50;\n$y = 100;\nif ($x > $y) {\n  $temp = $x;\n  $x = $y;\n  $y = $temp;\n}\n\nfor($i = 1; $i < ($x+1); $i++) {\n  if ($x%$i == 0 and $y%$i == 0)\n    $gcd = $i;\n}\n\necho \"GCD of $x and $y is: $gcd\";\n?>\n```\n\n```rs\n// Rust program to find the GCD \r\n\r\nuse std::io;\r\n\r\nfn main() \r\n{\r\n    let mut n1:i32 = 0;\r\n    let mut n2:i32 = 0;\r\n    let mut rem:i32= 0;\r\n    let mut x:i32  = 0;\r\n    let mut y:i32  = 0;\r\n    \r\n    let mut input1 = String::new();\r\n    let mut input2 = String::new();\r\n    \r\n    println!(\"Enter Number1: \");\r\n    io::stdin().read_line(&mut input1).expect(\"Not a valid string\");\r\n    n1 = input1.trim().parse().expect(\"Not a valid number\");\r\n\r\n    println!(\"Enter Number2: \");\r\n    io::stdin().read_line(&mut input2).expect(\"Not a valid string\");\r\n    n2 = input2.trim().parse().expect(\"Not a valid number\");\r\n    \r\n    if (n1 > n2) \r\n    {\r\n        x = n1;\r\n        y = n2;\r\n    }\r\n    else \r\n    {\r\n        x = n2;\r\n        y = n1;\r\n    }\r\n\r\n    rem = x % y;\r\n\r\n    while (rem != 0) {\r\n        x = y;\r\n        y = rem;\r\n        rem = x % y;\r\n    }\r\n\r\n    println!(\"Greatest Common Divisor is: {}\", y);\r\n}\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2022-12-02T06:03:31Z"}