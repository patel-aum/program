{"slug":"find-sum-of-cubes-of-numbers-by-recursion","title":"Find sum of cubes of numbers by recursion","trackId":1787,"tags":["C","C++","Java","JavaScript","Kotlin","TypeScript","Python"],"contributors":["joao-vitor-souza","Greeshma-frontier","vedha-vikash-pixel","UsmanFani","darkbits018","grraghav120","yk-jp","harshraj8843"],"contentHtml":"<h2>Write a program to find sum of cubes of numbers by recursion</h2>\n<pre><code>Input  : 1 2 3 4 5\r\nOutput : 225\n</code></pre>\n<hr>\n<pre><code>#include &#x3C;stdio.h>\n\nint addNumbers(int n);\n\nint main() {\n\n  int num;\n  printf(\"Enter a positive integer: \");\n  scanf(\"%d\", &#x26;num);\n  printf(\"Sum = %d\", addNumbers(num));\n  return 0;\n}\n\nint addNumbers(int n) {\n  if (n != 0)\n    return (n*n*n + addNumbers(n - 1));\n  else\n    return n;\n}\n</code></pre>\n<pre><code>#include &#x3C;iostream>\n#include &#x3C;bits/stdc++.h>\nusing namespace std;\n\nint FindSumOfCubesOfNumbersByRecursion(vector&#x3C;int> arr, int n){\n    if(n==1) return pow(arr[0],3);\n    return pow(arr[n-1],3)+FindSumOfCubesOfNumbersByRecursion(arr,n-1);\n}\n\nint main()\n{\n    int n;cin>>n;\n    vector&#x3C;int> v(n);\n    for(int i=0;i&#x3C;n;i++) cin>>v[i];\n    int res=FindSumOfCubesOfNumbersByRecursion(v,n);\n    cout&#x3C;&#x3C;res&#x3C;&#x3C;'\\n';\n}\n\n//Contributed by Raghav Garg\n</code></pre>\n<pre><code>import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class FindSumOfCubesOfNumbersByRecursion {\n\n    public static void main(String[] args) {\n\n        List&#x3C;Integer> arr = new ArrayList&#x3C;>(Arrays.asList(1 , 2, 3, 4, 5));   //array to get sum\n        \n        System.out.println(cubesum(arr,0,0));        \n    }\n\n    public static int cubesum(List&#x3C;Integer> arr,int i,int sum) {                //recursive function \n        if(i >= arr.size()){\n            return sum;\n        }\n        sum += (arr.get(i) * arr.get(i) * arr.get(i));        \n        return cubesum(arr,++i,sum);        \n    }\n}\n</code></pre>\n<pre><code>function FindSumOfCubesOfNumbersByRecursion(num) {\n    let sumOfCubesOfNumber = 0;\n    if (num > 0) {\n        sumOfCubesOfNumber = Math.pow((num % 10), 3) + FindSumOfCubesOfNumbersByRecursion(Math.floor(num / 10));\n    }\n    return sumOfCubesOfNumber;\n}\n\nconsole.log(FindSumOfCubesOfNumbersByRecursion(12345));\n</code></pre>\n<pre><code>import kotlin.math.pow\n\nfun main() {\n    print(\"Enter the numbers:\")\n    val nums = readln()\n    print(\"Sum of Cubes of Number: ${sumOfCubes(nums)}\")\n}\n\nprivate fun sumOfCubes(nums: String): Int {\n    val list = mutableListOf&#x3C;Int>()\n    var str = \"\"\n    nums.forEach {\n        if (it == ' ') {\n            list.add(str.toInt())\n            str = \"\"\n        } else str += it\n    }\n    if (str != \"\") list.add(str.toInt())\n    return sumRecursion(0, list)\n}\n\nprivate fun sumRecursion(index: Int, nums: MutableList&#x3C;Int>): Int {\n    if (index == nums.lastIndex) return nums[index].toDouble().pow(3).toInt()\n\n    return nums[index].toDouble().pow(3).toInt() + sumRecursion(index + 1, nums)\n}\n</code></pre>\n<pre><code>function FindSumOfCubesOfNumbersByRecursion(num: number): number {\n    let sumOfCubesOfNumber = 0;\n    if (num > 0) {\n        sumOfCubesOfNumber = Math.pow((num % 10), 3) + FindSumOfCubesOfNumbersByRecursion(Math.floor(num / 10));\n    }\n    return sumOfCubesOfNumber;\n}\n\nconsole.log(FindSumOfCubesOfNumbersByRecursion(12345));\n</code></pre>\n<pre><code>from decimal import Decimal, DecimalException\n\n\ndef culc_sum_of_cubes_of_numbers(nums, res):\n    if len(nums) &#x3C;= 0:\n        # when every numbers in the nums are calculated, array is empty and return result\n        return res\n\n    # pop the number from the nums array and add it to the result\n    num = nums.pop()\n    res += num**3\n    return culc_sum_of_cubes_of_numbers(nums, res)\n\n\ndef convert_input_to_numbers_list(user_input):\n    try:\n        # separate the user input by empty space\n        nums = user_input.split()\n\n        nums = [Decimal(num) for num in nums]\n\n    except (ValueError, DecimalException):\n        print(f\"Please enter valid input.\")\n        exit()\n\n    return nums\n\n\ndef main():\n    # receive a user input\n    user_input = input(f\"Enter the numbers (e.g. 1 2 3 4 5): \")\n    nums = convert_input_to_numbers_list(user_input)\n\n    res = culc_sum_of_cubes_of_numbers(nums, 0)\n    print(f'the result of \"{user_input}\" = {res}')\n\n\nmain()\n</code></pre>\n","markdown":"\n## Write a program to find sum of cubes of numbers by recursion\n\n```\r\nInput  : 1 2 3 4 5\r\nOutput : 225\r\n```\n\n---\n\n<CodeBlock slug=\"find-sum-of-cubes-of-numbers-by-recursion\" >\n\n```c\n#include <stdio.h>\n\nint addNumbers(int n);\n\nint main() {\n\n  int num;\n  printf(\"Enter a positive integer: \");\n  scanf(\"%d\", &num);\n  printf(\"Sum = %d\", addNumbers(num));\n  return 0;\n}\n\nint addNumbers(int n) {\n  if (n != 0)\n    return (n*n*n + addNumbers(n - 1));\n  else\n    return n;\n}\n```\n\n```cpp\n#include <iostream>\n#include <bits/stdc++.h>\nusing namespace std;\n\nint FindSumOfCubesOfNumbersByRecursion(vector<int> arr, int n){\n    if(n==1) return pow(arr[0],3);\n    return pow(arr[n-1],3)+FindSumOfCubesOfNumbersByRecursion(arr,n-1);\n}\n\nint main()\n{\n    int n;cin>>n;\n    vector<int> v(n);\n    for(int i=0;i<n;i++) cin>>v[i];\n    int res=FindSumOfCubesOfNumbersByRecursion(v,n);\n    cout<<res<<'\\n';\n}\n\n//Contributed by Raghav Garg\n```\n\n```java\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class FindSumOfCubesOfNumbersByRecursion {\n\n    public static void main(String[] args) {\n\n        List<Integer> arr = new ArrayList<>(Arrays.asList(1 , 2, 3, 4, 5));   //array to get sum\n        \n        System.out.println(cubesum(arr,0,0));        \n    }\n\n    public static int cubesum(List<Integer> arr,int i,int sum) {                //recursive function \n        if(i >= arr.size()){\n            return sum;\n        }\n        sum += (arr.get(i) * arr.get(i) * arr.get(i));        \n        return cubesum(arr,++i,sum);        \n    }\n}\n```\n\n```js\nfunction FindSumOfCubesOfNumbersByRecursion(num) {\n    let sumOfCubesOfNumber = 0;\n    if (num > 0) {\n        sumOfCubesOfNumber = Math.pow((num % 10), 3) + FindSumOfCubesOfNumbersByRecursion(Math.floor(num / 10));\n    }\n    return sumOfCubesOfNumber;\n}\n\nconsole.log(FindSumOfCubesOfNumbersByRecursion(12345));\n```\n\n```kt\nimport kotlin.math.pow\n\nfun main() {\n    print(\"Enter the numbers:\")\n    val nums = readln()\n    print(\"Sum of Cubes of Number: ${sumOfCubes(nums)}\")\n}\n\nprivate fun sumOfCubes(nums: String): Int {\n    val list = mutableListOf<Int>()\n    var str = \"\"\n    nums.forEach {\n        if (it == ' ') {\n            list.add(str.toInt())\n            str = \"\"\n        } else str += it\n    }\n    if (str != \"\") list.add(str.toInt())\n    return sumRecursion(0, list)\n}\n\nprivate fun sumRecursion(index: Int, nums: MutableList<Int>): Int {\n    if (index == nums.lastIndex) return nums[index].toDouble().pow(3).toInt()\n\n    return nums[index].toDouble().pow(3).toInt() + sumRecursion(index + 1, nums)\n}\n```\n\n```ts\nfunction FindSumOfCubesOfNumbersByRecursion(num: number): number {\n    let sumOfCubesOfNumber = 0;\n    if (num > 0) {\n        sumOfCubesOfNumber = Math.pow((num % 10), 3) + FindSumOfCubesOfNumbersByRecursion(Math.floor(num / 10));\n    }\n    return sumOfCubesOfNumber;\n}\n\nconsole.log(FindSumOfCubesOfNumbersByRecursion(12345));\n```\n\n```py\nfrom decimal import Decimal, DecimalException\n\n\ndef culc_sum_of_cubes_of_numbers(nums, res):\n    if len(nums) <= 0:\n        # when every numbers in the nums are calculated, array is empty and return result\n        return res\n\n    # pop the number from the nums array and add it to the result\n    num = nums.pop()\n    res += num**3\n    return culc_sum_of_cubes_of_numbers(nums, res)\n\n\ndef convert_input_to_numbers_list(user_input):\n    try:\n        # separate the user input by empty space\n        nums = user_input.split()\n\n        nums = [Decimal(num) for num in nums]\n\n    except (ValueError, DecimalException):\n        print(f\"Please enter valid input.\")\n        exit()\n\n    return nums\n\n\ndef main():\n    # receive a user input\n    user_input = input(f\"Enter the numbers (e.g. 1 2 3 4 5): \")\n    nums = convert_input_to_numbers_list(user_input)\n\n    res = culc_sum_of_cubes_of_numbers(nums, 0)\n    print(f'the result of \"{user_input}\" = {res}')\n\n\nmain()\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2022-12-02T06:03:31Z"}