{"slug":"find-the-maximum-sum-of-a-contiguous-subarray-(circular)","title":"Find the maximum sum of a contiguous subarray (Circular)","trackId":2309,"tags":["C","C++","Java","JavaScript","Swift","Python","GO"],"contributors":["joao-vitor-souza","harshraj8843","Shambu-K","GuyEternal","sreekeshiyer","PoweredByCaffein"],"contentHtml":"<h2>Write a program to find the maximum sum of a contiguous subarray (circular)</h2>\n<p>Maximum sum of a circular subarray is the task of finding the contiguous subarray within a circular one-dimensional array of numbers which has the largest sum. For example, for the sequence of values <code>10, -3, -4, 7, 6, 5, -4, -1;</code> the contiguous subarray with the largest sum is <code>7, 6, 5,</code> with sum <code>18</code>.</p>\n<pre><code>Input  : [8, -8, 9, -9, 10, -11, 12]\nOutput : 22\n</code></pre>\n<hr>\n<pre><code>#include &#x3C;stdio.h>\n\nint max(int a, int b){\n    if(a>b) return a;\n    return b;\n}\n\nint min(int a, int b){\n    if(a&#x3C;b) return a;\n    return b;\n}\n\nint main(){\n    \n    int n; //size of array\n    int ans;\n    scanf(\"%d\", &#x26;n);\n    int arr[n];\n    for(int i = 0; i &#x3C; n; i++)\n        scanf(\"%d\", &#x26;arr[i]);\n    \n    int total_sum = 0;\n    int curr_max = arr[0], curr_min = arr[0], max_subarr_sum = arr[0], min_subarr_sum = arr[0];\n\n    for(int i = 0; i &#x3C; n; i++)\n        total_sum+= arr[i];\n\n    for(int i = 1; i &#x3C; n; i++){\n\n        curr_max = max(curr_max + arr[i], arr[i]);\n        curr_min = min(curr_min + arr[i], arr[i]);\n\n        max_subarr_sum = max(max_subarr_sum, curr_max);\n        min_subarr_sum = min(min_subarr_sum, curr_min);\n    }\n\n    ans = max(max_subarr_sum, total_sum - min_subarr_sum);\n    printf(\"%d \\n\", ans);\n\n    return 0;\n}\n</code></pre>\n<pre><code>#include &#x3C;bits/stdc++.h>\nusing namespace std;\n\nint main(){\n    vector&#x3C;int> arr;\n    int n;\n    int ans;\n    while(cin >> n)\n        arr.push_back(n);\n    \n    int total_sum = 0;\n    int curr_max = arr[0], curr_min = arr[0], max_subarr_sum = arr[0], min_subarr_sum = arr[0];\n\n    for(int i = 0; i &#x3C; arr.size(); i++)\n        total_sum+= arr[i];\n\n    for(int i = 1; i &#x3C; arr.size(); i++){\n        curr_max = max(curr_max + arr[i], arr[i]);\n        curr_min = min(curr_min + arr[i], arr[i]);\n\n        max_subarr_sum = max(max_subarr_sum, curr_max);\n        min_subarr_sum = min(min_subarr_sum, curr_min);\n    }\n\n    ans = max(max_subarr_sum, total_sum - min_subarr_sum);\n    cout &#x3C;&#x3C; ans &#x3C;&#x3C; endl;\n\n    return 0;\n}\n</code></pre>\n<pre><code>import java.util.Scanner;\n\npublic class FindMaxContiguousSubarraySumCircular{\n\n    public static void main(String[] args){\n\n        Scanner sc = new Scanner(System.in);\n        \n        int n;\n        int total_sum = 0, ans;\n        n = sc.nextInt();\n\n        int[] arr = new int[n];\n        for(int i = 0; i &#x3C; n; i++){\n            arr[i] = sc.nextInt();\n            total_sum+= arr[i];\n        }\n\n        int curr_max = arr[0], curr_min = arr[0], max_subarr_sum = arr[0], min_subarr_sum = arr[0];\n        for(int i = 1; i &#x3C; n; i++){\n            curr_max = Math.max(curr_max + arr[i], arr[i]);\n            curr_min = Math.min(curr_min + arr[i], arr[i]);\n\n            max_subarr_sum = Math.max(max_subarr_sum, curr_max);\n            min_subarr_sum = Math.min(min_subarr_sum, curr_min);\n        }\n\n        ans = Math.max(max_subarr_sum, total_sum - min_subarr_sum);\n        System.out.println(ans);\n        sc.close();\n    }\n\n}\n</code></pre>\n<pre><code>const maxSumSubarrayCircular = (nums) => {\n    if (nums.length === 0) return 0;\n\n    let sum = nums[0];\n\n    let currMax = nums[0];\n    let currMin = nums[0];\n    let maxTotal = nums[0];\n    let minTotal = nums[0];\n\n    for (let i = 1; i &#x3C; nums.length; i++) {\n        let val = nums[i];\n\n        currMax = Math.max(val, currMax + val);\n        maxTotal = Math.max(currMax, maxTotal);\n\n        currMin = Math.min(val, currMin + val);\n        minTotal = Math.min(minTotal, currMin);\n\n        sum += val;\n    }\n\n    if (sum == minTotal) return maxTotal;\n\n    return Math.max(sum - minTotal, maxTotal);\n};\n\nvar arr = [1, -2, 3, -2, 8, -5, 1, 7];\nconsole.log(maxSumSubarrayCircular(arr));\n</code></pre>\n<pre><code>func maxSubarraySumCircular( nums: [Int]) -> Int {\n        if (nums.count == 0) {\n            return 0\n        }\n\n        var sum = nums[0]\n\n        var currMax = nums[0]\n        var currMin = nums[0]\n        var maxTotal = nums[0]\n        var minTotal = nums[0]\n\n        var i = 1\n\n        while (i &#x3C; nums.count) {\n\n            let val = nums[i]\n\n            currMax = max(val, currMax + val)\n            maxTotal = max(currMax, maxTotal)\n\n            currMin = min(val, currMin + val)\n            minTotal = min(minTotal, currMin)\n\n            sum += val\n            i += 1\n        }\n\n        if (sum == minTotal){ \n            return maxTotal\n        }\n\n        return max(sum - minTotal, maxTotal)\n    }\n\nvar arr = [1,-2,3,-2]\nprint(maxSubarraySumCircular(nums:arr))\n</code></pre>\n<pre><code># Python program for maximum contiguous circular sum problem\r\n\r\n\r\ndef max_cont_sum(a, n):\r\n\r\n    # Corner Case\r\n    if n == 1:\r\n        return a[0]\r\n\r\n    sum = 0\r\n    for index in range(n):\r\n        sum = sum + a[index]\r\n\r\n    # Initialize every variable\r\n    # with first value of array.\r\n    current_maximum = a[0]\r\n    max_so_far = a[0]\r\n    current_minimum = a[0]\r\n    min_so_far = a[0]\r\n\r\n    # Concept of Kadane's Algorithm\r\n    for i in range(1, n):\r\n\r\n        # Kadane's Algorithm to find Maximum subarray sum.\r\n        current_maximum = max(current_maximum + a[i], a[i])\r\n        max_so_far = max(max_so_far, current_maximum)\r\n\r\n        # Kadane's Algorithm to find Minimum subarray sum.\r\n        current_minimum = min(current_minimum + a[i], a[i])\r\n        min_so_far = min(min_so_far, current_minimum)\r\n\r\n    if min_so_far == sum:\r\n        return max_so_far\r\n\r\n    # returning the maximum value\r\n    return max(max_so_far, sum - min_so_far)\r\n\r\n\r\ninput_string = input(\"Input : \")\r\n\r\na = input_string.split(\", \")\r\nn = len(a)\r\n\r\narr = {}\r\n\r\nfor item in range(n):\r\n    arr[item] = int(a[item])\r\n\r\nprint(\"Output : \", max_cont_sum(arr, n))\n</code></pre>\n<pre><code>package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nfunc main() {\n\treader := bufio.NewReader(os.Stdin)\n\n\tfmt.Println(\"Enter array elements separated by space:\")\n\tline, err := reader.ReadString('\\n')\n\tif err != nil {\n\t\tfmt.Println(\"Failed to take input:\", err)\n\t}\n\n\tinputArray, hasNegatives := stringToIntSlice(line)\n\tfmt.Println(\"Input Array:\", inputArray)\n\n\t// We need the sum of contiguous sub-array in circular fashion\n\tif hasNegatives {\n\t\t// Try to think what happens if we do this and we get all +ve inputs\n\t\tinputArray = append(inputArray, inputArray[:len(inputArray)-1]...)\n\t}\n\tfmt.Println(\"Maximum sum:\", findMaxSum(inputArray))\n}\n\nfunc findMaxSum(input []int) int {\n\tvar max, curr int\n\tfor _, v := range input {\n\t\tcurr += v\n\t\tif curr > max {\n\t\t\tmax = curr\n\t\t}\n\n\t\tif curr &#x3C; 0 {\n\t\t\tcurr = 0\n\t\t}\n\t}\n\treturn max\n}\n\nfunc stringToIntSlice(input string) ([]int, bool) {\n\t// trim the space as \\n in appended when we take input using bufio\n\tinput = strings.TrimSpace(input)\n\tstringSlice := strings.Split(input, \" \")\n\thasNegatives := false\n\tvar result []int\n\tfor _, v := range stringSlice {\n\t\ttemp, err := strconv.Atoi(v)\n\t\tif err != nil {\n\t\t\tlog.Fatalln(\"Failed to convert string to int:\", err)\n\t\t}\n\t\tif temp &#x3C; 0 {\n\t\t\thasNegatives = true\n\t\t}\n\t\tresult = append(result, temp)\n\t}\n\n\treturn result, hasNegatives\n}\n</code></pre>\n","markdown":"\n## Write a program to find the maximum sum of a contiguous subarray (circular)\n\nMaximum sum of a circular subarray is the task of finding the contiguous subarray within a circular one-dimensional array of numbers which has the largest sum. For example, for the sequence of values `10, -3, -4, 7, 6, 5, -4, -1;` the contiguous subarray with the largest sum is `7, 6, 5,` with sum `18`.\n\n```\nInput  : [8, -8, 9, -9, 10, -11, 12]\nOutput : 22\n```\n\n---\n\n<CodeBlock slug=\"find-the-maximum-sum-of-a-contiguous-subarray-(circular)\" >\n\n```c\n#include <stdio.h>\n\nint max(int a, int b){\n    if(a>b) return a;\n    return b;\n}\n\nint min(int a, int b){\n    if(a<b) return a;\n    return b;\n}\n\nint main(){\n    \n    int n; //size of array\n    int ans;\n    scanf(\"%d\", &n);\n    int arr[n];\n    for(int i = 0; i < n; i++)\n        scanf(\"%d\", &arr[i]);\n    \n    int total_sum = 0;\n    int curr_max = arr[0], curr_min = arr[0], max_subarr_sum = arr[0], min_subarr_sum = arr[0];\n\n    for(int i = 0; i < n; i++)\n        total_sum+= arr[i];\n\n    for(int i = 1; i < n; i++){\n\n        curr_max = max(curr_max + arr[i], arr[i]);\n        curr_min = min(curr_min + arr[i], arr[i]);\n\n        max_subarr_sum = max(max_subarr_sum, curr_max);\n        min_subarr_sum = min(min_subarr_sum, curr_min);\n    }\n\n    ans = max(max_subarr_sum, total_sum - min_subarr_sum);\n    printf(\"%d \\n\", ans);\n\n    return 0;\n}\n```\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main(){\n    vector<int> arr;\n    int n;\n    int ans;\n    while(cin >> n)\n        arr.push_back(n);\n    \n    int total_sum = 0;\n    int curr_max = arr[0], curr_min = arr[0], max_subarr_sum = arr[0], min_subarr_sum = arr[0];\n\n    for(int i = 0; i < arr.size(); i++)\n        total_sum+= arr[i];\n\n    for(int i = 1; i < arr.size(); i++){\n        curr_max = max(curr_max + arr[i], arr[i]);\n        curr_min = min(curr_min + arr[i], arr[i]);\n\n        max_subarr_sum = max(max_subarr_sum, curr_max);\n        min_subarr_sum = min(min_subarr_sum, curr_min);\n    }\n\n    ans = max(max_subarr_sum, total_sum - min_subarr_sum);\n    cout << ans << endl;\n\n    return 0;\n}\n```\n\n```java\nimport java.util.Scanner;\n\npublic class FindMaxContiguousSubarraySumCircular{\n\n    public static void main(String[] args){\n\n        Scanner sc = new Scanner(System.in);\n        \n        int n;\n        int total_sum = 0, ans;\n        n = sc.nextInt();\n\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++){\n            arr[i] = sc.nextInt();\n            total_sum+= arr[i];\n        }\n\n        int curr_max = arr[0], curr_min = arr[0], max_subarr_sum = arr[0], min_subarr_sum = arr[0];\n        for(int i = 1; i < n; i++){\n            curr_max = Math.max(curr_max + arr[i], arr[i]);\n            curr_min = Math.min(curr_min + arr[i], arr[i]);\n\n            max_subarr_sum = Math.max(max_subarr_sum, curr_max);\n            min_subarr_sum = Math.min(min_subarr_sum, curr_min);\n        }\n\n        ans = Math.max(max_subarr_sum, total_sum - min_subarr_sum);\n        System.out.println(ans);\n        sc.close();\n    }\n\n}\n```\n\n```js\nconst maxSumSubarrayCircular = (nums) => {\n    if (nums.length === 0) return 0;\n\n    let sum = nums[0];\n\n    let currMax = nums[0];\n    let currMin = nums[0];\n    let maxTotal = nums[0];\n    let minTotal = nums[0];\n\n    for (let i = 1; i < nums.length; i++) {\n        let val = nums[i];\n\n        currMax = Math.max(val, currMax + val);\n        maxTotal = Math.max(currMax, maxTotal);\n\n        currMin = Math.min(val, currMin + val);\n        minTotal = Math.min(minTotal, currMin);\n\n        sum += val;\n    }\n\n    if (sum == minTotal) return maxTotal;\n\n    return Math.max(sum - minTotal, maxTotal);\n};\n\nvar arr = [1, -2, 3, -2, 8, -5, 1, 7];\nconsole.log(maxSumSubarrayCircular(arr));\n```\n\n```swift\nfunc maxSubarraySumCircular( nums: [Int]) -> Int {\n        if (nums.count == 0) {\n            return 0\n        }\n\n        var sum = nums[0]\n\n        var currMax = nums[0]\n        var currMin = nums[0]\n        var maxTotal = nums[0]\n        var minTotal = nums[0]\n\n        var i = 1\n\n        while (i < nums.count) {\n\n            let val = nums[i]\n\n            currMax = max(val, currMax + val)\n            maxTotal = max(currMax, maxTotal)\n\n            currMin = min(val, currMin + val)\n            minTotal = min(minTotal, currMin)\n\n            sum += val\n            i += 1\n        }\n\n        if (sum == minTotal){ \n            return maxTotal\n        }\n\n        return max(sum - minTotal, maxTotal)\n    }\n\nvar arr = [1,-2,3,-2]\nprint(maxSubarraySumCircular(nums:arr))\n```\n\n```py\n# Python program for maximum contiguous circular sum problem\r\n\r\n\r\ndef max_cont_sum(a, n):\r\n\r\n    # Corner Case\r\n    if n == 1:\r\n        return a[0]\r\n\r\n    sum = 0\r\n    for index in range(n):\r\n        sum = sum + a[index]\r\n\r\n    # Initialize every variable\r\n    # with first value of array.\r\n    current_maximum = a[0]\r\n    max_so_far = a[0]\r\n    current_minimum = a[0]\r\n    min_so_far = a[0]\r\n\r\n    # Concept of Kadane's Algorithm\r\n    for i in range(1, n):\r\n\r\n        # Kadane's Algorithm to find Maximum subarray sum.\r\n        current_maximum = max(current_maximum + a[i], a[i])\r\n        max_so_far = max(max_so_far, current_maximum)\r\n\r\n        # Kadane's Algorithm to find Minimum subarray sum.\r\n        current_minimum = min(current_minimum + a[i], a[i])\r\n        min_so_far = min(min_so_far, current_minimum)\r\n\r\n    if min_so_far == sum:\r\n        return max_so_far\r\n\r\n    # returning the maximum value\r\n    return max(max_so_far, sum - min_so_far)\r\n\r\n\r\ninput_string = input(\"Input : \")\r\n\r\na = input_string.split(\", \")\r\nn = len(a)\r\n\r\narr = {}\r\n\r\nfor item in range(n):\r\n    arr[item] = int(a[item])\r\n\r\nprint(\"Output : \", max_cont_sum(arr, n))\n```\n\n```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nfunc main() {\n\treader := bufio.NewReader(os.Stdin)\n\n\tfmt.Println(\"Enter array elements separated by space:\")\n\tline, err := reader.ReadString('\\n')\n\tif err != nil {\n\t\tfmt.Println(\"Failed to take input:\", err)\n\t}\n\n\tinputArray, hasNegatives := stringToIntSlice(line)\n\tfmt.Println(\"Input Array:\", inputArray)\n\n\t// We need the sum of contiguous sub-array in circular fashion\n\tif hasNegatives {\n\t\t// Try to think what happens if we do this and we get all +ve inputs\n\t\tinputArray = append(inputArray, inputArray[:len(inputArray)-1]...)\n\t}\n\tfmt.Println(\"Maximum sum:\", findMaxSum(inputArray))\n}\n\nfunc findMaxSum(input []int) int {\n\tvar max, curr int\n\tfor _, v := range input {\n\t\tcurr += v\n\t\tif curr > max {\n\t\t\tmax = curr\n\t\t}\n\n\t\tif curr < 0 {\n\t\t\tcurr = 0\n\t\t}\n\t}\n\treturn max\n}\n\nfunc stringToIntSlice(input string) ([]int, bool) {\n\t// trim the space as \\n in appended when we take input using bufio\n\tinput = strings.TrimSpace(input)\n\tstringSlice := strings.Split(input, \" \")\n\thasNegatives := false\n\tvar result []int\n\tfor _, v := range stringSlice {\n\t\ttemp, err := strconv.Atoi(v)\n\t\tif err != nil {\n\t\t\tlog.Fatalln(\"Failed to convert string to int:\", err)\n\t\t}\n\t\tif temp < 0 {\n\t\t\thasNegatives = true\n\t\t}\n\t\tresult = append(result, temp)\n\t}\n\n\treturn result, hasNegatives\n}\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2022-12-02T06:03:31Z"}