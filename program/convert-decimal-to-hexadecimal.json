{"slug":"convert-decimal-to-hexadecimal","title":"Convert decimal to hexadecimal","trackId":3894,"tags":["Java","JavaScript","Kotlin","TypeScript","Python","PHP"],"contributors":["joao-vitor-souza","harshraj8843","deveshpandee","castanedadev-edu","aghiles-medane","dmosc","ArthurGossel1"],"contentHtml":"<h2>Write a program to convert decimal to hexadecimal</h2>\n<p>Hexadecimal is a base-16 number system. It uses sixteen digits: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, and F. The digits are called hexits. A hexit is the smallest unit of information in a computer. A hexit can be used to represent a single value, such as 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, or F, or it can be used to represent a single state, such as on or off.</p>\n<p>To convert a decimal number to hexadecimal, we can use the following algorithm:</p>\n<ol>\n<li>Divide the decimal number by 16.</li>\n<li>Write down the remainder.</li>\n<li>Divide the quotient by 16.</li>\n<li>Write down the remainder.</li>\n<li>Repeat steps 3 and 4 until the quotient is 0.</li>\n<li>The hexadecimal number is the sequence of remainders written in reverse order.</li>\n</ol>\n<pre><code>Input  : 10\r\nOutput : A\n</code></pre>\n<hr>\n<pre><code>import java.util.AbstractMap.SimpleEntry;\n\nimport java.util.Map;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic class ConversationDecTohex {\n\npublic static String dectoHex(int m) {\n\tString s = \"\";\n\twhile (m > 0) {\n\t\tint rest = m % 16;\n\t\tif (rest &#x3C; 10) {\n\t\t\ts = String.valueOf(rest) + s;\n\t\t} else {\n\t\t\ts = map.get(rest) + s;\n\t\t}\n\t\tm = m / 16;\n\t}\n\treturn s;\n}\n\nstatic Map&#x3C;Integer, String> map = Stream\n\t\t.of(new SimpleEntry&#x3C;>(10, \"A\"), new SimpleEntry&#x3C;>(11, \"B\"), new SimpleEntry&#x3C;>(12, \"C\"),\n\t\t\t\tnew SimpleEntry&#x3C;>(13, \"D\"), new SimpleEntry&#x3C;>(14, \"E\"), new SimpleEntry&#x3C;>(15, \"F\"))\n\t\t.collect(Collectors.toMap(SimpleEntry::getKey, SimpleEntry::getValue));\n}\n</code></pre>\n<pre><code>function convertToHex(decimalNumber) {\n  let remaindersSequence = [];\n  let remainder = decimalNumber % 16;\n  let quotient = Math.floor(decimalNumber / 16);\n  remaindersSequence.push(remainder);\n\n  do {\n    remainder = quotient % 16;\n    quotient = Math.floor(quotient / 16);\n\n    if (remainder > 0)\n      remaindersSequence.push(remainder);\n  } while (remainder !== 0);\n\n  return remaindersSequence.reverse().join(' ');\n}\n\nconsole.log(convertToHex(1500));\n</code></pre>\n<pre><code>import java.util.*\n\nfun main(args: Array&#x3C;String>) {\n    val input = Scanner(System.`in`)\n    var dec = input.nextInt()\n\n    // For storing remainder\n    var rem: Int\n\n    // For storing result\n    var hexdec = \"\"\n\n    // Digits in hexadecimal number system\n    val hex = charArrayOf('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F')\n    while (dec>0) {\n        rem = dec % 16\n        hexdec = hex[rem].toString() + hexdec\n        dec = dec / 16\n    }\n    println(hexdec)\n}\n</code></pre>\n<pre><code>const letters = new Map([\n  [\"10\", \"A\"],\n  [\"11\", \"B\"],\n  [\"12\", \"C\"],\n  [\"13\", \"D\"],\n  [\"14\", \"E\"],\n  [\"15\", \"F\"]\n]);\n\nconst decimalToHexadecimal = (number: number): string => {\n  let hexFormat = \"\";\n  let quotient, remainder;\n  while (number) {\n    quotient = Math.trunc(number / 16);\n    remainder = String(number % 16);\n    hexFormat = (letters.get(remainder) ?? remainder) + hexFormat;\n    number = quotient;\n  }\n  return hexFormat;\n};\n\nconsole.log(decimalToHexadecimal(11)); // B\nconsole.log(decimalToHexadecimal(32)); // 20\n</code></pre>\n<pre><code>print(hex(int(input())).split(\"x\")[-1])\n</code></pre>\n<pre><code>&#x3C;?php\n\n$decimal = readline();\n$possibleChars = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\n$hexaCharsMapping = [\"10\" => \"A\", \"11\" => \"B\", \"12\" => \"C\", \"13\" => \"D\", \"14\" => \"E\", \"15\" => \"F\"];\n$hexadecimal = \"\";\n\nfunction map($num)\n{\n    global $hexaCharsMapping;\n    if (in_array($num, [10, 11, 12, 13, 14, 15])) {\n        return $hexaCharsMapping[$num];\n    } else {\n        return $num;\n    }\n}\n\nforeach (str_split($decimal) as $key => $value) {\n    if (!in_array($value, $possibleChars)) {\n        exit(\"Input contains an invalid value: \" . $value . \"\\n\");\n    }\n}\n\nwhile (true) {\n    $quocient = floor($decimal / 16);\n    if ($quocient &#x3C; 1) {\n        $hexadecimal .= map($decimal);\n        break;\n    }\n    $remainder = $decimal % 16;\n    $decimal = $quocient;\n    $hexadecimal .= map($remainder);\n}\n\necho strrev($hexadecimal) . \"\\n\";\n\n?>\n</code></pre>\n","markdown":"\n## Write a program to convert decimal to hexadecimal\n\nHexadecimal is a base-16 number system. It uses sixteen digits: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, and F. The digits are called hexits. A hexit is the smallest unit of information in a computer. A hexit can be used to represent a single value, such as 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, or F, or it can be used to represent a single state, such as on or off.\r\n\r\nTo convert a decimal number to hexadecimal, we can use the following algorithm:\r\n\r\n1. Divide the decimal number by 16.\r\n2. Write down the remainder.\r\n3. Divide the quotient by 16.\r\n4. Write down the remainder.\r\n5. Repeat steps 3 and 4 until the quotient is 0.\r\n6. The hexadecimal number is the sequence of remainders written in reverse order.\r\n\r\n```\r\nInput  : 10\r\nOutput : A\r\n```\n\n---\n\n<CodeBlock slug=\"convert-decimal-to-hexadecimal\" >\n\n```java\nimport java.util.AbstractMap.SimpleEntry;\n\nimport java.util.Map;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic class ConversationDecTohex {\n\npublic static String dectoHex(int m) {\n\tString s = \"\";\n\twhile (m > 0) {\n\t\tint rest = m % 16;\n\t\tif (rest < 10) {\n\t\t\ts = String.valueOf(rest) + s;\n\t\t} else {\n\t\t\ts = map.get(rest) + s;\n\t\t}\n\t\tm = m / 16;\n\t}\n\treturn s;\n}\n\nstatic Map<Integer, String> map = Stream\n\t\t.of(new SimpleEntry<>(10, \"A\"), new SimpleEntry<>(11, \"B\"), new SimpleEntry<>(12, \"C\"),\n\t\t\t\tnew SimpleEntry<>(13, \"D\"), new SimpleEntry<>(14, \"E\"), new SimpleEntry<>(15, \"F\"))\n\t\t.collect(Collectors.toMap(SimpleEntry::getKey, SimpleEntry::getValue));\n}\n```\n\n```js\nfunction convertToHex(decimalNumber) {\n  let remaindersSequence = [];\n  let remainder = decimalNumber % 16;\n  let quotient = Math.floor(decimalNumber / 16);\n  remaindersSequence.push(remainder);\n\n  do {\n    remainder = quotient % 16;\n    quotient = Math.floor(quotient / 16);\n\n    if (remainder > 0)\n      remaindersSequence.push(remainder);\n  } while (remainder !== 0);\n\n  return remaindersSequence.reverse().join(' ');\n}\n\nconsole.log(convertToHex(1500));\n```\n\n```kt\nimport java.util.*\n\nfun main(args: Array<String>) {\n    val input = Scanner(System.`in`)\n    var dec = input.nextInt()\n\n    // For storing remainder\n    var rem: Int\n\n    // For storing result\n    var hexdec = \"\"\n\n    // Digits in hexadecimal number system\n    val hex = charArrayOf('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F')\n    while (dec>0) {\n        rem = dec % 16\n        hexdec = hex[rem].toString() + hexdec\n        dec = dec / 16\n    }\n    println(hexdec)\n}\n```\n\n```ts\nconst letters = new Map([\n  [\"10\", \"A\"],\n  [\"11\", \"B\"],\n  [\"12\", \"C\"],\n  [\"13\", \"D\"],\n  [\"14\", \"E\"],\n  [\"15\", \"F\"]\n]);\n\nconst decimalToHexadecimal = (number: number): string => {\n  let hexFormat = \"\";\n  let quotient, remainder;\n  while (number) {\n    quotient = Math.trunc(number / 16);\n    remainder = String(number % 16);\n    hexFormat = (letters.get(remainder) ?? remainder) + hexFormat;\n    number = quotient;\n  }\n  return hexFormat;\n};\n\nconsole.log(decimalToHexadecimal(11)); // B\nconsole.log(decimalToHexadecimal(32)); // 20\n```\n\n```py\nprint(hex(int(input())).split(\"x\")[-1])\n```\n\n```php\n<?php\n\n$decimal = readline();\n$possibleChars = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\n$hexaCharsMapping = [\"10\" => \"A\", \"11\" => \"B\", \"12\" => \"C\", \"13\" => \"D\", \"14\" => \"E\", \"15\" => \"F\"];\n$hexadecimal = \"\";\n\nfunction map($num)\n{\n    global $hexaCharsMapping;\n    if (in_array($num, [10, 11, 12, 13, 14, 15])) {\n        return $hexaCharsMapping[$num];\n    } else {\n        return $num;\n    }\n}\n\nforeach (str_split($decimal) as $key => $value) {\n    if (!in_array($value, $possibleChars)) {\n        exit(\"Input contains an invalid value: \" . $value . \"\\n\");\n    }\n}\n\nwhile (true) {\n    $quocient = floor($decimal / 16);\n    if ($quocient < 1) {\n        $hexadecimal .= map($decimal);\n        break;\n    }\n    $remainder = $decimal % 16;\n    $decimal = $quocient;\n    $hexadecimal .= map($remainder);\n}\n\necho strrev($hexadecimal) . \"\\n\";\n\n?>\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2022-12-05T05:04:06Z"}