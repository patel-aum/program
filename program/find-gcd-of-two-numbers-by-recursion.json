{"slug":"find-gcd-of-two-numbers-by-recursion","title":"Find GCD of two numbers by recursion","trackId":5186,"tags":["JavaScript","TypeScript"],"contributors":["yesayajones","anandfresh","harshraj8843"],"contentHtml":"<h2>Write a program to find gcd of two numbers by recursion</h2>\n<p>GCD (Greatest Common Divisor) of two numbers is the largest number that divides both of them. A simple way to find GCD is to factorize both numbers and multiply common factors.</p>\n<pre><code>Input  : 12 18\r\nOutput : 6\n</code></pre>\n<hr>\n<pre><code>function greatestCommonDenominator(a, b) {\n\t// the bigger number is always divided by the smaller one\n\tif (b === 0) return a;\n\n\t// recursively call the function\n\treturn greatestCommonDenominator(b, a % b);\n}\n\n//display greatest common denominator of 12 and 18\nconsole.log(greatestCommonDenominator(12, 18));\n</code></pre>\n<pre><code>const gcd = (x: number, y: number): number => {\n  if (y === 0) return x;\n  return gcd(y, x % y)\n}\n\nconsole.log(gcd(12, 18));\n</code></pre>\n","markdown":"\n## Write a program to find gcd of two numbers by recursion\n\nGCD (Greatest Common Divisor) of two numbers is the largest number that divides both of them. A simple way to find GCD is to factorize both numbers and multiply common factors.\r\n\r\n```\r\nInput  : 12 18\r\nOutput : 6\r\n```\n\n---\n\n<CodeBlock slug=\"find-gcd-of-two-numbers-by-recursion\" >\n\n```js\nfunction greatestCommonDenominator(a, b) {\n\t// the bigger number is always divided by the smaller one\n\tif (b === 0) return a;\n\n\t// recursively call the function\n\treturn greatestCommonDenominator(b, a % b);\n}\n\n//display greatest common denominator of 12 and 18\nconsole.log(greatestCommonDenominator(12, 18));\n```\n\n```ts\nconst gcd = (x: number, y: number): number => {\n  if (y === 0) return x;\n  return gcd(y, x % y)\n}\n\nconsole.log(gcd(12, 18));\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2023-01-02T18:16:18Z"}