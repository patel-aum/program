{"slug":"find-sum-of-squares-of-numbers-by-recursion","title":"Find sum of squares of numbers by recursion","trackId":481,"tags":["C","Java","JavaScript","Kotlin","Ruby","TypeScript","Python","PHP"],"contributors":["joao-vitor-souza","harshraj8843","Ipankaj07","ridsuteri","Ritesh-Dabral","kangjung","UsmanFani","AthiraKadampatta"],"contentHtml":"<h2>Write a program to find sum of squares of numbers by recursion</h2>\n<pre><code>Input  : 1 2 3 4 5\r\nOutput : 55\n</code></pre>\n<hr>\n<pre><code>#include &#x3C;stdio.h>\n\nlong long int recursiveSqSum(int *arr, int index){\n    if(index&#x3C;0) return 0;\n    long long int val = recursiveSqSum(arr, index-1);\n    return val + (arr[index]*arr[index]);\n}\n\nint main() {\n    int input[] = {1,2,3,4,5};\n    long long int size = sizeof(input)/sizeof(input[0]);\n    printf(\"%lld\",recursiveSqSum(input, size-1));\n    return 0;\n}\n</code></pre>\n<pre><code>import java.util.Arrays;\n\nclass FindSumOfSquaresOfNumbersByRecursion {\n    public static void main(String[] args) {\n        String input = \"1 2 3 4 5\";\n        int[] arr = Arrays.stream(input.split(\" \")).mapToInt(Integer::parseInt).toArray();\n        int n = arr.length;\n        System.out.println(\"Result : \" + sumOfSquares(arr, n)); // 55\n    }\n\n    private static int sumOfSquares(int[] arr, int n) {\n        if (n == 0) {\n            return 0;\n        }\n        return (arr[n - 1] * arr[n - 1]) + sumOfSquares(arr, n - 1);\n    }\n}\n</code></pre>\n<pre><code>function FindSumOfSquaresOfNumbersByRecursion(number) {\n\tif (number.split(' ').length &#x3C;= 1) {\n\t\treturn Number(number.split(' ',1)) ** 2;\n\t}\n\treturn (Number(number.split(' ',1)) ** 2) + FindSumOfSquaresOfNumbersByRecursion(number.substring(number.indexOf(' ')+1, number.length));\n}\n\nlet number = \"1 2 3 4 5\";\nconsole.log('Input  :', number);\nconsole.log('Output :', FindSumOfSquaresOfNumbersByRecursion(number));\n</code></pre>\n<pre><code>class FindSumOfSquaresOfNumbersByRecursion {\n    fun sumOfSquares(nums: IntArray): Int {\n        return recursiveSum(nums, 0)\n    }\n\n    private fun recursiveSum(nums: IntArray, index: Int): Int {\n        if (index > nums.lastIndex) return 0\n        return nums[index] * nums[index] + recursiveSum(nums, index + 1)\n    }\n\n}\n</code></pre>\n<pre><code># frozen_string_literal: true\n\nputs 'This program calculates the sum of squares of numbers.'\nputs 'Enter the numbers separated by spaces'\n\ninput_array = gets.chomp.split(' ').map(&#x26;:to_i)\n\nputs \"Sum of squares is #{input_array.sum { |num| num * num }}\"\n</code></pre>\n<pre><code>function sum_sq(array:any) {\n  var sum = 0, \n      i = array.length;\n  while (i--) \n   sum += Math.pow(array[i], 2);\n  return sum;\n}\n \nconsole.log(sum_sq([0,1,2,3,4,5]));\n</code></pre>\n<pre><code>x = input(\"Enter the integers in string form : \").replace(\" \", \"\")\r\n\r\n\r\ndef squarer(x):\r\n    if int(x) &#x3C; 10:\r\n        return x**2\r\n    first_digit = int(str(x)[0])\r\n    return first_digit**2 + squarer(int(str(x)[1:]))\r\n\r\n\r\nprint(squarer(x))\n</code></pre>\n<pre><code>&#x3C;?php\n\nfunction recursiveSum($numbers)\n{\n    if (count($numbers) == 1) {\n        return pow((int) $numbers[0], 2);\n    } else {\n        return pow($numbers[0], 2) + recursiveSum(array_slice($numbers, 1));\n    }\n}\n\n\n$numbers = explode(\" \", readline());\n\necho recursiveSum($numbers) . \"\\n\";\n\n?>\n</code></pre>\n","markdown":"\n## Write a program to find sum of squares of numbers by recursion\n\n```\r\nInput  : 1 2 3 4 5\r\nOutput : 55\r\n```\n\n---\n\n<CodeBlock slug=\"find-sum-of-squares-of-numbers-by-recursion\" >\n\n```c\n#include <stdio.h>\n\nlong long int recursiveSqSum(int *arr, int index){\n    if(index<0) return 0;\n    long long int val = recursiveSqSum(arr, index-1);\n    return val + (arr[index]*arr[index]);\n}\n\nint main() {\n    int input[] = {1,2,3,4,5};\n    long long int size = sizeof(input)/sizeof(input[0]);\n    printf(\"%lld\",recursiveSqSum(input, size-1));\n    return 0;\n}\n```\n\n```java\nimport java.util.Arrays;\n\nclass FindSumOfSquaresOfNumbersByRecursion {\n    public static void main(String[] args) {\n        String input = \"1 2 3 4 5\";\n        int[] arr = Arrays.stream(input.split(\" \")).mapToInt(Integer::parseInt).toArray();\n        int n = arr.length;\n        System.out.println(\"Result : \" + sumOfSquares(arr, n)); // 55\n    }\n\n    private static int sumOfSquares(int[] arr, int n) {\n        if (n == 0) {\n            return 0;\n        }\n        return (arr[n - 1] * arr[n - 1]) + sumOfSquares(arr, n - 1);\n    }\n}\n```\n\n```js\nfunction FindSumOfSquaresOfNumbersByRecursion(number) {\n\tif (number.split(' ').length <= 1) {\n\t\treturn Number(number.split(' ',1)) ** 2;\n\t}\n\treturn (Number(number.split(' ',1)) ** 2) + FindSumOfSquaresOfNumbersByRecursion(number.substring(number.indexOf(' ')+1, number.length));\n}\n\nlet number = \"1 2 3 4 5\";\nconsole.log('Input  :', number);\nconsole.log('Output :', FindSumOfSquaresOfNumbersByRecursion(number));\n```\n\n```kt\nclass FindSumOfSquaresOfNumbersByRecursion {\n    fun sumOfSquares(nums: IntArray): Int {\n        return recursiveSum(nums, 0)\n    }\n\n    private fun recursiveSum(nums: IntArray, index: Int): Int {\n        if (index > nums.lastIndex) return 0\n        return nums[index] * nums[index] + recursiveSum(nums, index + 1)\n    }\n\n}\n```\n\n```rb\n# frozen_string_literal: true\n\nputs 'This program calculates the sum of squares of numbers.'\nputs 'Enter the numbers separated by spaces'\n\ninput_array = gets.chomp.split(' ').map(&:to_i)\n\nputs \"Sum of squares is #{input_array.sum { |num| num * num }}\"\n```\n\n```ts\nfunction sum_sq(array:any) {\n  var sum = 0, \n      i = array.length;\n  while (i--) \n   sum += Math.pow(array[i], 2);\n  return sum;\n}\n \nconsole.log(sum_sq([0,1,2,3,4,5]));\n```\n\n```py\nx = input(\"Enter the integers in string form : \").replace(\" \", \"\")\r\n\r\n\r\ndef squarer(x):\r\n    if int(x) < 10:\r\n        return x**2\r\n    first_digit = int(str(x)[0])\r\n    return first_digit**2 + squarer(int(str(x)[1:]))\r\n\r\n\r\nprint(squarer(x))\n```\n\n```php\n<?php\n\nfunction recursiveSum($numbers)\n{\n    if (count($numbers) == 1) {\n        return pow((int) $numbers[0], 2);\n    } else {\n        return pow($numbers[0], 2) + recursiveSum(array_slice($numbers, 1));\n    }\n}\n\n\n$numbers = explode(\" \", readline());\n\necho recursiveSum($numbers) . \"\\n\";\n\n?>\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2022-12-06T23:27:40Z"}