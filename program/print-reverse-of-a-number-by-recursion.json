{"slug":"print-reverse-of-a-number-by-recursion","title":"Print reverse of a number by recursion","trackId":5554,"tags":["C++","Java","JavaScript","Ruby","TypeScript","Python","PHP"],"contributors":["UrielOfir","grraghav120","jfinley6","chinne","anandfresh","harshraj8843"],"contentHtml":"<h2>Write a program to print reverse of a number by recursion</h2>\n<p>Reverse of a number is the number obtained by reversing the digits of the original number. For example, reverse of 123 is 321. The recursive solution is to print the last digit of the number and then call the function recursively to print the remaining digits.</p>\n<pre><code>Input  : 123\r\nOutput : 321\n</code></pre>\n<hr>\n<pre><code>#include &#x3C;bits/stdc++.h>\nusing namespace std;\nvoid reverseANumber(int n){\n    if(n&#x3C;=9) cout&#x3C;&#x3C;n&#x3C;&#x3C;'\\n';\n    else{\n        cout&#x3C;&#x3C;(n%10);\n        reverseANumber(n/10);\n    }    \n}\nint main(){\n    int num; //123\n    cin>>num;\n    reverseANumber(num); //321\n    return 0;\n}\n\n//Contributed by Raghav Garg\n</code></pre>\n<pre><code>import java.util.Scanner;\nclass RecursionReverse\n{\n   public static void reverseMethod(int number) {\n       if (number &#x3C; 10) {\n\t   System.out.println(number);\n\t   return;\n       }\n       else {\n           System.out.print(number % 10);\n           reverseMethod(number/10);\n       }\n   }\n   public static void main(String args[])\n   {\n\tint num=0;\n\tSystem.out.print(\"Please enter a number : \");\n\tScanner in = new Scanner(System.in);\n\tnum = in.nextInt();\n\tSystem.out.print(\"Reverse of the given number is: \");\n\treverseMethod(num);\n\tSystem.out.println();\n   }\n}\n</code></pre>\n<pre><code>const reverseNum = (num) => {\n   return num &#x3C; 10 ? String(num) : String(num % 10) + reverseNum (Math .floor (num / 10));\n}\n\nconsole.log (reverseNum (8675309));\n</code></pre>\n<pre><code>def reverseNum num \n    return num if num.to_s.length &#x3C;= 1\n\n    reversedNum = reverseNum(num.to_s[1..-1])\n    reversedNum += num.to_s[0]\n    reversedNum\nend\n\nputs reverseNum 12345\n</code></pre>\n<pre><code>const reverseNum = (num: number): string => {\n   return num &#x3C; 10 ? String(num) : String(num % 10) + reverseNum (Math .floor (num / 10));\n}\n\nconsole.log (reverseNum (8675309));\n</code></pre>\n<pre><code>def reverse_num(num: int, reversed_num: int = 0) -> int:\n    # Base case: if the number is 0, there are no more digits to reverse\n    if num == 0:\n        return reversed_num\n\n    # Get the last digit of the number\n    last_digit = num % 10\n\n    # Add the last digit to the beginning of the reversed number\n    reversed_num = reversed_num * 10 + last_digit\n\n    # Recursively call the function to reverse the remaining digits\n    return reverse_num(num // 10, reversed_num)\n\n\n# Test the function with a few examples\nprint(reverse_num(123))  # should print 321\nprint(reverse_num(7331))  # should print 1337\nprint(reverse_num(87124389372498))  # should print 89427398342178\n</code></pre>\n<pre><code>&#x3C;?php\n\nfunction reverseNumber($num)\n{\n $n = strlen($num);\n if($n === 1)\n   {\n    return $num;\n   }\n else\n   {\n   $n--;\n   return reverseNumber(substr($num,1, $n)) . substr($num, 0, 1);\n   }\n}\nprint_r(reverseNumber(123).\"\\n\");\n\n?>\n</code></pre>\n","markdown":"\n## Write a program to print reverse of a number by recursion\n\nReverse of a number is the number obtained by reversing the digits of the original number. For example, reverse of 123 is 321. The recursive solution is to print the last digit of the number and then call the function recursively to print the remaining digits.\r\n\r\n```\r\nInput  : 123\r\nOutput : 321\r\n```\n\n---\n\n<CodeBlock slug=\"print-reverse-of-a-number-by-recursion\" >\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nvoid reverseANumber(int n){\n    if(n<=9) cout<<n<<'\\n';\n    else{\n        cout<<(n%10);\n        reverseANumber(n/10);\n    }    \n}\nint main(){\n    int num; //123\n    cin>>num;\n    reverseANumber(num); //321\n    return 0;\n}\n\n//Contributed by Raghav Garg\n```\n\n```java\nimport java.util.Scanner;\nclass RecursionReverse\n{\n   public static void reverseMethod(int number) {\n       if (number < 10) {\n\t   System.out.println(number);\n\t   return;\n       }\n       else {\n           System.out.print(number % 10);\n           reverseMethod(number/10);\n       }\n   }\n   public static void main(String args[])\n   {\n\tint num=0;\n\tSystem.out.print(\"Please enter a number : \");\n\tScanner in = new Scanner(System.in);\n\tnum = in.nextInt();\n\tSystem.out.print(\"Reverse of the given number is: \");\n\treverseMethod(num);\n\tSystem.out.println();\n   }\n}\n```\n\n```js\nconst reverseNum = (num) => {\n   return num < 10 ? String(num) : String(num % 10) + reverseNum (Math .floor (num / 10));\n}\n\nconsole.log (reverseNum (8675309));\n```\n\n```rb\ndef reverseNum num \n    return num if num.to_s.length <= 1\n\n    reversedNum = reverseNum(num.to_s[1..-1])\n    reversedNum += num.to_s[0]\n    reversedNum\nend\n\nputs reverseNum 12345\n```\n\n```ts\nconst reverseNum = (num: number): string => {\n   return num < 10 ? String(num) : String(num % 10) + reverseNum (Math .floor (num / 10));\n}\n\nconsole.log (reverseNum (8675309));\n```\n\n```py\ndef reverse_num(num: int, reversed_num: int = 0) -> int:\n    # Base case: if the number is 0, there are no more digits to reverse\n    if num == 0:\n        return reversed_num\n\n    # Get the last digit of the number\n    last_digit = num % 10\n\n    # Add the last digit to the beginning of the reversed number\n    reversed_num = reversed_num * 10 + last_digit\n\n    # Recursively call the function to reverse the remaining digits\n    return reverse_num(num // 10, reversed_num)\n\n\n# Test the function with a few examples\nprint(reverse_num(123))  # should print 321\nprint(reverse_num(7331))  # should print 1337\nprint(reverse_num(87124389372498))  # should print 89427398342178\n```\n\n```php\n<?php\n\nfunction reverseNumber($num)\n{\n $n = strlen($num);\n if($n === 1)\n   {\n    return $num;\n   }\n else\n   {\n   $n--;\n   return reverseNumber(substr($num,1, $n)) . substr($num, 0, 1);\n   }\n}\nprint_r(reverseNumber(123).\"\\n\");\n\n?>\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2022-12-27T21:52:24Z"}