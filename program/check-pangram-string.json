{"slug":"check-pangram-string","title":"Check Pangram String","trackId":1260,"tags":["Java","JavaScript","Ruby","TypeScript","Python","GO"],"contributors":["joao-vitor-souza","harshraj8843","amoghrajesh","MufaddalHakim","Denice-S","rakibul-islam-raju","Jordan6794","MetalOoze05"],"contentHtml":"<h2>Write a program to check pangram string</h2>\n<p>A pangram is a sentence containing every letter in the English Alphabet.</p>\n<pre><code>Input  : The quick brown fox jumps over the lazy dog\r\nOutput : Pangram sentence\n</code></pre>\n<hr>\n<pre><code>import java.util.*;\n\npublic class CheckPangramString {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String str = sc.nextLine();\n        boolean[] mark = new boolean[26];\n\n        for (int i = 0; i &#x3C; str.length(); i++) {\n            if ('A' &#x3C;= str.charAt(i) &#x26;&#x26; str.charAt(i) &#x3C;= 'Z') {\n                mark[str.charAt(i) - 'A'] = true;\n            } else if ('a' &#x3C;= str.charAt(i) &#x26;&#x26; str.charAt(i) &#x3C;= 'z') {\n                mark[str.charAt(i) - 'a'] = true;\n            }\n        }\n\n        for (int i = 0; i &#x3C; 26; i++) {\n            if (!mark[i]) {\n                System.out.println(\"Not a pangram\");\n                sc.close();\n                return;\n            }\n        }\n\n        System.out.println(\"Pangram Sentence\");\n        sc.close();\n    }\n}\n</code></pre>\n<pre><code>function checkPangramString(string){\n    let isPangram = false;\n\n    const lowerCasedSentence = string.toLowerCase();\n    const letters = lowerCasedSentence.match(/[a-z]/g);\n    const uniqueLetters = new Set(letters) \n\n    if (uniqueLetters.size === 26){\n        isPangram = true\n    }\n\n    if(isPangram){\n        return \"Pangram sentence\";\n    } else {\n        return \"Not Pangram sentence\";\n    }\n}\n</code></pre>\n<pre><code>def pangram (string)\n   # downcase the string, scan it for letters of the alphabet (a-z), remove duplicates and examine the length of the returned array\n   if string.downcase.scan(/[a-z]/).uniq.length == 26 \n     puts \"Pangram sentence\"\n   else\n     puts \"Not a Pangram sentence\"\n   end\nend\n</code></pre>\n<pre><code>/**\n * \n * @param {string} string - the string to be checked\n * @returns {string} if the string is Pangram or not\n */\n\nconst checkPangramString = (string: string) => {\n    string = string.toLowerCase();\n\n    let len: number = string.length;\n    const alphabets: string = \"abcdefghijklmnopqrstuvwxyz\";\n    const aplhabetsArray: string[] = alphabets.split(\"\");\n\n    for (let i: number = 0; i &#x3C; len; i++) {\n        const elem = string[i];\n        const index = aplhabetsArray.indexOf(elem);\n\n        if (index !== -1) {\n            aplhabetsArray.splice(index, 1);\n        }\n    }\n\n    if (!aplhabetsArray.length === true) {\n        return \"Pangram sentence\";\n    } else {\n        return \"Not a pangram sentence\";\n    };\n};\n\n// Test Case\nconsole.log(checkPangramString(\"The quick brown fox jumps over the lazy dog\"));\n// Returns Pangram sentence\n</code></pre>\n<pre><code>import string\n\nalphabet = set(string.ascii_lowercase)\n\n\ndef ispangram(str):\n    return sum(1 for i in set(str) if 96 &#x3C; ord(i) &#x3C;= 122) == 26\n\n\nstring = input()\nif ispangram(string) == True:\n    print(\"Pangram sentence\")\nelse:\n    print(\"Not pangram sentence\")\n</code></pre>\n<pre><code>package main\n\nimport \"fmt\"\n\nfunc checkIfPangram(s string) bool {\n\tif len(s) &#x3C; 26 {\n\t\treturn false\n\t}\n\tvar data = make(map[rune]bool)\n\tfor _, i := range s {\n\t\tdata[i] = true\n\t}\n\treturn len(data) == 26\n}\n\nfunc main() {\n\tvar s string\n\tfmt.Scanln(&#x26;s)\n\n\tisPangram := checkIfPangram(s)\n\n\tif isPangram {\n\t\tfmt.Printf(\"%s is a pangram\\n\", s)\n\t} else {\n\t\tfmt.Printf(\"%s is not a pangram\\n\", s)\n\t}\n}\n</code></pre>\n","markdown":"\n## Write a program to check pangram string\n\nA pangram is a sentence containing every letter in the English Alphabet.\r\n\r\n```\r\nInput  : The quick brown fox jumps over the lazy dog\r\nOutput : Pangram sentence\r\n```\n\n---\n\n<CodeBlock slug=\"check-pangram-string\" >\n\n```java\nimport java.util.*;\n\npublic class CheckPangramString {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String str = sc.nextLine();\n        boolean[] mark = new boolean[26];\n\n        for (int i = 0; i < str.length(); i++) {\n            if ('A' <= str.charAt(i) && str.charAt(i) <= 'Z') {\n                mark[str.charAt(i) - 'A'] = true;\n            } else if ('a' <= str.charAt(i) && str.charAt(i) <= 'z') {\n                mark[str.charAt(i) - 'a'] = true;\n            }\n        }\n\n        for (int i = 0; i < 26; i++) {\n            if (!mark[i]) {\n                System.out.println(\"Not a pangram\");\n                sc.close();\n                return;\n            }\n        }\n\n        System.out.println(\"Pangram Sentence\");\n        sc.close();\n    }\n}\n```\n\n```js\nfunction checkPangramString(string){\n    let isPangram = false;\n\n    const lowerCasedSentence = string.toLowerCase();\n    const letters = lowerCasedSentence.match(/[a-z]/g);\n    const uniqueLetters = new Set(letters) \n\n    if (uniqueLetters.size === 26){\n        isPangram = true\n    }\n\n    if(isPangram){\n        return \"Pangram sentence\";\n    } else {\n        return \"Not Pangram sentence\";\n    }\n}\n```\n\n```rb\ndef pangram (string)\n   # downcase the string, scan it for letters of the alphabet (a-z), remove duplicates and examine the length of the returned array\n   if string.downcase.scan(/[a-z]/).uniq.length == 26 \n     puts \"Pangram sentence\"\n   else\n     puts \"Not a Pangram sentence\"\n   end\nend\n```\n\n```ts\n/**\n * \n * @param {string} string - the string to be checked\n * @returns {string} if the string is Pangram or not\n */\n\nconst checkPangramString = (string: string) => {\n    string = string.toLowerCase();\n\n    let len: number = string.length;\n    const alphabets: string = \"abcdefghijklmnopqrstuvwxyz\";\n    const aplhabetsArray: string[] = alphabets.split(\"\");\n\n    for (let i: number = 0; i < len; i++) {\n        const elem = string[i];\n        const index = aplhabetsArray.indexOf(elem);\n\n        if (index !== -1) {\n            aplhabetsArray.splice(index, 1);\n        }\n    }\n\n    if (!aplhabetsArray.length === true) {\n        return \"Pangram sentence\";\n    } else {\n        return \"Not a pangram sentence\";\n    };\n};\n\n// Test Case\nconsole.log(checkPangramString(\"The quick brown fox jumps over the lazy dog\"));\n// Returns Pangram sentence\n```\n\n```py\nimport string\n\nalphabet = set(string.ascii_lowercase)\n\n\ndef ispangram(str):\n    return sum(1 for i in set(str) if 96 < ord(i) <= 122) == 26\n\n\nstring = input()\nif ispangram(string) == True:\n    print(\"Pangram sentence\")\nelse:\n    print(\"Not pangram sentence\")\n```\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc checkIfPangram(s string) bool {\n\tif len(s) < 26 {\n\t\treturn false\n\t}\n\tvar data = make(map[rune]bool)\n\tfor _, i := range s {\n\t\tdata[i] = true\n\t}\n\treturn len(data) == 26\n}\n\nfunc main() {\n\tvar s string\n\tfmt.Scanln(&s)\n\n\tisPangram := checkIfPangram(s)\n\n\tif isPangram {\n\t\tfmt.Printf(\"%s is a pangram\\n\", s)\n\t} else {\n\t\tfmt.Printf(\"%s is not a pangram\\n\", s)\n\t}\n}\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2022-12-02T06:03:31Z"}