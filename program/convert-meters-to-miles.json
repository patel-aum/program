{"slug":"convert-meters-to-miles","title":"Convert meters to miles","trackId":277,"tags":["C","Java","JavaScript","Ruby","TypeScript","Python","GO","PHP","Rust"],"contributors":["joao-vitor-souza","kangjung","sudiptog81","chinmaykumbhare","Anushka-codergirl","MadhuS-1605","MusabMuhie","NidishM","madil89","harshraj8843"],"contentHtml":"<h2>Write a program to convert meters to miles</h2>\n<p>1 mile = 1609 meters</p>\n<pre><code>Input  : 8046.72\r\nOutput : 5\n</code></pre>\n<hr>\n<pre><code>#include &#x3C;stdio.h>\n#include &#x3C;math.h>\n\nint main()\n{\n    // Declare variables\n    int meter;\n    double miles;\n\n    printf(\"Enter distance in meters : \");\n    scanf(\"%d\", &#x26;meter);\n\n    // Convert meter to miles\n    miles = meter * 0.00062137119;\n\n    // Using Round off  - nearest integer value\n    int result = round(miles);\n\n    // Distance in miles\n    printf(\"\\nDistance in miles : %d\\n\", result);\n\n    return 0;\n}\n</code></pre>\n<pre><code>import java.util.Scanner;\n\npublic class ConvertMetersToMiles {\n\tpublic static void main(String[] args) throws Exception {\n\t\tSystem.out.print(\"input   : \");\n\t\tScanner sc = new Scanner(System.in);\n\t\tDouble meter = sc.nextDouble();\n\t\tsc.close();\n\t\tSystem.out.println(\"ouput   : \" + Math.round(meter / 1609));\n\t}\n}\n</code></pre>\n<pre><code>// program to convert meters to miles (1 mile = 1609.344 meters)\n\nfunction convertMetersToMiles(meters) {\n  return meters / 1609.344;\n}\n\n// const userInput=prompt('Input: ')\n// alert(convertMetersToMiles(userInput))\n\nconst userInput = 8046.72;\nconsole.log(\"input  : \" + userInput);\nconsole.log(\"output : \" + convertMetersToMiles(userInput));\n</code></pre>\n<pre><code>def convertMetersToMiles(meters)\n  meters / 1609.344\nend\n\ndef strip_trailing_zero(n)\n  n.to_s.sub(/\\.?0+$/, '')\nend\n\nprint 'Input  : '\nmeters = gets.chomp.to_f\nmiles = convertMetersToMiles(meters)\nputs \"Output : #{strip_trailing_zero(miles)}\"\n</code></pre>\n<pre><code>export const convertMetersToMiles = (meters: number): number => meters / 1609.344;\n\nconst meters = 8046.72;\nconsole.log(\"Input  : \" + meters);\nconsole.log(\"Output : \" + convertMetersToMiles(meters));\n</code></pre>\n<pre><code># --------- Program to convert meters to miles ---------#\n\n# Covert meters to miles (1 mile = 1609 meters)\ndef metersToMiles(meter_value):\n    return int(meter_value // 1609)\n\n\n# User input\ninput_in_meters = float(input(\"Input  : \"))\noutput_in_miles = metersToMiles(input_in_meters)\nprint(\"Output :\", output_in_miles)\n</code></pre>\n<pre><code>package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar meter int\n\tfmt.Println(\"Enter meter(s):\")\n  fmt.Scan(&#x26;meter)\n  fmt.Println(\"Mile(s) for given meter is:\", (float32(meter) / 1609))\n}\n</code></pre>\n<pre><code>&#x3C;?php\n\nfscanf(STDIN, \"%f\", $meters);\n$miles = $meters / 1609;\n\necho round($miles, 2) . \"\\n\";\n\n?>\n</code></pre>\n<pre><code>use std::io;\nuse std::process;\n\nfn main() {\n    let mut input = String::new();\n    println!(\"Please enter meters: \");\n    io::stdin().read_line(&#x26;mut input).unwrap();\n    let meters = convert_str_to_float(input);\n    let miles = convert_to_miles(meters);\n    println!(\"Miles: {}\", miles);\n}\n\nfn convert_str_to_float(input: String) -> f32 {\n    input.trim().parse::&#x3C;f32>().unwrap_or_else(|_| {\n        eprintln!(\"- Please enter a valid input!\");\n        drop(input);\n        process::exit(1);\n    })\n}\n\nfn convert_to_miles(meters: f32) -> f32 {\n    meters * 0.0006213712\n}\n</code></pre>\n","markdown":"\n## Write a program to convert meters to miles\n\n1 mile = 1609 meters\r\n\r\n```\r\nInput  : 8046.72\r\nOutput : 5\r\n```\n\n---\n\n<CodeBlock slug=\"convert-meters-to-miles\" >\n\n```c\n#include <stdio.h>\n#include <math.h>\n\nint main()\n{\n    // Declare variables\n    int meter;\n    double miles;\n\n    printf(\"Enter distance in meters : \");\n    scanf(\"%d\", &meter);\n\n    // Convert meter to miles\n    miles = meter * 0.00062137119;\n\n    // Using Round off  - nearest integer value\n    int result = round(miles);\n\n    // Distance in miles\n    printf(\"\\nDistance in miles : %d\\n\", result);\n\n    return 0;\n}\n```\n\n```java\nimport java.util.Scanner;\n\npublic class ConvertMetersToMiles {\n\tpublic static void main(String[] args) throws Exception {\n\t\tSystem.out.print(\"input   : \");\n\t\tScanner sc = new Scanner(System.in);\n\t\tDouble meter = sc.nextDouble();\n\t\tsc.close();\n\t\tSystem.out.println(\"ouput   : \" + Math.round(meter / 1609));\n\t}\n}\n```\n\n```js\n// program to convert meters to miles (1 mile = 1609.344 meters)\n\nfunction convertMetersToMiles(meters) {\n  return meters / 1609.344;\n}\n\n// const userInput=prompt('Input: ')\n// alert(convertMetersToMiles(userInput))\n\nconst userInput = 8046.72;\nconsole.log(\"input  : \" + userInput);\nconsole.log(\"output : \" + convertMetersToMiles(userInput));\n```\n\n```rb\ndef convertMetersToMiles(meters)\n  meters / 1609.344\nend\n\ndef strip_trailing_zero(n)\n  n.to_s.sub(/\\.?0+$/, '')\nend\n\nprint 'Input  : '\nmeters = gets.chomp.to_f\nmiles = convertMetersToMiles(meters)\nputs \"Output : #{strip_trailing_zero(miles)}\"\n```\n\n```ts\nexport const convertMetersToMiles = (meters: number): number => meters / 1609.344;\n\nconst meters = 8046.72;\nconsole.log(\"Input  : \" + meters);\nconsole.log(\"Output : \" + convertMetersToMiles(meters));\n```\n\n```py\n# --------- Program to convert meters to miles ---------#\n\n# Covert meters to miles (1 mile = 1609 meters)\ndef metersToMiles(meter_value):\n    return int(meter_value // 1609)\n\n\n# User input\ninput_in_meters = float(input(\"Input  : \"))\noutput_in_miles = metersToMiles(input_in_meters)\nprint(\"Output :\", output_in_miles)\n```\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar meter int\n\tfmt.Println(\"Enter meter(s):\")\n  fmt.Scan(&meter)\n  fmt.Println(\"Mile(s) for given meter is:\", (float32(meter) / 1609))\n}\n```\n\n```php\n<?php\n\nfscanf(STDIN, \"%f\", $meters);\n$miles = $meters / 1609;\n\necho round($miles, 2) . \"\\n\";\n\n?>\n```\n\n```rs\nuse std::io;\nuse std::process;\n\nfn main() {\n    let mut input = String::new();\n    println!(\"Please enter meters: \");\n    io::stdin().read_line(&mut input).unwrap();\n    let meters = convert_str_to_float(input);\n    let miles = convert_to_miles(meters);\n    println!(\"Miles: {}\", miles);\n}\n\nfn convert_str_to_float(input: String) -> f32 {\n    input.trim().parse::<f32>().unwrap_or_else(|_| {\n        eprintln!(\"- Please enter a valid input!\");\n        drop(input);\n        process::exit(1);\n    })\n}\n\nfn convert_to_miles(meters: f32) -> f32 {\n    meters * 0.0006213712\n}\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2022-12-03T03:54:01Z"}