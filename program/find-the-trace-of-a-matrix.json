{"slug":"find-the-trace-of-a-matrix","title":"Find the trace of a matrix","trackId":4589,"tags":["C","C++","Java","JavaScript","Python","PHP"],"contributors":["joao-vitor-souza","harshraj8843","codingkush","arkbuilder117","savi001","Dhana-s","BiscuitCandy"],"contentHtml":"<h2>Write a program to find the trace of a matrix</h2>\n<p>The trace of a square matrix is the sum of the elements on the main diagonal (from the upper left to the lower right).</p>\n<pre><code>Input  :\n1 2 3\n4 5 6\n7 8 9\n\nOutput :\n15\n</code></pre>\n<hr>\n<pre><code>#include &#x3C;stdio.h>\n\nint main()\n\n{\n\n\tint i, j, rows, columns, trace = 0;\n\n\tprintf(\"Enter Matrix Rows and Columns =  \");\n\n\tscanf(\"%d %d\", &#x26;rows, &#x26;columns);\n\n\tint Tra_arr[rows][columns];\n\n\tprintf(\"Please Enter the Matrix Items =  \\n\");\n\n\tfor (i = 0; i &#x3C; rows; i++)\n\n\t{\n\n\t\tfor (j = 0; j &#x3C; columns; j++)\n\n\t\t{\n\n\t\t\tscanf(\"%d\", &#x26;Tra_arr[i][j]);\n\n\t\t}\n\n\t}\n\n\tfor (i = 0; i &#x3C; rows; i++)\n\n\t{\n\n\t\tfor (j = 0; j &#x3C; columns; j++)\n\n\t\t{\n\n\t\t\tif (i == j)\n\n\t\t\t{\n\n\t\t\t\ttrace = trace + Tra_arr[i][j];\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tprintf(\"The Trace Of the Matrix = %d\\n\", trace);\n\n}\n</code></pre>\n<pre><code>#include &#x3C;iostream>\n\nusing namespace std;\n\nint main()\n\n{\n\n    int i , j , sum = 0 , a[3][3] ;\n\n    cout &#x3C;&#x3C; \"Trace matrix in 2D array \" &#x3C;&#x3C; endl ;\n\n    cout &#x3C;&#x3C; \"Enter Array Elements : \" &#x3C;&#x3C; endl ;\n\n    // loop for taking inputs in array\n\n    for (i = 0 ; i &#x3C; 3 ; i++)\n\n    {\n\n        for (j = 0 ; j &#x3C; 3 ; j++)\n\n        {\n\n            cin >> a[i][j] ;\n\n        }\n\n    }\n\n    // loop for printing array elements\n\n     for (i = 0 ; i &#x3C; 3 ; i++)\n\n    {\n\n        for (j = 0 ; j &#x3C; 3 ; j++)\n\n        {\n\n           cout &#x3C;&#x3C;  a[i][j]  &#x3C;&#x3C; \" \";\n\n        }\n\n        cout &#x3C;&#x3C; endl ;\n\n    }\n\n    //loop for finding trace of matrix\n\n    for(i = 0 ; i &#x3C; 3 ; i++)\n\n    {\n\n        for (j = 0 ; j &#x3C; 3 ; j++)\n\n        {\n\n            if (i==j)\n\n            {\n\n                sum+=a[i][j] ;\n\n            }\n\n        }\n\n    }\n\n    cout &#x3C;&#x3C; \"Trace of matrix : \" &#x3C;&#x3C; sum &#x3C;&#x3C; endl ;\n\n    return 0;\n\n}\n</code></pre>\n<pre><code>import java.util.Scanner;\n\npublic class FindTheTraceOfAMatrix {\n  private static Scanner scanner_input;\n\n  public static void main(String[] args) {\n\n    int i = 0, j, dimension, trace = 0;\n    scanner_input = new Scanner(System.in);\n    System.out.print(\"Enter Matrix Dimension:  \");\n    dimension = scanner_input.nextInt();\n    int[][] matrix_array = new int[dimension][dimension];\n    System.out.println(\"Enter the Matrix Items:  \");\n    while (i &#x3C; dimension) {\n      j = 0;\n      while (j &#x3C; dimension) {\n        matrix_array[i][j] = scanner_input.nextInt();\n        j++;\n      }\n      i++;\n    }\n\n    i = 0;\n    while (i &#x3C; dimension) {\n      j = 0;\n      while (j &#x3C; dimension) {\n        if (i == j) {\n          trace = trace + matrix_array[i][j];\n        }\n        j++;\n      }\n      i++;\n    }\n    scanner_input.close();\n    System.out.println(\"\\nThe Trace Of the Matrix is :  \" + trace);\n\n  }\n}\n</code></pre>\n<pre><code>import * as readLine from 'readline';\n\nlet arr = [];\n\nconst rl = readLine.createInterface({\n    input: process.stdin,\n    output: process.stdout\n});\n\nconst takeInput = () => {\n    rl.question('', line => {\n        if(line.length == 0) {\n            rl.close();\n            console.log(findTrace(arr));\n            return;\n        }\n        let row = line.split(' ');\n        arr.push(row);\n        takeInput();\n    });\n}\n\nconst findTrace = (arr) => {\n    let total = 0;\n    for(let i = 0; i &#x3C; arr.length; i++) {\n        total+=parseInt(arr[i][i]);\n    }\n    return total;\n}\n\nconsole.log('Input:');\ntakeInput();\n</code></pre>\n<pre><code>arr = []\n\ntry:\n    while True:\n        arr.append(list(map(int, input().split())))\nexcept:\n    pass\n\nsm = 0\n\nfor i in range(len(arr)):\n    sm += arr[i][i]\n\nprint(sm)\n</code></pre>\n<pre><code>//To find Trace of the given matrix\n&#x3C;html>\n&#x3C;head>\n&#x3C;title>PHP Program To find Trace of the given matrix&#x3C;/title>\n&#x3C;/head>\n&#x3C;body>\n&#x3C;?php\n// Elements of matrix a\n$a = array\n(\narray(1, 2, 3),\narray(4, 5, 6),\narray(7, 8, 9)\n);\n$n = count($a);\n$sum = 0;\n//Initially sum declare with 0;\necho(\"Original matrix is: &#x3C;/br>\");\n// To print Original matrix\nfor($i = 0; $i &#x3C; $n; $i++)\n{\nfor($j = 0; $j &#x3C; $n; $j++)\n{\necho ($a[$i][$j] . \" \" );\n}\necho(\"&#x3C;br>\");\n}\n//Calculates trace of given matrix\nfor($i = 0; $i &#x3C; $n; $i++)\n{\n$sum = $sum + $a[$i][$i];\n// To add diagonal elements a[0][0],a[1]a[1]\n}\necho \"Trace of the given matrix is: \".$sum;\n?>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n","markdown":"\n## Write a program to find the trace of a matrix\n\nThe trace of a square matrix is the sum of the elements on the main diagonal (from the upper left to the lower right).\n\n```\nInput  :\n1 2 3\n4 5 6\n7 8 9\n\nOutput :\n15\n```\n\n---\n\n<CodeBlock slug=\"find-the-trace-of-a-matrix\" >\n\n```c\n#include <stdio.h>\n\nint main()\n\n{\n\n\tint i, j, rows, columns, trace = 0;\n\n\tprintf(\"Enter Matrix Rows and Columns =  \");\n\n\tscanf(\"%d %d\", &rows, &columns);\n\n\tint Tra_arr[rows][columns];\n\n\tprintf(\"Please Enter the Matrix Items =  \\n\");\n\n\tfor (i = 0; i < rows; i++)\n\n\t{\n\n\t\tfor (j = 0; j < columns; j++)\n\n\t\t{\n\n\t\t\tscanf(\"%d\", &Tra_arr[i][j]);\n\n\t\t}\n\n\t}\n\n\tfor (i = 0; i < rows; i++)\n\n\t{\n\n\t\tfor (j = 0; j < columns; j++)\n\n\t\t{\n\n\t\t\tif (i == j)\n\n\t\t\t{\n\n\t\t\t\ttrace = trace + Tra_arr[i][j];\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tprintf(\"The Trace Of the Matrix = %d\\n\", trace);\n\n}\n```\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\nint main()\n\n{\n\n    int i , j , sum = 0 , a[3][3] ;\n\n    cout << \"Trace matrix in 2D array \" << endl ;\n\n    cout << \"Enter Array Elements : \" << endl ;\n\n    // loop for taking inputs in array\n\n    for (i = 0 ; i < 3 ; i++)\n\n    {\n\n        for (j = 0 ; j < 3 ; j++)\n\n        {\n\n            cin >> a[i][j] ;\n\n        }\n\n    }\n\n    // loop for printing array elements\n\n     for (i = 0 ; i < 3 ; i++)\n\n    {\n\n        for (j = 0 ; j < 3 ; j++)\n\n        {\n\n           cout <<  a[i][j]  << \" \";\n\n        }\n\n        cout << endl ;\n\n    }\n\n    //loop for finding trace of matrix\n\n    for(i = 0 ; i < 3 ; i++)\n\n    {\n\n        for (j = 0 ; j < 3 ; j++)\n\n        {\n\n            if (i==j)\n\n            {\n\n                sum+=a[i][j] ;\n\n            }\n\n        }\n\n    }\n\n    cout << \"Trace of matrix : \" << sum << endl ;\n\n    return 0;\n\n}\n```\n\n```java\nimport java.util.Scanner;\n\npublic class FindTheTraceOfAMatrix {\n  private static Scanner scanner_input;\n\n  public static void main(String[] args) {\n\n    int i = 0, j, dimension, trace = 0;\n    scanner_input = new Scanner(System.in);\n    System.out.print(\"Enter Matrix Dimension:  \");\n    dimension = scanner_input.nextInt();\n    int[][] matrix_array = new int[dimension][dimension];\n    System.out.println(\"Enter the Matrix Items:  \");\n    while (i < dimension) {\n      j = 0;\n      while (j < dimension) {\n        matrix_array[i][j] = scanner_input.nextInt();\n        j++;\n      }\n      i++;\n    }\n\n    i = 0;\n    while (i < dimension) {\n      j = 0;\n      while (j < dimension) {\n        if (i == j) {\n          trace = trace + matrix_array[i][j];\n        }\n        j++;\n      }\n      i++;\n    }\n    scanner_input.close();\n    System.out.println(\"\\nThe Trace Of the Matrix is :  \" + trace);\n\n  }\n}\n```\n\n```js\nimport * as readLine from 'readline';\n\nlet arr = [];\n\nconst rl = readLine.createInterface({\n    input: process.stdin,\n    output: process.stdout\n});\n\nconst takeInput = () => {\n    rl.question('', line => {\n        if(line.length == 0) {\n            rl.close();\n            console.log(findTrace(arr));\n            return;\n        }\n        let row = line.split(' ');\n        arr.push(row);\n        takeInput();\n    });\n}\n\nconst findTrace = (arr) => {\n    let total = 0;\n    for(let i = 0; i < arr.length; i++) {\n        total+=parseInt(arr[i][i]);\n    }\n    return total;\n}\n\nconsole.log('Input:');\ntakeInput();\n```\n\n```py\narr = []\n\ntry:\n    while True:\n        arr.append(list(map(int, input().split())))\nexcept:\n    pass\n\nsm = 0\n\nfor i in range(len(arr)):\n    sm += arr[i][i]\n\nprint(sm)\n```\n\n```php\n//To find Trace of the given matrix\n<html>\n<head>\n<title>PHP Program To find Trace of the given matrix</title>\n</head>\n<body>\n<?php\n// Elements of matrix a\n$a = array\n(\narray(1, 2, 3),\narray(4, 5, 6),\narray(7, 8, 9)\n);\n$n = count($a);\n$sum = 0;\n//Initially sum declare with 0;\necho(\"Original matrix is: </br>\");\n// To print Original matrix\nfor($i = 0; $i < $n; $i++)\n{\nfor($j = 0; $j < $n; $j++)\n{\necho ($a[$i][$j] . \" \" );\n}\necho(\"<br>\");\n}\n//Calculates trace of given matrix\nfor($i = 0; $i < $n; $i++)\n{\n$sum = $sum + $a[$i][$i];\n// To add diagonal elements a[0][0],a[1]a[1]\n}\necho \"Trace of the given matrix is: \".$sum;\n?>\n</body>\n</html>\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2022-12-02T06:03:31Z"}