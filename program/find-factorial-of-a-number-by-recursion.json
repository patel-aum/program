{"slug":"find-factorial-of-a-number-by-recursion","title":"Find factorial of a number by recursion","trackId":782,"tags":["C++","Java","JavaScript","Kotlin","Ruby","TypeScript","Python","PHP"],"contributors":["anandfresh","joao-vitor-souza","harshraj8843","PraaneshSelvaraj","shivampipalwa","Greeshma-frontier","SRR-CODER","UsmanFani","imtiyaz786"],"contentHtml":"<h2>Write a program to find factorial of a number by recursion</h2>\n<p>Factorial of a number is the product of all the numbers from 1 to that number. For example, factorial of 5 is 5*4*3*2*1 = 120.</p>\n<pre><code>Input  : 5\r\nOutput : 120\n</code></pre>\n<hr>\n<pre><code>#include &#x3C;iostream>\n#include &#x3C;bits/stdc++.h>\nusing namespace std;\n\nint factorial(int n)\n{\n    if(n==0)\n    {\n        return 1;\n    }\n    return n*factorial(n-1);\n}\n\n\nint main() {\n\tint number;\n\tcin>>number;\n\tcout&#x3C;&#x3C;factorial(number)&#x3C;&#x3C;endl;\n\t\n\t\n\treturn 0;\n}\n</code></pre>\n<pre><code>import java.util.Scanner;\r\n\r\n class FindFactorialOfANumberByRecursion {\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\t\r\n\t\tScanner input = new Scanner(System.in);\r\n\t\t\r\n\t\tSystem.out.println(\"Enter a number: \");\r\n\t\tint number = input.nextInt();\r\n\t\t\r\n\t\tSystem.out.print(\"Factorial of the entered number is: \" + factorial(number));\r\n\t}\r\n\t\r\n\tstatic int factorial(int number) {\r\n\tif(number == 0)\r\n\t\treturn 1;\r\n\telse\r\n\t\treturn number * factorial(number - 1);\r\n\t}\r\n\t\r\n}\n</code></pre>\n<pre><code>function factorialize(num) {\n  if (num &#x3C; 0) { return -1 }\n    \n  // If the number is 0, its factorial is 1.\n  else if (num == 0) { return 1 }\n    \n  // Otherwise, call the recursive procedure again\n    else {\n        return ( num * factorialize(num - 1) );\n    }\n}\n\nfactorialize(5);\n\nconsole.log(\"Factorial of 5 is\", factorialize(5))\n</code></pre>\n<pre><code>class FindFactorialOfANumberByRecursion {\n\n    fun findFactorial(num: Int): Int {\n        if (num == 0) return 0\n        return findRecursive(num)\n    }\n\n    private fun findRecursive(num: Int): Int {\n        if (num == 1) return 1\n        return num * findRecursive(num - 1)\n    }\n}\n</code></pre>\n<pre><code>def fact(n)\n    return 1 if n==0\n\n    return n*fact(n-1)\nend\nprint \"Enter a number : \"\nnum = gets.chomp.to_i\nprint \"Factorial of #{num} : #{fact(num)}\"\n</code></pre>\n<pre><code>function factorialize(num: number): number {\n  if (num &#x3C; 0) {return -1}\n    \n  // If the number is 0, its factorial is 1.\n  else if (num == 0) {return 1}\n    \n  // Otherwise, call the recursive procedure again\n    else {\n        return (num * factorialize(num - 1));\n    }\n}\n\nfactorialize(5);\n\nconsole.log(\"Factorial of 5 is\", factorialize(5))\n</code></pre>\n<pre><code># Python program to calculate factorial of number using recursion\ndef fact(x):\n\n    if x == 1 or x == 0:\n        return 1\n    else:\n        return x * fact(x - 1)  # using recursion\n\n\nn = int(input(\"Enter a number : \"))\n\nif n &#x3C; 0:\n    print(\"Factorial can not be calculated for negative numbers!\")\nelse:\n    print(\"Factorial of\", n, \"=\", fact(n))\n</code></pre>\n<pre><code>&#x3C;?php\nfunction factorial($n)\n{\n    if ($n &#x3C;= 1) {\n        return 1;\n    } else {\n        return $n * factorial($n - 1);\n    }\n}\n\necho factorial((int) readline()) . \"\\n\";\n\n?>\n</code></pre>\n","markdown":"\n## Write a program to find factorial of a number by recursion\n\nFactorial of a number is the product of all the numbers from 1 to that number. For example, factorial of 5 is 5\\*4\\*3\\*2\\*1 = 120.\r\n\r\n```\r\nInput  : 5\r\nOutput : 120\r\n```\n\n---\n\n<CodeBlock slug=\"find-factorial-of-a-number-by-recursion\" >\n\n```cpp\n#include <iostream>\n#include <bits/stdc++.h>\nusing namespace std;\n\nint factorial(int n)\n{\n    if(n==0)\n    {\n        return 1;\n    }\n    return n*factorial(n-1);\n}\n\n\nint main() {\n\tint number;\n\tcin>>number;\n\tcout<<factorial(number)<<endl;\n\t\n\t\n\treturn 0;\n}\n```\n\n```java\nimport java.util.Scanner;\r\n\r\n class FindFactorialOfANumberByRecursion {\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\t\r\n\t\tScanner input = new Scanner(System.in);\r\n\t\t\r\n\t\tSystem.out.println(\"Enter a number: \");\r\n\t\tint number = input.nextInt();\r\n\t\t\r\n\t\tSystem.out.print(\"Factorial of the entered number is: \" + factorial(number));\r\n\t}\r\n\t\r\n\tstatic int factorial(int number) {\r\n\tif(number == 0)\r\n\t\treturn 1;\r\n\telse\r\n\t\treturn number * factorial(number - 1);\r\n\t}\r\n\t\r\n}\n```\n\n```js\nfunction factorialize(num) {\n  if (num < 0) { return -1 }\n    \n  // If the number is 0, its factorial is 1.\n  else if (num == 0) { return 1 }\n    \n  // Otherwise, call the recursive procedure again\n    else {\n        return ( num * factorialize(num - 1) );\n    }\n}\n\nfactorialize(5);\n\nconsole.log(\"Factorial of 5 is\", factorialize(5))\n```\n\n```kt\nclass FindFactorialOfANumberByRecursion {\n\n    fun findFactorial(num: Int): Int {\n        if (num == 0) return 0\n        return findRecursive(num)\n    }\n\n    private fun findRecursive(num: Int): Int {\n        if (num == 1) return 1\n        return num * findRecursive(num - 1)\n    }\n}\n```\n\n```rb\ndef fact(n)\n    return 1 if n==0\n\n    return n*fact(n-1)\nend\nprint \"Enter a number : \"\nnum = gets.chomp.to_i\nprint \"Factorial of #{num} : #{fact(num)}\"\n```\n\n```ts\nfunction factorialize(num: number): number {\n  if (num < 0) {return -1}\n    \n  // If the number is 0, its factorial is 1.\n  else if (num == 0) {return 1}\n    \n  // Otherwise, call the recursive procedure again\n    else {\n        return (num * factorialize(num - 1));\n    }\n}\n\nfactorialize(5);\n\nconsole.log(\"Factorial of 5 is\", factorialize(5))\n```\n\n```py\n# Python program to calculate factorial of number using recursion\ndef fact(x):\n\n    if x == 1 or x == 0:\n        return 1\n    else:\n        return x * fact(x - 1)  # using recursion\n\n\nn = int(input(\"Enter a number : \"))\n\nif n < 0:\n    print(\"Factorial can not be calculated for negative numbers!\")\nelse:\n    print(\"Factorial of\", n, \"=\", fact(n))\n```\n\n```php\n<?php\nfunction factorial($n)\n{\n    if ($n <= 1) {\n        return 1;\n    } else {\n        return $n * factorial($n - 1);\n    }\n}\n\necho factorial((int) readline()) . \"\\n\";\n\n?>\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2022-12-07T08:53:14Z"}