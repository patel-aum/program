{"slug":"find-sum-of-digits-of-a-number-by-recursion","title":"Find sum of digits of a number by recursion","trackId":733,"tags":["C","C++","Java","JavaScript","Kotlin","TypeScript","Python","Rust"],"contributors":["joao-vitor-souza","harshraj8843","grraghav120","Greeshma-frontier","Harsh3341","SRR-CODER","demperor-music","UsmanFani","rakibul-islam-raju"],"contentHtml":"<h2>Write a program to find sum of digits of a number by recursion</h2>\n<p>Suppose we have a number <code>n</code> and we want to find the sum of its digits. For example, if <code>n = 123</code>, then the sum of its digits is <code>1 + 2 + 3 = 6</code>.</p>\n<p>Recursion is a method of solving a problem where the solution depends on solutions to smaller instances of the same problem. In this case, we can use recursion to find the sum of digits of a number.</p>\n<pre><code>Input  : 123\r\nOutput : 6\n</code></pre>\n<hr>\n<pre><code>#include &#x3C;stdio.h>\n\nint FindSumOfDigitsOfANumberByRecursion(int n){\n    if(n>0){\n        return n%10+FindSumOfDigitsOfANumberByRecursion(n/10);\n    }\n}\n\nint main(){\n    int n;\n    scanf(\"%d\",&#x26;n);\n    int res=FindSumOfDigitsOfANumberByRecursion(n);\n    printf(\"%d\",res);\n    return 0;\n}\n\n//Contributed by Raghav Garg\n</code></pre>\n<pre><code>#include &#x3C;iostream>\n#include &#x3C;bits/stdc++.h>\nusing namespace std;\n\nint sum_of_digits(int n)\n{\n    if(n==0)\n    {\n        return 0;\n    }\n    int x=n%10;\n    int s=n/10;\n    return x+sum_of_digits(s);\n}\n\n\nint main() {\n\tint number;\n\tcin>>number;\n\tcout&#x3C;&#x3C;sum_of_digits(number)&#x3C;&#x3C;endl;\n\t\n\t\n\treturn 0;\n}\n</code></pre>\n<pre><code>public class FindSumOfDigitsOfANumberByRecursion {\n    public static void main(String[] args) {\n\n        int num = 12345;\n        System.out.print(sum(num));\n    }\n\n    static int sum(int num) {\n        if (num == 0) {\n            return 0;\n        }\n\n        return (num % 10 + sum(num / 10));\n    }\n}\n</code></pre>\n<pre><code>function sumOfDigits (num) {\n    if(num &#x3C; 10)\n    {\n        return num;\n    }\n    else\n    {\n        return num%10 + sumOfDigits(Math.floor(num/10));\n    }\n}\n\nsumOfDigits(12345);\n\nconsole.log(\"Sum of Digits of sumOfDigits(12345) is\", sumOfDigits(12345));\n</code></pre>\n<pre><code>class FindSumOfDigitsOfANumberByRecursion {\n    fun findSum(num: Int): Int {\n        return recursiveSum(num)\n    }\n\n    private fun recursiveSum(num: Int): Int {\n        if (num == 0) return 0\n        val digit = num / 10\n        return num % 10 + recursiveSum(digit)\n    }\n}\n</code></pre>\n<pre><code>function sumOfDigits (num: number): number {\n    if(num &#x3C; 10)\n    {\n        return num;\n    }\n    else\n    {\n        return num%10 + sumOfDigits(Math.floor(num/10));\n    }\n}\n\nconsole.log(\"Sum of Digits -> 12345 is\", sumOfDigits(12345))\n</code></pre>\n<pre><code>def sum_of_digit(n):\n    if n == 0:\n        return 0\n    return n % 10 + sum_of_digit(int(n / 10))\n\n\nnum = int(input())\nresult = sum_of_digit(num)\nprint(result)\n</code></pre>\n<pre><code>use std::io;\r\nuse std::io::Write;\r\n\r\nfn main() {    \r\n    let mut num = String::new();\r\n    let mut sum: i64 = 0;\r\n    \r\n    print!(\"Insert number: \");\r\n    io::stdout().flush().unwrap();\r\n    \r\n    io::stdin()\r\n        .read_line(&#x26;mut num)\r\n        .expect(\"Failed to read line\");\r\n    \r\n    let mut num: i64 = num\r\n        .trim()\r\n        .parse()\r\n        .expect(\"Please enter a valid number!\");\r\n    \r\n    while num > 0 {\r\n        sum += num%10;\r\n        num /= 10\r\n    }\r\n    println!(\"{sum}\");\r\n}\n</code></pre>\n","markdown":"\n## Write a program to find sum of digits of a number by recursion\n\nSuppose we have a number `n` and we want to find the sum of its digits. For example, if `n = 123`, then the sum of its digits is `1 + 2 + 3 = 6`.\r\n\r\nRecursion is a method of solving a problem where the solution depends on solutions to smaller instances of the same problem. In this case, we can use recursion to find the sum of digits of a number.\r\n\r\n```\r\nInput  : 123\r\nOutput : 6\r\n```\n\n---\n\n<CodeBlock slug=\"find-sum-of-digits-of-a-number-by-recursion\" >\n\n```c\n#include <stdio.h>\n\nint FindSumOfDigitsOfANumberByRecursion(int n){\n    if(n>0){\n        return n%10+FindSumOfDigitsOfANumberByRecursion(n/10);\n    }\n}\n\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    int res=FindSumOfDigitsOfANumberByRecursion(n);\n    printf(\"%d\",res);\n    return 0;\n}\n\n//Contributed by Raghav Garg\n```\n\n```cpp\n#include <iostream>\n#include <bits/stdc++.h>\nusing namespace std;\n\nint sum_of_digits(int n)\n{\n    if(n==0)\n    {\n        return 0;\n    }\n    int x=n%10;\n    int s=n/10;\n    return x+sum_of_digits(s);\n}\n\n\nint main() {\n\tint number;\n\tcin>>number;\n\tcout<<sum_of_digits(number)<<endl;\n\t\n\t\n\treturn 0;\n}\n```\n\n```java\npublic class FindSumOfDigitsOfANumberByRecursion {\n    public static void main(String[] args) {\n\n        int num = 12345;\n        System.out.print(sum(num));\n    }\n\n    static int sum(int num) {\n        if (num == 0) {\n            return 0;\n        }\n\n        return (num % 10 + sum(num / 10));\n    }\n}\n```\n\n```js\nfunction sumOfDigits (num) {\n    if(num < 10)\n    {\n        return num;\n    }\n    else\n    {\n        return num%10 + sumOfDigits(Math.floor(num/10));\n    }\n}\n\nsumOfDigits(12345);\n\nconsole.log(\"Sum of Digits of sumOfDigits(12345) is\", sumOfDigits(12345));\n```\n\n```kt\nclass FindSumOfDigitsOfANumberByRecursion {\n    fun findSum(num: Int): Int {\n        return recursiveSum(num)\n    }\n\n    private fun recursiveSum(num: Int): Int {\n        if (num == 0) return 0\n        val digit = num / 10\n        return num % 10 + recursiveSum(digit)\n    }\n}\n```\n\n```ts\nfunction sumOfDigits (num: number): number {\n    if(num < 10)\n    {\n        return num;\n    }\n    else\n    {\n        return num%10 + sumOfDigits(Math.floor(num/10));\n    }\n}\n\nconsole.log(\"Sum of Digits -> 12345 is\", sumOfDigits(12345))\n```\n\n```py\ndef sum_of_digit(n):\n    if n == 0:\n        return 0\n    return n % 10 + sum_of_digit(int(n / 10))\n\n\nnum = int(input())\nresult = sum_of_digit(num)\nprint(result)\n```\n\n```rs\nuse std::io;\r\nuse std::io::Write;\r\n\r\nfn main() {    \r\n    let mut num = String::new();\r\n    let mut sum: i64 = 0;\r\n    \r\n    print!(\"Insert number: \");\r\n    io::stdout().flush().unwrap();\r\n    \r\n    io::stdin()\r\n        .read_line(&mut num)\r\n        .expect(\"Failed to read line\");\r\n    \r\n    let mut num: i64 = num\r\n        .trim()\r\n        .parse()\r\n        .expect(\"Please enter a valid number!\");\r\n    \r\n    while num > 0 {\r\n        sum += num%10;\r\n        num /= 10\r\n    }\r\n    println!(\"{sum}\");\r\n}\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2022-12-02T06:03:31Z"}