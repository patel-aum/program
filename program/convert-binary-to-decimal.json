{"slug":"convert-binary-to-decimal","title":"Convert binary to decimal","trackId":1949,"tags":["C","C++","C#","Java","JavaScript","Kotlin","Swift","TypeScript","Python","Dart","PHP"],"contributors":["joao-vitor-souza","harshraj8843","auleki","Jordan6794","bbhoom","shams-rf","deniss-eh","hemantsuteri","YaSh8202","parin23","krishan-here"],"contentHtml":"<h2>Write a program to convert binary to decimal</h2>\n<p>Binary is a base-2 number system. It uses only two digits: 0 and 1. The digits are called bits. A bit is the smallest unit of information in a computer. A bit can be either 0 or 1. A bit can be used to represent a single value, such as 0 or 1, or it can be used to represent a single state, such as on or off.</p>\n<p>To convert a binary number to decimal, we can use the following algorithm:</p>\n<ol>\n<li>Multiply the first bit by 2^0.</li>\n<li>Multiply the second bit by 2^1.</li>\n<li>Multiply the third bit by 2^2.</li>\n<li>Multiply the fourth bit by 2^3.</li>\n<li>Repeat steps 3 and 4 until the last bit.</li>\n<li>Add the results of all the multiplications.</li>\n<li>The decimal number is the sum of all the multiplications.</li>\n</ol>\n<pre><code>Input  : 1010\r\nOutput : 10\n</code></pre>\n<hr>\n<pre><code>#include&#x3C;stdio.h>\n\n// Basic Function for calculating a^b\nint power(int a, int b){\n  int val = 1;\n\n  for(int i=0;i&#x3C;b;i++){\n    val *= a;\n  }\n  return val;\n}\n\nint convert_bin_to_decimal(char* str, int len){\n  int num = 0;\n\n  for(int i=0;i&#x3C;len; i++){\n    num += power(2, i)*(str[i] - '0'); // Add 2^i if str[i] is 1\n  }\n  \n  return num;\n}\n\nint main(){\n  int len = 5;\n  char* str = \"00101\";// First bit is of index 0, ex \"00101\" = 20\n\n  //Function Call\n  int num = convert_bin_to_decimal(str,len);\n  printf(\"%d\\n\", num);\n  return 0;\n}\n</code></pre>\n<pre><code>#include &#x3C;iostream>\n\nusing namespace std;\n\nint main()\n{\n    string binaryValue;\n    cin>>binaryValue;\n    int multiplyBy=1;\n    int decimalValue=0;\n    for(int i=binaryValue.size()-1;i>=0;i--){\n        int bit = binaryValue[i] - '0';\n        decimalValue += bit*multiplyBy;\n        multiplyBy*=2;\n    }\n    cout&#x3C;&#x3C;decimalValue&#x3C;&#x3C;endl;\n\n    return 0;\n}\n</code></pre>\n<pre><code>using System;\nusing System.Collections.Generic;\nusing System.Text;\nnamespace Demo {\n   class MyApplication {\n      static void Main(string[] args) {\n         int num, binVal, decVal = 0, baseVal = 1, rem;\n         num = 110011;\n         binVal = num;\n         while (num > 0) {\n            rem = num % 10;\n            decVal = decVal + rem * baseVal;\n            num = num / 10 ;\n            baseVal = baseVal * 2;\n         }\n         Console.Write(\"Binary Number: \"+binVal);\n         Console.Write(\"\\nDecimal: \"+decVal);\n         Console.ReadLine();\n      }\n   }\n}\n</code></pre>\n<pre><code>import java.util.Scanner;\r\n\r\npublic class ConvertBinaryToDecimal {\r\n\tpublic static void main(String[] args) {\r\n\t\tSystem.out.print(\"Enter Binary Number   : \");\r\n\r\n\t\tScanner sc = new Scanner(System.in);\r\n\r\n\t\tString binary = sc.nextLine();\r\n\r\n\t\tsc.close();\r\n\r\n    Integer decimal = Integer.parseInt(binary, 2);\r\n\r\n    System.out.println(\"Decimal Number   : \" + decimal.toString());\r\n\t}\r\n}\n</code></pre>\n<pre><code>/** \n* @param {number} binaryNumber - the binary number to convert, in number form (not string)\n* @returns {number} the converted number in decimal \n*/\n\nfunction convertBinaryToDecimal(binaryNumber){\n    const digitsArray = binaryNumber.toString().split('')\n\n    const numberOfDigits = digitsArray.length\n\n    const multiplicatedDigits = digitsArray.map((digit, index) => {\n        let power = numberOfDigits - index - 1\n        return parseInt(digit) * Math.pow(2, power)\n    })\n\n    const resultSum = multiplicatedDigits.reduce((total, accumulator) => {\n        return total + accumulator\n    }, 0)\n\n    return resultSum\n}\n\n/** \n// Test Cases\nconsole.log(convertBinaryToDecimal(1010))\n// should return 10\nconsole.log(convertBinaryToDecimal(1111))\n// should return 15\n*/\n</code></pre>\n<pre><code>fun main(args: Array&#x3C;String>) {\n    val num: Long = 1010\n    val decimal = BinaryToDecimal(num)\n    println(\"Binary : $num\")\n    println(\"Decimal : $decimal\")\n}\n\nfun BinaryToDecimal(num: Long): Int {\n    var num = num\n    var decimalNumber = 0\n    var i = 0\n    var remainder: Long\n\n    while (num.toInt() != 0) {\n        remainder = num % 10\n        num /= 10\n        decimalNumber += (remainder * Math.pow(2.0, i.toDouble())).toInt()\n        ++i\n    }\n    return decimalNumber\n}\n</code></pre>\n<pre><code>//\n//  ConvertBinaryToDecimal.swift\n//\n//\n//  Created by Shamsuddin Refaei on 06/10/2022.\n//\n\nimport Foundation\n\n// Sample input\nlet binaryNumber = \"1010101010\"\n\nfunc convertToDecimal(binary: String) -> Int {\n    \n    // Reverse binary number to allow easy iteration with for loop\n    let reversedBinaryNumber = String(binaryNumber.reversed())\n\n    // Initialse power &#x26; total\n    var p = 0\n    var total = 0\n\n    for i in reversedBinaryNumber {\n        \n        let int = i.wholeNumberValue    // Convert character to integer\n        // If character can be converted, do following\n        if let int = int {\n            \n            total += int * Int(pow(Double(2), Double(p)))   // Apply algorithm\n            p += 1\n        }\n        // If character cannot be converted, print error\n        else {\n            \n            print(\"Value \\(i) cannot be converted to int\")\n        }\n    }\n    \n    return total\n}\n\n// Sample output\nlet result = convertToDecimal(binary: binaryNumber)\n</code></pre>\n<pre><code>/** \n* @param {number} binaryNumber - the binary number to convert, in number form (not string)\n* @returns {number} the converted number in decimal \n*/\n\nfunction convertBinaryToDecimal(binaryNumber: Number){\n    const digitsArray = binaryNumber.toString().split('')\n\n    const numberOfDigits = digitsArray.length\n\n    const multiplicatedDigits = digitsArray.map((digit: string, index: number) => {\n        let power = numberOfDigits - index - 1\n        return parseInt(digit) * Math.pow(2, power)\n    })\n\n    const resultSum = multiplicatedDigits.reduce((total, accumulator) => {\n        return total + accumulator\n    }, 0)\n\n    return resultSum\n}\n\n/** \n// Test Cases\nconsole.log(convertBinaryToDecimal(1010))\n// should return 10\nconsole.log(convertBinaryToDecimal(1111))\n// should return 15\n*/\n</code></pre>\n<pre><code># title: Convert binary to decimal\n# trackId: 1949\nn = int(input(\"enter the binary value:\"))\ndecimal = 0\npower = 1\nwhile n > 0:\n    rem = n % 10\n    n = n // 10\n    decimal += rem * power\n    power = power * 2\nprint(decimal)\n</code></pre>\n<pre><code>void main() {\n  print(convertBinaryToDecimal(1010));\n}\n\nint convertBinaryToDecimal(int binary) {\n  int binaryNumber = int.parse(binary.toString(), radix: 2);\n  return binaryNumber;\n}\n</code></pre>\n<pre><code>&#x3C;?php\n\tfunction binaryToDecimal($n)\n{\n    $num = $n;\n    $dec_value = 0;\n     \n    $base = 1;\n     \n    $temp = $num;\n    while ($temp)\n    {\n        $last_digit = $temp % 10;\n        $temp = $temp / 10;\n         \n        $dec_value += $last_digit\n                        * $base;\n        $base = $base*2;\n    }\n    return $dec_value;\n}\n \n    // Driver Code\n    $num = 110011;\n    echo binaryToDecimal($num), \"\\n\";\n \n?>\n</code></pre>\n","markdown":"\n## Write a program to convert binary to decimal\n\nBinary is a base-2 number system. It uses only two digits: 0 and 1. The digits are called bits. A bit is the smallest unit of information in a computer. A bit can be either 0 or 1. A bit can be used to represent a single value, such as 0 or 1, or it can be used to represent a single state, such as on or off.\r\n\r\nTo convert a binary number to decimal, we can use the following algorithm:\r\n\r\n1. Multiply the first bit by 2^0.\r\n2. Multiply the second bit by 2^1.\r\n3. Multiply the third bit by 2^2.\r\n4. Multiply the fourth bit by 2^3.\r\n5. Repeat steps 3 and 4 until the last bit.\r\n6. Add the results of all the multiplications.\r\n7. The decimal number is the sum of all the multiplications.\r\n\r\n```\r\nInput  : 1010\r\nOutput : 10\r\n```\n\n---\n\n<CodeBlock slug=\"convert-binary-to-decimal\" >\n\n```c\n#include<stdio.h>\n\n// Basic Function for calculating a^b\nint power(int a, int b){\n  int val = 1;\n\n  for(int i=0;i<b;i++){\n    val *= a;\n  }\n  return val;\n}\n\nint convert_bin_to_decimal(char* str, int len){\n  int num = 0;\n\n  for(int i=0;i<len; i++){\n    num += power(2, i)*(str[i] - '0'); // Add 2^i if str[i] is 1\n  }\n  \n  return num;\n}\n\nint main(){\n  int len = 5;\n  char* str = \"00101\";// First bit is of index 0, ex \"00101\" = 20\n\n  //Function Call\n  int num = convert_bin_to_decimal(str,len);\n  printf(\"%d\\n\", num);\n  return 0;\n}\n```\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n    string binaryValue;\n    cin>>binaryValue;\n    int multiplyBy=1;\n    int decimalValue=0;\n    for(int i=binaryValue.size()-1;i>=0;i--){\n        int bit = binaryValue[i] - '0';\n        decimalValue += bit*multiplyBy;\n        multiplyBy*=2;\n    }\n    cout<<decimalValue<<endl;\n\n    return 0;\n}\n```\n\n```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\nnamespace Demo {\n   class MyApplication {\n      static void Main(string[] args) {\n         int num, binVal, decVal = 0, baseVal = 1, rem;\n         num = 110011;\n         binVal = num;\n         while (num > 0) {\n            rem = num % 10;\n            decVal = decVal + rem * baseVal;\n            num = num / 10 ;\n            baseVal = baseVal * 2;\n         }\n         Console.Write(\"Binary Number: \"+binVal);\n         Console.Write(\"\\nDecimal: \"+decVal);\n         Console.ReadLine();\n      }\n   }\n}\n```\n\n```java\nimport java.util.Scanner;\r\n\r\npublic class ConvertBinaryToDecimal {\r\n\tpublic static void main(String[] args) {\r\n\t\tSystem.out.print(\"Enter Binary Number   : \");\r\n\r\n\t\tScanner sc = new Scanner(System.in);\r\n\r\n\t\tString binary = sc.nextLine();\r\n\r\n\t\tsc.close();\r\n\r\n    Integer decimal = Integer.parseInt(binary, 2);\r\n\r\n    System.out.println(\"Decimal Number   : \" + decimal.toString());\r\n\t}\r\n}\n```\n\n```js\n/** \n* @param {number} binaryNumber - the binary number to convert, in number form (not string)\n* @returns {number} the converted number in decimal \n*/\n\nfunction convertBinaryToDecimal(binaryNumber){\n    const digitsArray = binaryNumber.toString().split('')\n\n    const numberOfDigits = digitsArray.length\n\n    const multiplicatedDigits = digitsArray.map((digit, index) => {\n        let power = numberOfDigits - index - 1\n        return parseInt(digit) * Math.pow(2, power)\n    })\n\n    const resultSum = multiplicatedDigits.reduce((total, accumulator) => {\n        return total + accumulator\n    }, 0)\n\n    return resultSum\n}\n\n/** \n// Test Cases\nconsole.log(convertBinaryToDecimal(1010))\n// should return 10\nconsole.log(convertBinaryToDecimal(1111))\n// should return 15\n*/\n```\n\n```kt\nfun main(args: Array<String>) {\n    val num: Long = 1010\n    val decimal = BinaryToDecimal(num)\n    println(\"Binary : $num\")\n    println(\"Decimal : $decimal\")\n}\n\nfun BinaryToDecimal(num: Long): Int {\n    var num = num\n    var decimalNumber = 0\n    var i = 0\n    var remainder: Long\n\n    while (num.toInt() != 0) {\n        remainder = num % 10\n        num /= 10\n        decimalNumber += (remainder * Math.pow(2.0, i.toDouble())).toInt()\n        ++i\n    }\n    return decimalNumber\n}\n```\n\n```swift\n//\n//  ConvertBinaryToDecimal.swift\n//\n//\n//  Created by Shamsuddin Refaei on 06/10/2022.\n//\n\nimport Foundation\n\n// Sample input\nlet binaryNumber = \"1010101010\"\n\nfunc convertToDecimal(binary: String) -> Int {\n    \n    // Reverse binary number to allow easy iteration with for loop\n    let reversedBinaryNumber = String(binaryNumber.reversed())\n\n    // Initialse power & total\n    var p = 0\n    var total = 0\n\n    for i in reversedBinaryNumber {\n        \n        let int = i.wholeNumberValue    // Convert character to integer\n        // If character can be converted, do following\n        if let int = int {\n            \n            total += int * Int(pow(Double(2), Double(p)))   // Apply algorithm\n            p += 1\n        }\n        // If character cannot be converted, print error\n        else {\n            \n            print(\"Value \\(i) cannot be converted to int\")\n        }\n    }\n    \n    return total\n}\n\n// Sample output\nlet result = convertToDecimal(binary: binaryNumber)\n```\n\n```ts\n/** \n* @param {number} binaryNumber - the binary number to convert, in number form (not string)\n* @returns {number} the converted number in decimal \n*/\n\nfunction convertBinaryToDecimal(binaryNumber: Number){\n    const digitsArray = binaryNumber.toString().split('')\n\n    const numberOfDigits = digitsArray.length\n\n    const multiplicatedDigits = digitsArray.map((digit: string, index: number) => {\n        let power = numberOfDigits - index - 1\n        return parseInt(digit) * Math.pow(2, power)\n    })\n\n    const resultSum = multiplicatedDigits.reduce((total, accumulator) => {\n        return total + accumulator\n    }, 0)\n\n    return resultSum\n}\n\n/** \n// Test Cases\nconsole.log(convertBinaryToDecimal(1010))\n// should return 10\nconsole.log(convertBinaryToDecimal(1111))\n// should return 15\n*/\n```\n\n```py\n# title: Convert binary to decimal\n# trackId: 1949\nn = int(input(\"enter the binary value:\"))\ndecimal = 0\npower = 1\nwhile n > 0:\n    rem = n % 10\n    n = n // 10\n    decimal += rem * power\n    power = power * 2\nprint(decimal)\n```\n\n```dart\nvoid main() {\n  print(convertBinaryToDecimal(1010));\n}\n\nint convertBinaryToDecimal(int binary) {\n  int binaryNumber = int.parse(binary.toString(), radix: 2);\n  return binaryNumber;\n}\n```\n\n```php\n<?php\n\tfunction binaryToDecimal($n)\n{\n    $num = $n;\n    $dec_value = 0;\n     \n    $base = 1;\n     \n    $temp = $num;\n    while ($temp)\n    {\n        $last_digit = $temp % 10;\n        $temp = $temp / 10;\n         \n        $dec_value += $last_digit\n                        * $base;\n        $base = $base*2;\n    }\n    return $dec_value;\n}\n \n    // Driver Code\n    $num = 110011;\n    echo binaryToDecimal($num), \"\\n\";\n \n?>\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2022-12-02T06:03:31Z"}