{"slug":"find-the-determinant-of-a-matrix","title":"Find the determinant of a matrix","trackId":3422,"tags":["JavaScript","Swift","TypeScript"],"contributors":["urlunaticguy","jaypavasiya","harshraj8843"],"contentHtml":"<h2>Write a program to find the determinant of a matrix</h2>\n<p>The determinant of a square matrix is a scalar value that can be computed from the elements of the matrix. The determinant of a matrix A is denoted as det(A) or |A|.</p>\n<pre><code>Input  :\n1 2 3\n4 5 6\n7 8 9\n\nOutput :\n0\n</code></pre>\n<hr>\n<pre><code>const determinant = m => \n  m.length == 1 ?\n  m[0][0] :\n  m.length == 2 ? \n  m[0][0]*m[1][1]-m[0][1]*m[1][0] :\n  m[0].reduce((r,e,i) => \n    r+(-1)**(i+2)*e*determinant(m.slice(1).map(c => \n      c.filter((_,j) => i != j))),0)\n\nconst test = [[1,2,3],[4,5,6],[7,8,9]] // 0\n\nconsole.log(determinant(test))\n</code></pre>\n<pre><code>import Foundation\n\nvar matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nvar determinant = 0, counterForSign = 0\n\nfor index in 0..&#x3C;3 {\n    var part1 = matrix[1]\n    var part2 = matrix[2]\n    part1.remove(at: index)\n    part2.remove(at: index)\n    let adj = (part1[0] * part2[1]) - (part1[1] * part2[0])\n    if (counterForSign == 0) {\n        determinant += matrix[0][index] * adj\n        counterForSign += 1\n    } else {\n        determinant -= matrix[0][index] * adj\n        counterForSign -= 1\n    }\n}\n\nprint(determinant)\n</code></pre>\n<pre><code>const determinant = (m: any[])=> \n  m.length == 1 ?\n  m[0][0] :\n  m.length == 2 ? \n  m[0][0]*m[1][1]-m[0][1]*m[1][0] :\n  m[0].reduce((r: number,e: number,i: number) => \n    r+(-1)**(i+2)*e*determinant(m.slice(1).map((c: any[]) => \n      c.filter((_,j) => i != j))),0)\n\nconst test = [[1,2,3],[4,5,6],[7,8,9]] // 0\n\nconsole.log(determinant(test))\n</code></pre>\n","markdown":"\n## Write a program to find the determinant of a matrix\n\nThe determinant of a square matrix is a scalar value that can be computed from the elements of the matrix. The determinant of a matrix A is denoted as det(A) or |A|.\n\n```\nInput  :\n1 2 3\n4 5 6\n7 8 9\n\nOutput :\n0\n```\n\n---\n\n<CodeBlock slug=\"find-the-determinant-of-a-matrix\" >\n\n```js\nconst determinant = m => \n  m.length == 1 ?\n  m[0][0] :\n  m.length == 2 ? \n  m[0][0]*m[1][1]-m[0][1]*m[1][0] :\n  m[0].reduce((r,e,i) => \n    r+(-1)**(i+2)*e*determinant(m.slice(1).map(c => \n      c.filter((_,j) => i != j))),0)\n\nconst test = [[1,2,3],[4,5,6],[7,8,9]] // 0\n\nconsole.log(determinant(test))\n```\n\n```swift\nimport Foundation\n\nvar matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nvar determinant = 0, counterForSign = 0\n\nfor index in 0..<3 {\n    var part1 = matrix[1]\n    var part2 = matrix[2]\n    part1.remove(at: index)\n    part2.remove(at: index)\n    let adj = (part1[0] * part2[1]) - (part1[1] * part2[0])\n    if (counterForSign == 0) {\n        determinant += matrix[0][index] * adj\n        counterForSign += 1\n    } else {\n        determinant -= matrix[0][index] * adj\n        counterForSign -= 1\n    }\n}\n\nprint(determinant)\n```\n\n```ts\nconst determinant = (m: any[])=> \n  m.length == 1 ?\n  m[0][0] :\n  m.length == 2 ? \n  m[0][0]*m[1][1]-m[0][1]*m[1][0] :\n  m[0].reduce((r: number,e: number,i: number) => \n    r+(-1)**(i+2)*e*determinant(m.slice(1).map((c: any[]) => \n      c.filter((_,j) => i != j))),0)\n\nconst test = [[1,2,3],[4,5,6],[7,8,9]] // 0\n\nconsole.log(determinant(test))\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2022-10-25T03:14:50Z"}