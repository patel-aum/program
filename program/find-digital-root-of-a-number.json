{"slug":"find-digital-root-of-a-number","title":"Find Digital Root of a number","trackId":3060,"tags":["C","Java","JavaScript","Ruby","TypeScript","Python","GO"],"contributors":["joao-vitor-souza","lukastomcisak","devkansara","omprakashchhetri","Akhilbisht798","Greeshma-frontier","Vishwamagdavan","harshraj8843"],"contentHtml":"<h2>Write a program to find digital root of a number</h2>\n<p>Digital root of a number is the recursive sum of its digits until we get a single digit number.</p>\n<pre><code>Input  : 1234\r\nOutput : 1\n</code></pre>\n<hr>\n<pre><code>// C Program to find the Digital Root of a Number\n#include&#x3C;stdio.h>\nint digital_root(int);\nvoid main()\n{\n    int num;\n    printf(\"Enter Your Number :\\n\");\n    scanf(\"%d\",&#x26;num);\n    if(num!=0){\n    int dr=digital_root(num);\n    printf(\"Digital Root of %d is %d\",num,dr);\n    }\n}\nint digital_root(int n)\n{\n    int sum=0;\n    while(1)\n    {\n      while(n!=0)\n      {\n         sum=sum+(n%10);\n         n=n/10;\n      }\n      if(sum>9)\n      {\n        n=sum;\n        sum=0;\n      }\n      else\n        break;\n    } \n    return sum;\n}\n</code></pre>\n<pre><code>import java.util.Scanner;\n\npublic class FindDigitalRootOfANumber{\n    public static void main(String[] args) {\n        Scanner scanner=new Scanner(System.in);\n        int value=scanner.nextInt();\n        System.out.println(findDigitalRootOfANumber(value));\n        scanner.close();\n    }\n\n    private static int findDigitalRootOfANumber(int value) {\n        if(value&#x3C;10) return value;\n        value=value%10+findDigitalRootOfANumber(value/10);\n        return findDigitalRootOfANumber(value);\n    }\n}\n</code></pre>\n<pre><code>function findDigitalRoot(num: any): number {\n    let digitalRoot = 0;\n\n    if (num != 0) {\n        digitalRoot = (num % 10) + findDigitalRoot(Math.floor(num / 10))\n    }\n\n    if (digitalRoot > 9) {\n        digitalRoot = (digitalRoot % 10) + findDigitalRoot(Math.floor(digitalRoot / 10))\n    }\n    return digitalRoot;\n}\n\nconsole.log(findDigitalRoot(1234));\n</code></pre>\n<pre><code>print \"Input: \"\n\nnumber = gets.chomp\n\nif number == \"0\"\n    puts \"Output: 0\"\nend\n\nans = 0\nfor i in 0..number.length\n    ans = (ans + number[i].to_i) % 9\nend\n    \nif ans == 0\n    puts \"Output: 9\"\nelse\n    puts \"Output: #{ans % 9}\"\nend\n</code></pre>\n<pre><code>const findDigitalRootByRecursion=(val:number)=>{\n    // If the value is less than 10, viz the digit already single digit\n    if(val&#x3C;10) return val;\n    // using the recursion finding the sum of digit\n    val=val%10+findDigitalRootByRecursion(val/10);\n    // removing the decimal part\n    val=~~val;\n    return findDigitalRootByRecursion(val);\n}\n\nconsole.log(findDigitalRootByRecursion(1234));\nconsole.log(findDigitalRootByRecursion(642));\nconsole.log(findDigitalRootByRecursion(0));\nconsole.log(findDigitalRootByRecursion(1));\n</code></pre>\n<pre><code>def digitalRoot(num):\n    if num == \"0\":\n        return 0\n\n    ans = 0\n    for i in range(0, len(num)):\n        ans = (ans + int(num[i])) % 9\n\n    if ans == 0:\n        return 9\n    else:\n        return ans % 9\n\n\nnum = \"65785412\"\nprint(digitalRoot(num))\n</code></pre>\n<pre><code>package main\n\nimport \"fmt\"\n\nfunc findDigitalRoot(num int) int {\n\ttemp := num\n\tdigit := 0\n\tdroot := 0\n\tfor temp != 0 {\n\t\tdigit = temp % 10\n\t\tdroot += digit\n\t\ttemp /= 10\n\t\tif temp == 0 &#x26;&#x26; droot > 9 {\n\t\t\ttemp = droot\n\t\t\tdroot = 0\n\t\t}\n\t}\n\tfmt.Println(droot)\n\treturn droot\n}\nfunc main() {\n\tfmt.Println(\"Enter the number to find its digital root: \")\n\tvar num int\n\tfmt.Scanln(&#x26;num)\n\tfindDigitalRoot(num)\n}\n</code></pre>\n","markdown":"\n## Write a program to find digital root of a number\n\nDigital root of a number is the recursive sum of its digits until we get a single digit number.\r\n\r\n```\r\nInput  : 1234\r\nOutput : 1\r\n```\n\n---\n\n<CodeBlock slug=\"find-digital-root-of-a-number\" >\n\n```c\n// C Program to find the Digital Root of a Number\n#include<stdio.h>\nint digital_root(int);\nvoid main()\n{\n    int num;\n    printf(\"Enter Your Number :\\n\");\n    scanf(\"%d\",&num);\n    if(num!=0){\n    int dr=digital_root(num);\n    printf(\"Digital Root of %d is %d\",num,dr);\n    }\n}\nint digital_root(int n)\n{\n    int sum=0;\n    while(1)\n    {\n      while(n!=0)\n      {\n         sum=sum+(n%10);\n         n=n/10;\n      }\n      if(sum>9)\n      {\n        n=sum;\n        sum=0;\n      }\n      else\n        break;\n    } \n    return sum;\n}\n```\n\n```java\nimport java.util.Scanner;\n\npublic class FindDigitalRootOfANumber{\n    public static void main(String[] args) {\n        Scanner scanner=new Scanner(System.in);\n        int value=scanner.nextInt();\n        System.out.println(findDigitalRootOfANumber(value));\n        scanner.close();\n    }\n\n    private static int findDigitalRootOfANumber(int value) {\n        if(value<10) return value;\n        value=value%10+findDigitalRootOfANumber(value/10);\n        return findDigitalRootOfANumber(value);\n    }\n}\n```\n\n```js\nfunction findDigitalRoot(num: any): number {\n    let digitalRoot = 0;\n\n    if (num != 0) {\n        digitalRoot = (num % 10) + findDigitalRoot(Math.floor(num / 10))\n    }\n\n    if (digitalRoot > 9) {\n        digitalRoot = (digitalRoot % 10) + findDigitalRoot(Math.floor(digitalRoot / 10))\n    }\n    return digitalRoot;\n}\n\nconsole.log(findDigitalRoot(1234));\n```\n\n```rb\nprint \"Input: \"\n\nnumber = gets.chomp\n\nif number == \"0\"\n    puts \"Output: 0\"\nend\n\nans = 0\nfor i in 0..number.length\n    ans = (ans + number[i].to_i) % 9\nend\n    \nif ans == 0\n    puts \"Output: 9\"\nelse\n    puts \"Output: #{ans % 9}\"\nend\n```\n\n```ts\nconst findDigitalRootByRecursion=(val:number)=>{\n    // If the value is less than 10, viz the digit already single digit\n    if(val<10) return val;\n    // using the recursion finding the sum of digit\n    val=val%10+findDigitalRootByRecursion(val/10);\n    // removing the decimal part\n    val=~~val;\n    return findDigitalRootByRecursion(val);\n}\n\nconsole.log(findDigitalRootByRecursion(1234));\nconsole.log(findDigitalRootByRecursion(642));\nconsole.log(findDigitalRootByRecursion(0));\nconsole.log(findDigitalRootByRecursion(1));\n```\n\n```py\ndef digitalRoot(num):\n    if num == \"0\":\n        return 0\n\n    ans = 0\n    for i in range(0, len(num)):\n        ans = (ans + int(num[i])) % 9\n\n    if ans == 0:\n        return 9\n    else:\n        return ans % 9\n\n\nnum = \"65785412\"\nprint(digitalRoot(num))\n```\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc findDigitalRoot(num int) int {\n\ttemp := num\n\tdigit := 0\n\tdroot := 0\n\tfor temp != 0 {\n\t\tdigit = temp % 10\n\t\tdroot += digit\n\t\ttemp /= 10\n\t\tif temp == 0 && droot > 9 {\n\t\t\ttemp = droot\n\t\t\tdroot = 0\n\t\t}\n\t}\n\tfmt.Println(droot)\n\treturn droot\n}\nfunc main() {\n\tfmt.Println(\"Enter the number to find its digital root: \")\n\tvar num int\n\tfmt.Scanln(&num)\n\tfindDigitalRoot(num)\n}\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2022-12-02T06:03:31Z"}