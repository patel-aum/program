{"slug":"check-palindrome-number","title":"Check Palindrome Number","trackId":1981,"tags":["C","C++","C#","Java","JavaScript","Kotlin","Ruby","Swift","TypeScript","Python","Dart","PHP","Perl","Rust"],"contributors":["harshraj8843","joao-vitor-souza","gupta-soham","ArinCodes","KartikeyDubeyKD","auleki","rahmat-st","ynbh","vedha-vikash-pixel","gpt-anurag","UsmanFani","KaptainCS3","grraghav120"],"contentHtml":"<h2>Write a program to check palindrome number</h2>\n<p>Palindrome numbers are the numbers for which reverse is exactly same as the original number. For example, 121 is palindrome, but 123 is not palindrome.</p>\n<pre><code>Input  : 121\r\nOutput : Palindrome Number\n</code></pre>\n<hr>\n<pre><code>#include &#x3C;stdio.h>\n#include &#x3C;stdbool.h>\n\nbool isPalindrome(int x)\n{\n    static int rev = 0;\n    static int num;\n    num = x;\n    if (x == 0)\n    {\n        return (num == rev);\n    }\n    rev = rev * 10 + x % 10;\n    return isPalindrome(x / 10);\n}\nint main()\n{\n    int n;\n    printf(\"Enter a number :\");\n    scanf(\"%d\", &#x26;n);\n    if (isPalindrome(n))\n        printf(\"is a palindrome\");\n    else\n        printf(\"is Not a palindrome\");\n    return 0;\n}\n</code></pre>\n<pre><code>#include &#x3C;iostream>\r\n\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n    int n,rev=0;cin>>n;\r\n    for(int i=n;i>0;i=i/10){\r\n        int mod=i%10;\r\n        rev=rev*10+mod;\r\n    }\r\n    // cout&#x3C;&#x3C;rev;\r\n    if(rev==n)cout&#x3C;&#x3C;\"Palindrome Number\"&#x3C;&#x3C;'\\n';\r\n    else cout&#x3C;&#x3C;\"Not Palindrome Number\"&#x3C;&#x3C;'\\n';\r\n}\r\n\r\n//Contributed by Raghav Garg\n</code></pre>\n<pre><code>using System;  \n  public class checkpalindrome\n   {  \n     public static void Main(string[] args)  \n      {  \n          int n,r,sum=0,temp;    \n          Console.Write(\"Enter the Number: \");   \n          n = int.Parse(Console.ReadLine());  \n          temp=n;      \n          while(n>0)      \n          {      \n           r=n%10;      \n           sum=(sum*10)+r;      \n           n=n/10;      \n          }      \n          if(temp==sum)      \n           Console.Write(\"Number is Palindrome.\");      \n          else      \n           Console.Write(\"Number is not Palindrome\");     \n    }  \n  }\n</code></pre>\n<pre><code>public class CheckPalindromeNumber {\n\n    public static void main(String[] args) {\n\n        int number = 12221;                               //number to check\n        if (ispalindrome(number)) {                       //function returns true if palindrome else false        \n            System.out.println(\"Palindrome number\");\n        } else {\n            System.out.println(\"Not a palindrome number\");\n        }\n    }\n\n    public static boolean ispalindrome(int num) {           //palindrome function definition\n\n        int temp = num;\n        int r, sum = 0;\n        while (num > 0) {\n            r = num % 10;\n            sum = (sum * 10) + r;\n            num = num / 10;\n        }\n        if (temp == sum) {\n            return true;\n        } \n        return false;        \n    }\n}\n</code></pre>\n<pre><code>function checkPalindromeNumber(num) {\n    let remainder, temp, reversedNumber = 0;\n    temp = num;\n    while (num > 0) {\n        remainder = num % 10;\n        num = Math.floor(num / 10);\n        reversedNumber = reversedNumber * 10 + remainder;\n    }\n    return reversedNumber === temp;\n}\nconsole.log(checkPalindromeNumber(190));\n</code></pre>\n<pre><code>fun main() {\n    print(\"Enter No. to Check Palindrome: \")\n    val num = readln()\n    println()\n    if (checkPalindrome(num)) println(\"$num is Palindrome\")\n    else println(\"$num is not Palindrome\")\n}\n\nprivate fun checkPalindrome(num: String): Boolean {\n    var start = 0\n    var end = num.lastIndex\n    while (start &#x3C;= end) {\n        if (num[start] != num[end]) return false\n        start++\n        end--\n    }\n    return true\n}\n</code></pre>\n<pre><code>puts \"Enter the number\"\nnum=gets.chomp.to_i\n\ntemp=num\nsum = 0\n\nwhile num!=0  #implementation of while loop\n    rem=num%10\n    num=num/10\n    sum=sum*10+rem\nend\n\nif(temp==sum)\n    puts \"The #{temp} is a palindrome\"\nelse\n    puts \"The #{temp} is not a palindrome\"\nend\n</code></pre>\n<pre><code>var reversen = 0\nvar rem = 0\nvar n = 121\nvar no = n\nno=n\n\nwhile n != 0 {\n    rem = n%10\n    reversen = reversen * 10 + rem\n    n /= 10\n}\nif(no == reversen)\n{\n    print(\"\\(no)\" + \" is palindrome\")\n}\nelse\n{\n    print(\"\\(no)\" + \" is  not palindrome\")\n   \n}\n</code></pre>\n<pre><code>function checkPalindromeNumber(num: number) {\n    let remainder: number, temp: number, reversedNumber: number = 0\n    \n    temp = num;\n\n    while (num > 0) {\n        remainder = num % 10\n        num = Math.floor(num / 10)\n        reversedNumber = reversedNumber*10 + remainder\n    }\n\n    return reversedNumber === temp\n}\n\nconsole.log(checkPalindromeNumber(190))\n</code></pre>\n<pre><code>number = input(\"Input:\")\nprint(\"Palindrome Number\" if number == number[::-1] else \"Not Palindrome Number\")\n</code></pre>\n<pre><code>void main() {\n  print(isNumberPalindrome(223));\n}\n\nbool isNumberPalindrome(int num) {\n  String originalNumber = num.toString();\n  String reversed = originalNumber.split('').reversed.join('');\n  if (originalNumber == reversed)\n    return true;\n  else\n    return false;\n}\n</code></pre>\n<pre><code>&#x3C;?php\n\nfunction check_palindrome_number($num)\n{\n\treturn strrev($num) == $num;\n}\n\necho check_palindrome_number(121) ? 'Palindrome String' : 'Not Palindrome String';\n</code></pre>\n<pre><code># By Soham Gupta (http://github.com/gupta-soham/) (https://www.linkedin.com/in/soham-gupta-in/)\n\n# A Perl program to check palindrome numbe\n# Input  : 121\n# Output : Palindrome Number\n\n\nprint \"Enter a number: \";\n$n = &#x3C;STDIN>;\n# $n = 121\n$t = $n;\n$s = 0;\nwhile ($n > 0) {\n    $r = $n % 10;\n    $s = ($s * 10) + $r;\n    $n = int($n / 10);\n}\n\nif ($t == $s) {\n    print \"Number is Palindrome!\\n\";\n} \nelse {\n    print \"Number is not Palindrome!\\n\";\n}\n</code></pre>\n<pre><code>fn check_palindrome(mut num: i32) -> bool {\n    let mut remainder;\n    let temp;\n    let mut reversed = 0;\n\n    temp = num;\n\n    while num>0 {\n        remainder = num%10;\n        num = num/10;\n        reversed  = reversed*10 +remainder;\n    }\n        \n    return reversed == temp;\n}\n\nfn main() {\n    let palindrome = check_palindrome(199);\n\n    println!(\"{}\", palindrome)\n}\n</code></pre>\n","markdown":"\n## Write a program to check palindrome number\n\nPalindrome numbers are the numbers for which reverse is exactly same as the original number. For example, 121 is palindrome, but 123 is not palindrome.\r\n\r\n```\r\nInput  : 121\r\nOutput : Palindrome Number\r\n```\n\n---\n\n<CodeBlock slug=\"check-palindrome-number\" >\n\n```c\n#include <stdio.h>\n#include <stdbool.h>\n\nbool isPalindrome(int x)\n{\n    static int rev = 0;\n    static int num;\n    num = x;\n    if (x == 0)\n    {\n        return (num == rev);\n    }\n    rev = rev * 10 + x % 10;\n    return isPalindrome(x / 10);\n}\nint main()\n{\n    int n;\n    printf(\"Enter a number :\");\n    scanf(\"%d\", &n);\n    if (isPalindrome(n))\n        printf(\"is a palindrome\");\n    else\n        printf(\"is Not a palindrome\");\n    return 0;\n}\n```\n\n```cpp\n#include <iostream>\r\n\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n    int n,rev=0;cin>>n;\r\n    for(int i=n;i>0;i=i/10){\r\n        int mod=i%10;\r\n        rev=rev*10+mod;\r\n    }\r\n    // cout<<rev;\r\n    if(rev==n)cout<<\"Palindrome Number\"<<'\\n';\r\n    else cout<<\"Not Palindrome Number\"<<'\\n';\r\n}\r\n\r\n//Contributed by Raghav Garg\n```\n\n```cs\nusing System;  \n  public class checkpalindrome\n   {  \n     public static void Main(string[] args)  \n      {  \n          int n,r,sum=0,temp;    \n          Console.Write(\"Enter the Number: \");   \n          n = int.Parse(Console.ReadLine());  \n          temp=n;      \n          while(n>0)      \n          {      \n           r=n%10;      \n           sum=(sum*10)+r;      \n           n=n/10;      \n          }      \n          if(temp==sum)      \n           Console.Write(\"Number is Palindrome.\");      \n          else      \n           Console.Write(\"Number is not Palindrome\");     \n    }  \n  }\n```\n\n```java\npublic class CheckPalindromeNumber {\n\n    public static void main(String[] args) {\n\n        int number = 12221;                               //number to check\n        if (ispalindrome(number)) {                       //function returns true if palindrome else false        \n            System.out.println(\"Palindrome number\");\n        } else {\n            System.out.println(\"Not a palindrome number\");\n        }\n    }\n\n    public static boolean ispalindrome(int num) {           //palindrome function definition\n\n        int temp = num;\n        int r, sum = 0;\n        while (num > 0) {\n            r = num % 10;\n            sum = (sum * 10) + r;\n            num = num / 10;\n        }\n        if (temp == sum) {\n            return true;\n        } \n        return false;        \n    }\n}\n```\n\n```js\nfunction checkPalindromeNumber(num) {\n    let remainder, temp, reversedNumber = 0;\n    temp = num;\n    while (num > 0) {\n        remainder = num % 10;\n        num = Math.floor(num / 10);\n        reversedNumber = reversedNumber * 10 + remainder;\n    }\n    return reversedNumber === temp;\n}\nconsole.log(checkPalindromeNumber(190));\n```\n\n```kt\nfun main() {\n    print(\"Enter No. to Check Palindrome: \")\n    val num = readln()\n    println()\n    if (checkPalindrome(num)) println(\"$num is Palindrome\")\n    else println(\"$num is not Palindrome\")\n}\n\nprivate fun checkPalindrome(num: String): Boolean {\n    var start = 0\n    var end = num.lastIndex\n    while (start <= end) {\n        if (num[start] != num[end]) return false\n        start++\n        end--\n    }\n    return true\n}\n```\n\n```rb\nputs \"Enter the number\"\nnum=gets.chomp.to_i\n\ntemp=num\nsum = 0\n\nwhile num!=0  #implementation of while loop\n    rem=num%10\n    num=num/10\n    sum=sum*10+rem\nend\n\nif(temp==sum)\n    puts \"The #{temp} is a palindrome\"\nelse\n    puts \"The #{temp} is not a palindrome\"\nend\n```\n\n```swift\nvar reversen = 0\nvar rem = 0\nvar n = 121\nvar no = n\nno=n\n\nwhile n != 0 {\n    rem = n%10\n    reversen = reversen * 10 + rem\n    n /= 10\n}\nif(no == reversen)\n{\n    print(\"\\(no)\" + \" is palindrome\")\n}\nelse\n{\n    print(\"\\(no)\" + \" is  not palindrome\")\n   \n}\n```\n\n```ts\nfunction checkPalindromeNumber(num: number) {\n    let remainder: number, temp: number, reversedNumber: number = 0\n    \n    temp = num;\n\n    while (num > 0) {\n        remainder = num % 10\n        num = Math.floor(num / 10)\n        reversedNumber = reversedNumber*10 + remainder\n    }\n\n    return reversedNumber === temp\n}\n\nconsole.log(checkPalindromeNumber(190))\n```\n\n```py\nnumber = input(\"Input:\")\nprint(\"Palindrome Number\" if number == number[::-1] else \"Not Palindrome Number\")\n```\n\n```dart\nvoid main() {\n  print(isNumberPalindrome(223));\n}\n\nbool isNumberPalindrome(int num) {\n  String originalNumber = num.toString();\n  String reversed = originalNumber.split('').reversed.join('');\n  if (originalNumber == reversed)\n    return true;\n  else\n    return false;\n}\n```\n\n```php\n<?php\n\nfunction check_palindrome_number($num)\n{\n\treturn strrev($num) == $num;\n}\n\necho check_palindrome_number(121) ? 'Palindrome String' : 'Not Palindrome String';\n```\n\n```pl\n# By Soham Gupta (http://github.com/gupta-soham/) (https://www.linkedin.com/in/soham-gupta-in/)\n\n# A Perl program to check palindrome numbe\n# Input  : 121\n# Output : Palindrome Number\n\n\nprint \"Enter a number: \";\n$n = <STDIN>;\n# $n = 121\n$t = $n;\n$s = 0;\nwhile ($n > 0) {\n    $r = $n % 10;\n    $s = ($s * 10) + $r;\n    $n = int($n / 10);\n}\n\nif ($t == $s) {\n    print \"Number is Palindrome!\\n\";\n} \nelse {\n    print \"Number is not Palindrome!\\n\";\n}\n```\n\n```rs\nfn check_palindrome(mut num: i32) -> bool {\n    let mut remainder;\n    let temp;\n    let mut reversed = 0;\n\n    temp = num;\n\n    while num>0 {\n        remainder = num%10;\n        num = num/10;\n        reversed  = reversed*10 +remainder;\n    }\n        \n    return reversed == temp;\n}\n\nfn main() {\n    let palindrome = check_palindrome(199);\n\n    println!(\"{}\", palindrome)\n}\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2022-11-25T05:16:26Z"}