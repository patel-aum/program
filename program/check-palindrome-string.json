{"slug":"check-palindrome-string","title":"Check Palindrome String","trackId":1538,"tags":["C","C++","Java","JavaScript","TypeScript","Python","PHP","Rust"],"contributors":["joao-vitor-souza","kangjung","MetalOoze05","rahmat-st","harshraj8843"],"contentHtml":"<h2>Write a program to check palindrome string</h2>\n<p>Palindrome string is a string that is same when read from left to right and right to left. For example, \"aba\" is a palindrome string, \"abc\" is not.</p>\n<pre><code>Input  : abba\r\nOutput : Palindrome String\n</code></pre>\n<hr>\n<pre><code>#include &#x3C;stdio.h>\n#include &#x3C;string.h>\n\nint main() {\n    int i, j;\n    char str[20] = \"abba\";\n    \n    j = strlen(str) - 1;\n\n    while (i &#x3C;= j) {\n        if (str[i] != str[j]) {\n            printf(\"Not a Palindrome String\");\n            return 0;\n        } else {\n            i++;\n            j--;\n        }\n    }\n    printf(\"Palindrome String\");\n    return 1;\n}\n</code></pre>\n<pre><code>#include &#x3C;iostream>\n\nusing namespace std;\n\nbool isPal(string text) {\n    string tmp;\n\n    for (int i = text.size() - 1; i >= 0; i--) {\n        tmp += text[i];\n    }\n\n    if (tmp == text) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    string text = \"abba\";\n\n    if (isPal(text)) {\n        cout &#x3C;&#x3C; \"Palindrome String\" &#x3C;&#x3C; endl;\n        return 0;\n    } else {\n        cout &#x3C;&#x3C; \"Not a Palindrome String\" &#x3C;&#x3C; endl;\n        return 1;\n    }\n\n    return 1;\n}\n</code></pre>\n<pre><code>import java.util.Scanner;\n\npublic class CheckPalindromeString {\n\tpublic static void main(String[] args) throws Exception {\n\t\tScanner sc = new Scanner(System.in);\n\t\tString str = sc.next();\n\t\tint i = 0;\n\t\tint j = str.length() - 1;\n\t\tboolean check = true;\n\t\tsc.close();\n\t\twhile (i &#x3C;= j) {\n\t\t\tif (str.charAt(i) != str.charAt(j)) {\n\t\t\t\tcheck = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t\tSystem.out.println((check) ? \"Palindrome String\" : \"Not Palindrome String\");\n\t}\n}\n</code></pre>\n<pre><code>function checkPalindromeString(str) {\n\tconst reverseStr = [...str].reverse().join('')\n\treturn str === reverseStr\n}\n\nconsole.log(\n\tcheckPalindromeString('abba') ? 'Palindrome String' : 'Not Palindrome String',\n)\n</code></pre>\n<pre><code>const checkPalindromeString = (text: string) => {\n    text = text.toLowerCase();\n    let n = text.length;\n    let low = 0;\n    let high = n - 1;\n\n    while (high > low) {\n        if (text[high] != text[low]) {\n            return false;\n        }\n        low++;\n        high--;\n    }\n    return true;\n};\n\n/**\n * Test Case 1:\n * text = \"abba\"\n */\n\nlet string = \"abba\";\nif (checkPalindromeString(string)) {\n    console.log(\"Palindrome String\");\n} else {\n    console.log(\"Not a Palindrome String\");\n}\n</code></pre>\n<pre><code>def checkPalindromeString(str):\n    return str == str[::-1]\n\n\nprint(\"Palindrome String\" if checkPalindromeString(\"abba\") else \"Not Palindrome String\")\n</code></pre>\n<pre><code>&#x3C;?php\n\nfunction check_palindrome_string($str)\n{\n\treturn strrev($str) == $str;\n}\n\necho check_palindrome_string('abba') ? 'Palindrome String' : 'Not Palindrome String';\n</code></pre>\n<pre><code>fn check_palindrome_string(string: &#x26;str) {\n\tlet reverse_string: String = string.chars().rev().collect();\n\n\tif string == reverse_string {\n\t\tprintln!(\"Palindrome String\");\n\t} else {\n\t\tprintln!(\"Not Palindrome String\");\n\t}\n}\n\nfn main() {\n\tcheck_palindrome_string(\"abba\");\n}\n</code></pre>\n","markdown":"\n## Write a program to check palindrome string\n\nPalindrome string is a string that is same when read from left to right and right to left. For example, \"aba\" is a palindrome string, \"abc\" is not.\r\n\r\n```\r\nInput  : abba\r\nOutput : Palindrome String\r\n```\n\n---\n\n<CodeBlock slug=\"check-palindrome-string\" >\n\n```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    int i, j;\n    char str[20] = \"abba\";\n    \n    j = strlen(str) - 1;\n\n    while (i <= j) {\n        if (str[i] != str[j]) {\n            printf(\"Not a Palindrome String\");\n            return 0;\n        } else {\n            i++;\n            j--;\n        }\n    }\n    printf(\"Palindrome String\");\n    return 1;\n}\n```\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\nbool isPal(string text) {\n    string tmp;\n\n    for (int i = text.size() - 1; i >= 0; i--) {\n        tmp += text[i];\n    }\n\n    if (tmp == text) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nint main() {\n    string text = \"abba\";\n\n    if (isPal(text)) {\n        cout << \"Palindrome String\" << endl;\n        return 0;\n    } else {\n        cout << \"Not a Palindrome String\" << endl;\n        return 1;\n    }\n\n    return 1;\n}\n```\n\n```java\nimport java.util.Scanner;\n\npublic class CheckPalindromeString {\n\tpublic static void main(String[] args) throws Exception {\n\t\tScanner sc = new Scanner(System.in);\n\t\tString str = sc.next();\n\t\tint i = 0;\n\t\tint j = str.length() - 1;\n\t\tboolean check = true;\n\t\tsc.close();\n\t\twhile (i <= j) {\n\t\t\tif (str.charAt(i) != str.charAt(j)) {\n\t\t\t\tcheck = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t\tSystem.out.println((check) ? \"Palindrome String\" : \"Not Palindrome String\");\n\t}\n}\n```\n\n```js\nfunction checkPalindromeString(str) {\n\tconst reverseStr = [...str].reverse().join('')\n\treturn str === reverseStr\n}\n\nconsole.log(\n\tcheckPalindromeString('abba') ? 'Palindrome String' : 'Not Palindrome String',\n)\n```\n\n```ts\nconst checkPalindromeString = (text: string) => {\n    text = text.toLowerCase();\n    let n = text.length;\n    let low = 0;\n    let high = n - 1;\n\n    while (high > low) {\n        if (text[high] != text[low]) {\n            return false;\n        }\n        low++;\n        high--;\n    }\n    return true;\n};\n\n/**\n * Test Case 1:\n * text = \"abba\"\n */\n\nlet string = \"abba\";\nif (checkPalindromeString(string)) {\n    console.log(\"Palindrome String\");\n} else {\n    console.log(\"Not a Palindrome String\");\n}\n```\n\n```py\ndef checkPalindromeString(str):\n    return str == str[::-1]\n\n\nprint(\"Palindrome String\" if checkPalindromeString(\"abba\") else \"Not Palindrome String\")\n```\n\n```php\n<?php\n\nfunction check_palindrome_string($str)\n{\n\treturn strrev($str) == $str;\n}\n\necho check_palindrome_string('abba') ? 'Palindrome String' : 'Not Palindrome String';\n```\n\n```rs\nfn check_palindrome_string(string: &str) {\n\tlet reverse_string: String = string.chars().rev().collect();\n\n\tif string == reverse_string {\n\t\tprintln!(\"Palindrome String\");\n\t} else {\n\t\tprintln!(\"Not Palindrome String\");\n\t}\n}\n\nfn main() {\n\tcheck_palindrome_string(\"abba\");\n}\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2022-12-02T06:03:31Z"}