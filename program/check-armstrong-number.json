{"slug":"check-armstrong-number","title":"Check Armstrong Number","trackId":1236,"tags":["C","C++","Java","JavaScript","TypeScript","Python"],"contributors":["joao-vitor-souza","harshraj8843","MufaddalHakim","Badboy-16","CodingWithHardik","chetanchandel31","Rainingcity"],"contentHtml":"<h2>Write a program to check armstrong number</h2>\n<p>An Armstrong number is a number that is equal to the sum of cubes of its digits.</p>\n<pre><code>Input  : 153\r\nOutput : Armstrong Number\n</code></pre>\n<hr>\n<pre><code>#include &#x3C;stdio.h>\n\nint is_armstrong(int);\nint get_num_of_digits(int);\nint raise_power(int, int);\n\nint main() {\n    int num;\n    printf(\"Input  : \");\n    scanf(\"%d\", &#x26;num);\n    if (is_armstrong(num)) {\n        printf(\"Output : Armstrong Number\");\n    } else {\n        printf(\"Output : Not Armstrong Number\");\n    }\n    return 0;\n}\n\nint is_armstrong(int n) {\n    int original = n;\n    int power = get_num_of_digits(n);\n    int sum = 0;\n    for (int i = 0; i &#x3C; power; i++, n /= 10) {\n        sum += raise_power(n % 10, power);\n    }\n    return (sum == original) ? 1 : 0;\n}\n\nint get_num_of_digits(int n) {\n    int result;\n    for (result = 1; n /= 10; result++) {\n        ;\n    }\n    return result;\n}\n\nint raise_power(int n, int p) {\n    int result = 1;\n    for (int i = 0; i &#x3C; p; i++) {\n        result *= n;\n    }\n    return result;\n}\n</code></pre>\n<pre><code>#include &#x3C;iostream>\n\nbool check_armstrong_number_helper(int number){\n    // Max sum of n-digits number &#x3C;= 9^3*n\n    if (number >= 10000) return false;\n\n    int sum = 0;\n    int tmp_number = number;\n    while(tmp_number != 0){\n        int curr_digit = tmp_number % 10;\n        sum += curr_digit * curr_digit * curr_digit;\n        tmp_number /= 10;\n    }\n    return (sum == number);\n}\n\nvoid check_armstrong_number(int number){\n    if (check_armstrong_number_helper(number)){\n        std::cout&#x3C;&#x3C;\"Armstrong Number\"&#x3C;&#x3C;std::endl;\n    }else{\n        std::cout&#x3C;&#x3C;\"Not Armstrong Number\"&#x3C;&#x3C;std::endl;\n    }\n}\n\nint main(){\n    check_armstrong_number(153);\n    check_armstrong_number(152);\n    return 0;\n}\n</code></pre>\n<pre><code>import java.util.*;\n\npublic class CheckArmstrongNumber {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int number = sc.nextInt();\n        int n = number;\n        int sum = 0;\n\n        while (n > 0) {\n            int digit = n % 10;\n            sum += digit * digit * digit;\n            n /= 10;\n        }\n\n        System.out.println(sum == number);\n        sc.close();\n    }\n}\n</code></pre>\n<pre><code>const getCube = (n) => n * n * n;\n\nconst checkArmstrongNumber = (number) => {\n  if (typeof number !== \"number\") return \"Please enter a valid number.\";\n\n  const digitsOfNUmber = String(number)\n    .split(\"\")\n    .map((digit) => Number(digit));\n\n  let sumOfCubesOfDigits = 0;\n\n  digitsOfNUmber.forEach((digit) => {\n    sumOfCubesOfDigits += getCube(digit);\n  });\n\n  const isArmstrong = sumOfCubesOfDigits === number;\n\n  return isArmstrong ? \"Armstrong Number\" : \"Not Armstrong Number\";\n};\n\nconsole.log(checkArmstrongNumber(153));\n</code></pre>\n<pre><code>const getCube = (n: number) => n * n * n;\n\nconst checkArmstrongNumber = (number: number) => {\n  const digitsOfNUmber: number[] = String(number)\n    .split(\"\")\n    .map((digit) => Number(digit));\n\n  let sumOfCubesOfDigits: number = 0;\n\n  digitsOfNUmber.forEach((digit) => {\n    sumOfCubesOfDigits += getCube(digit);\n  });\n\n  const isArmstrong = sumOfCubesOfDigits === number;\n\n  return isArmstrong ? \"Armstrong Number\" : \"Not Armstrong Number\";\n};\n\nconsole.log(checkArmstrongNumber(153));\n</code></pre>\n<pre><code>num = int(input(\"Input  : \"))\nsum = 0\ntemp = num\nwhile temp > 0:\n    digit = temp % 10\n    sum += digit**3\n    temp //= 10\nif num == sum:\n    print(\"Output : Armstrong Number\")\nelse:\n    print(\"Output : Non Armstrong Number\")\n</code></pre>\n","markdown":"\n## Write a program to check armstrong number\n\nAn Armstrong number is a number that is equal to the sum of cubes of its digits.\r\n\r\n```\r\nInput  : 153\r\nOutput : Armstrong Number\r\n```\n\n---\n\n<CodeBlock slug=\"check-armstrong-number\" >\n\n```c\n#include <stdio.h>\n\nint is_armstrong(int);\nint get_num_of_digits(int);\nint raise_power(int, int);\n\nint main() {\n    int num;\n    printf(\"Input  : \");\n    scanf(\"%d\", &num);\n    if (is_armstrong(num)) {\n        printf(\"Output : Armstrong Number\");\n    } else {\n        printf(\"Output : Not Armstrong Number\");\n    }\n    return 0;\n}\n\nint is_armstrong(int n) {\n    int original = n;\n    int power = get_num_of_digits(n);\n    int sum = 0;\n    for (int i = 0; i < power; i++, n /= 10) {\n        sum += raise_power(n % 10, power);\n    }\n    return (sum == original) ? 1 : 0;\n}\n\nint get_num_of_digits(int n) {\n    int result;\n    for (result = 1; n /= 10; result++) {\n        ;\n    }\n    return result;\n}\n\nint raise_power(int n, int p) {\n    int result = 1;\n    for (int i = 0; i < p; i++) {\n        result *= n;\n    }\n    return result;\n}\n```\n\n```cpp\n#include <iostream>\n\nbool check_armstrong_number_helper(int number){\n    // Max sum of n-digits number <= 9^3*n\n    if (number >= 10000) return false;\n\n    int sum = 0;\n    int tmp_number = number;\n    while(tmp_number != 0){\n        int curr_digit = tmp_number % 10;\n        sum += curr_digit * curr_digit * curr_digit;\n        tmp_number /= 10;\n    }\n    return (sum == number);\n}\n\nvoid check_armstrong_number(int number){\n    if (check_armstrong_number_helper(number)){\n        std::cout<<\"Armstrong Number\"<<std::endl;\n    }else{\n        std::cout<<\"Not Armstrong Number\"<<std::endl;\n    }\n}\n\nint main(){\n    check_armstrong_number(153);\n    check_armstrong_number(152);\n    return 0;\n}\n```\n\n```java\nimport java.util.*;\n\npublic class CheckArmstrongNumber {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int number = sc.nextInt();\n        int n = number;\n        int sum = 0;\n\n        while (n > 0) {\n            int digit = n % 10;\n            sum += digit * digit * digit;\n            n /= 10;\n        }\n\n        System.out.println(sum == number);\n        sc.close();\n    }\n}\n```\n\n```js\nconst getCube = (n) => n * n * n;\n\nconst checkArmstrongNumber = (number) => {\n  if (typeof number !== \"number\") return \"Please enter a valid number.\";\n\n  const digitsOfNUmber = String(number)\n    .split(\"\")\n    .map((digit) => Number(digit));\n\n  let sumOfCubesOfDigits = 0;\n\n  digitsOfNUmber.forEach((digit) => {\n    sumOfCubesOfDigits += getCube(digit);\n  });\n\n  const isArmstrong = sumOfCubesOfDigits === number;\n\n  return isArmstrong ? \"Armstrong Number\" : \"Not Armstrong Number\";\n};\n\nconsole.log(checkArmstrongNumber(153));\n```\n\n```ts\nconst getCube = (n: number) => n * n * n;\n\nconst checkArmstrongNumber = (number: number) => {\n  const digitsOfNUmber: number[] = String(number)\n    .split(\"\")\n    .map((digit) => Number(digit));\n\n  let sumOfCubesOfDigits: number = 0;\n\n  digitsOfNUmber.forEach((digit) => {\n    sumOfCubesOfDigits += getCube(digit);\n  });\n\n  const isArmstrong = sumOfCubesOfDigits === number;\n\n  return isArmstrong ? \"Armstrong Number\" : \"Not Armstrong Number\";\n};\n\nconsole.log(checkArmstrongNumber(153));\n```\n\n```py\nnum = int(input(\"Input  : \"))\nsum = 0\ntemp = num\nwhile temp > 0:\n    digit = temp % 10\n    sum += digit**3\n    temp //= 10\nif num == sum:\n    print(\"Output : Armstrong Number\")\nelse:\n    print(\"Output : Non Armstrong Number\")\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2022-12-02T06:03:31Z"}